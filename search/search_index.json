{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Qiang Liu is a postdoc at EPFL, working with Prof. Mathias Payer in the HexHive laboratory. He earned his Ph.D. in 2023 from Zhejiang University (ZJU) under the guidance of Prof. Yajin Zhou and a B.S. degree from the Beijing Institute of Technology (BIT) in 2018. His research in cybersecurity focuses on 1) developing prior-to/after-release security enforcement of software based on deep understanding, and 2) building the chain of trust examined by full-chain exploits. His work has been recognized at all top security conferences: IEEE S&P, Usenix Security, ACM CCS, and ISOC NDSS. He received the Best Paper Awards at USENIX Security'24 and ACM RAID'24. He is also serving on the program committee for IEEE/ACM ASE'25 and USENIX Security'25 and is a reviewer for ACM CSUR and ACM TOSEM. Introduction in Chinese \u5218\u5f3a\u73b0\u4e3a\u745e\u58eb\u6d1b\u6851\u8054\u90a6\u7406\u5de5\u5b66\u9662\uff08EPFL\uff09HexHive\u5b9e\u9a8c\u5ba4\u7684\u535a\u58eb\u540e\u7814\u7a76\u5458\uff0c\u5408\u4f5c\u5bfc\u5e08\u4e3aMathias Payer\u6559\u6388\u3002 \u4ed6\u4e8e2023\u5e74\u535a\u58eb\u6bd5\u4e1a\u4e8e\u6d59\u6c5f\u5927\u5b66\uff0c\u5e08\u4ece\u5468\u4e9a\u91d1\u6559\u6388\u3002\u4ed6\u7684\u7814\u7a76\u805a\u7126\u4e8e\u7cfb\u7edf\u5b89\u5168\uff0c\u81f4\u529b\u4e8e\u4ece\u6df1\u5c42\u7406\u89e3\u51fa\u53d1\uff0c \u5728\u8f6f\u4ef6\u53d1\u5e03\u524d\u540e\u5b9e\u73b0\u6709\u6548\u7684\u5b89\u5168\u4fdd\u969c\u673a\u5236\uff0c\u540c\u65f6\u56f4\u7ed5\u771f\u5b9e\u653b\u51fb\u8def\u5f84\u6784\u5efa\u548c\u9a8c\u8bc1\u53ef\u4fe1\u6267\u884c\u94fe\u3002 \u4ed6\u7684\u591a\u9879\u7814\u7a76\u6210\u679c\u5df2\u53d1\u8868\u5728IEEE S&P\u3001USENIX Security\u3001ACM CCS \u548c NDSS \u7b49\u56fd\u9645\u9876\u7ea7\u5b89\u5168\u4f1a\u8bae\u4e0a\uff0c \u5e76\u8363\u83b7USENIX Security 2024 \u548c ACM RAID 2024 \u6700\u4f73\u8bba\u6587\u5956\u3002 \u540c\u65f6\uff0c\u4ed6\u662fIEEE/ACM ASE 2025 \u4e0e USENIX Security 2025 \u7684\u7a0b\u5e8f\u59d4\u5458\u4f1a\u59d4\u5458\uff0c \u5e76\u4e3aACM CSUR \u548c ACM TOSEM \u7b49\u671f\u520a\u62c5\u4efb\u5ba1\u7a3f\u4eba\u3002 CV Google Scholar Email Achievements # \ud83d\udee0\ufe0f Grammar-based Arbitrary Hypervisor Fuzzing Framework ( HyperPill [ SEC24 ]/ ViDeZZo [ SP23 ]/ Truman [NDSS25] ) \ud83c\udfc6 HyperPill won the best paper award at USENIX Security'24 \ud83c\udfc6 Tango won the best paper award at ACM RAID'24 \ud83d\udee0\ufe0f Partial Rehosting of Linux-Based Firmware ( FirmGuide [ ASE21 ]/ ECMO [ CCS21 ]) Ongoing Projects # Hypervisor Security With the rapid advancement and widespread adoption of AI, cloud computing is experiencing renewed momentum. At the core of secure cloud infrastructure lies a vulnerability-free hypervisor. Embracing a full-lifecycle security approach, our research focuses on identifying and resolving hypervisor vulnerabilities prior to release, while also developing complementary defenses to mitigate attacks in production environments. To drive deeper insights, we also develop real-world exploits targeting state-of-the-art hypervisors. AI System Security The success of AI is fundamentally reshaping the entire computing stack, from hardware to high-level software. As new codebases and specialized hardware emerge to support AI workloads, longstanding security challenges are resurfacing in modern contexts. Our research investigates security issues across multiple layers of AI systems, focusing on compilers, interpreters, operating systems, hypervisors, and heterogeneous hardware such as GPUs. AI for System Understanding Modern system software has reached a scale and complexity that surpasses human cognitive limits. No individual can realistically comprehend the full breadth of its specifications, source code, reviews, and development history. This overwhelming volume of information poses serious challenges to effective auditing, debugging, and security analysis. We envision a super model\u2014a fusion of Large Language Models (LLMs) and Knowledge Graphs (KGs)\u2014to bridge the gap between human understanding and large-scale system software. By encoding both structured knowledge (e.g., specifications, test results) and unstructured knowledge (e.g., source code, review discussions, crash reports), this model will provide a unified, intelligent interface for low-level system comprehension. As a collaborative assistant, the super model will help developers and researchers understand system intent, behavior, and evolution, significantly reducing manual effort in navigating, maintaining, and securing complex system software. Security Shift: from Defense to Resilience The evolution of computing has progressed through several transformative milestones\u2014from standalone systems to personal computing and the Web 2.0 era, followed by large-scale computing and deep learning, and more recently, the rise of foundation models and AI breakthroughs. As we move into the next era\u2014defined by ubiquitous computing and heterogeneous system architectures\u2014security challenges are becoming more complex and distributed. In this new landscape, computing devices take many forms: personal, enterprise-grade, and embedded systems, all interconnected through a global edge fabric. The scale and diversity of these environments demand a unified software ecosystem and robust, adaptable security frameworks. Crucially, the security paradigm must shift: success is no longer measured solely by the ability to block attacks. Instead, the focus must be on resilience\u2014ensuring rapid recovery, minimizing downtime, and maintaining business continuity after incidents. We propose a thin, scalable, and formally verified minimum recovery system as a foundational layer to meet this challenge, enabling reliable, system-wide restoration in the face of growing threats. Weekend Projects # Hacking Culture We have focused too much on cool technology while neglecting the fun stories, nerdy fonts, and meme creativity that are equally important. It's time to systematically explore and celebrate hacking culture\u2014not just to entertain ourselves but also to inspire and attract more people to join us. Parents can raise children who are independent and creative, teachers can guides students who are collaborative and competitive, and entrepreneurs can engage customers who are eager to buy innovative products. Be classy and be cool! Academic Family Tree of Computer Science Scholars Lines of Code on Earth","title":"Home"},{"location":"#achievements","text":"\ud83d\udee0\ufe0f Grammar-based Arbitrary Hypervisor Fuzzing Framework ( HyperPill [ SEC24 ]/ ViDeZZo [ SP23 ]/ Truman [NDSS25] ) \ud83c\udfc6 HyperPill won the best paper award at USENIX Security'24 \ud83c\udfc6 Tango won the best paper award at ACM RAID'24 \ud83d\udee0\ufe0f Partial Rehosting of Linux-Based Firmware ( FirmGuide [ ASE21 ]/ ECMO [ CCS21 ])","title":"Achievements"},{"location":"#ongoing-projects","text":"Hypervisor Security With the rapid advancement and widespread adoption of AI, cloud computing is experiencing renewed momentum. At the core of secure cloud infrastructure lies a vulnerability-free hypervisor. Embracing a full-lifecycle security approach, our research focuses on identifying and resolving hypervisor vulnerabilities prior to release, while also developing complementary defenses to mitigate attacks in production environments. To drive deeper insights, we also develop real-world exploits targeting state-of-the-art hypervisors. AI System Security The success of AI is fundamentally reshaping the entire computing stack, from hardware to high-level software. As new codebases and specialized hardware emerge to support AI workloads, longstanding security challenges are resurfacing in modern contexts. Our research investigates security issues across multiple layers of AI systems, focusing on compilers, interpreters, operating systems, hypervisors, and heterogeneous hardware such as GPUs. AI for System Understanding Modern system software has reached a scale and complexity that surpasses human cognitive limits. No individual can realistically comprehend the full breadth of its specifications, source code, reviews, and development history. This overwhelming volume of information poses serious challenges to effective auditing, debugging, and security analysis. We envision a super model\u2014a fusion of Large Language Models (LLMs) and Knowledge Graphs (KGs)\u2014to bridge the gap between human understanding and large-scale system software. By encoding both structured knowledge (e.g., specifications, test results) and unstructured knowledge (e.g., source code, review discussions, crash reports), this model will provide a unified, intelligent interface for low-level system comprehension. As a collaborative assistant, the super model will help developers and researchers understand system intent, behavior, and evolution, significantly reducing manual effort in navigating, maintaining, and securing complex system software. Security Shift: from Defense to Resilience The evolution of computing has progressed through several transformative milestones\u2014from standalone systems to personal computing and the Web 2.0 era, followed by large-scale computing and deep learning, and more recently, the rise of foundation models and AI breakthroughs. As we move into the next era\u2014defined by ubiquitous computing and heterogeneous system architectures\u2014security challenges are becoming more complex and distributed. In this new landscape, computing devices take many forms: personal, enterprise-grade, and embedded systems, all interconnected through a global edge fabric. The scale and diversity of these environments demand a unified software ecosystem and robust, adaptable security frameworks. Crucially, the security paradigm must shift: success is no longer measured solely by the ability to block attacks. Instead, the focus must be on resilience\u2014ensuring rapid recovery, minimizing downtime, and maintaining business continuity after incidents. We propose a thin, scalable, and formally verified minimum recovery system as a foundational layer to meet this challenge, enabling reliable, system-wide restoration in the face of growing threats.","title":"Ongoing Projects"},{"location":"#weekend-projects","text":"Hacking Culture We have focused too much on cool technology while neglecting the fun stories, nerdy fonts, and meme creativity that are equally important. It's time to systematically explore and celebrate hacking culture\u2014not just to entertain ourselves but also to inspire and attract more people to join us. Parents can raise children who are independent and creative, teachers can guides students who are collaborative and competitive, and entrepreneurs can engage customers who are eager to buy innovative products. Be classy and be cool! Academic Family Tree of Computer Science Scholars Lines of Code on Earth","title":"Weekend Projects"},{"location":"posts/","text":"Pinned # A simple guide to system security survival How to do system security research (for PhD students) Doing Research: Where to find related works? Doing Research: Build the knowledge database Doing Research: Coding and Prototyping Doing Research: How to do research presentation? Doing Research: Technology transfer under control Doing Research: Pitfalls/Tweaks/Tricks in R&D Crisis of Prosperit: Internal Shortcuts and External Setbacks Reading # 2024-10-20 Control flow of KVM 2024-09-15 Quick notes about confidential computing 2024-08-07 Bash command caching 2024-08-07 PIE and PIC 2024-07-23 Quick notes for USENIX Security'24 2024-07-07 Tech notes about PyRTFuzz 2024-07-03 Tech notes about AFLNet/ChatAFL 2024-06-08 Notes about HyperCubeOS for x86_64 2024-05-29 KVM/ARM 2024-05-22 Quick notes for SP'24 2024-05-15 Tech notes: binding, grammar-aware fuzzing 2024-05-08 Tech notes: kernel, python, stack unwinding 2024-04-17 Introduction to Domain Specific Language 2024-02-26 Notes for NDSS'24 2022-06-22 Windows, Windows Subsystem Linux (WSL), VirtualBox Ubuntu, Native Ubuntu 2022-05-17 A layered experiment environment 2021-11-03 Coverage Control in libFuzzer 2021-10-27 Introduction to Bhyve 2021-08-18 Display in QEMU 2020-11-30 Clang, wllvm, passes, QEMU/Linux kernel for x86_64 2020-11-18 Buildroot, QEMU and Linux kernel for x86_64 Talks # 2024-10-01 RAID'24 Tango 2023-10-07 PhD Thesis and Slides 2023-07-26 Slides for ViDeZZo at SSLab (1 hour) 2023-05-26 Slides for ViDeZZo at Oakland (15 minutes) 2021-12-13 A brief summary of CS-725 2021-11-18 ASE'21 - FirmGuide 2021-10-24 CS-725 Presentation - Fuzz Testing Random notes # 2025-01-02 \u4e66\u5355 2023-09-08 Crisis before getting a Ph.D. 2022-02-08 \u793e\u4f1a\u5b66\u6982\u8bba 2019-11-23 Summary of CCS'19 (London) 2018-04-07 \u5728\u676d\u5dde\u7684100\u5929-\u7b2c\u4e8c\u5341\u4e03\u5929 2018-03-28 \u5728\u676d\u5dde\u7684100\u5929-\u7b2c\u5341\u5929 2018-03-11 \u5728\u676d\u5dde\u7684100\u5929-\u7b2c\u4e5d\u5929 2018-03-08 \u5728\u676d\u5dde\u7684100\u5929-\u7b2c\u4e09\u5929 2018-03-08 \u5728\u676d\u5dde\u7684100\u5929-\u7b2c\u4e8c\u5929 2018-03-08 \u5728\u676d\u5dde\u7684100\u5929-\u7b2c\u4e00\u5929 2018-02-07 ANU\u6691\u671f\u5b66\u6821-\u5c3e\u58f0 2018-02-07 ANU\u6691\u671f\u5b66\u6821-\u751f\u6d3b\u548c\u5de5\u4f5c 2018-02-01 ANU\u6691\u671f\u5b66\u6821-\u6211\u7684\u77db\u76fe 2018-01-21 ANU\u6691\u671f\u5b66\u6821-\u60ca\u5947 2018-01-19 ANU\u6691\u671f\u5b66\u6821-\u6211\u7684\u77db\u76fe\uff08\u63d0\u7eb2\uff09 2018-01-24 ANU\u6691\u671f\u5b66\u6821-\u7efd\u653e 2018-01-23 ANU\u6691\u671f\u5b66\u6821-\u65e0\u9898","title":"Posts"},{"location":"posts/#pinned","text":"A simple guide to system security survival How to do system security research (for PhD students) Doing Research: Where to find related works? Doing Research: Build the knowledge database Doing Research: Coding and Prototyping Doing Research: How to do research presentation? Doing Research: Technology transfer under control Doing Research: Pitfalls/Tweaks/Tricks in R&D Crisis of Prosperit: Internal Shortcuts and External Setbacks","title":"Pinned"},{"location":"posts/#reading","text":"2024-10-20 Control flow of KVM 2024-09-15 Quick notes about confidential computing 2024-08-07 Bash command caching 2024-08-07 PIE and PIC 2024-07-23 Quick notes for USENIX Security'24 2024-07-07 Tech notes about PyRTFuzz 2024-07-03 Tech notes about AFLNet/ChatAFL 2024-06-08 Notes about HyperCubeOS for x86_64 2024-05-29 KVM/ARM 2024-05-22 Quick notes for SP'24 2024-05-15 Tech notes: binding, grammar-aware fuzzing 2024-05-08 Tech notes: kernel, python, stack unwinding 2024-04-17 Introduction to Domain Specific Language 2024-02-26 Notes for NDSS'24 2022-06-22 Windows, Windows Subsystem Linux (WSL), VirtualBox Ubuntu, Native Ubuntu 2022-05-17 A layered experiment environment 2021-11-03 Coverage Control in libFuzzer 2021-10-27 Introduction to Bhyve 2021-08-18 Display in QEMU 2020-11-30 Clang, wllvm, passes, QEMU/Linux kernel for x86_64 2020-11-18 Buildroot, QEMU and Linux kernel for x86_64","title":"Reading"},{"location":"posts/#talks","text":"2024-10-01 RAID'24 Tango 2023-10-07 PhD Thesis and Slides 2023-07-26 Slides for ViDeZZo at SSLab (1 hour) 2023-05-26 Slides for ViDeZZo at Oakland (15 minutes) 2021-12-13 A brief summary of CS-725 2021-11-18 ASE'21 - FirmGuide 2021-10-24 CS-725 Presentation - Fuzz Testing","title":"Talks"},{"location":"posts/#random-notes","text":"2025-01-02 \u4e66\u5355 2023-09-08 Crisis before getting a Ph.D. 2022-02-08 \u793e\u4f1a\u5b66\u6982\u8bba 2019-11-23 Summary of CCS'19 (London) 2018-04-07 \u5728\u676d\u5dde\u7684100\u5929-\u7b2c\u4e8c\u5341\u4e03\u5929 2018-03-28 \u5728\u676d\u5dde\u7684100\u5929-\u7b2c\u5341\u5929 2018-03-11 \u5728\u676d\u5dde\u7684100\u5929-\u7b2c\u4e5d\u5929 2018-03-08 \u5728\u676d\u5dde\u7684100\u5929-\u7b2c\u4e09\u5929 2018-03-08 \u5728\u676d\u5dde\u7684100\u5929-\u7b2c\u4e8c\u5929 2018-03-08 \u5728\u676d\u5dde\u7684100\u5929-\u7b2c\u4e00\u5929 2018-02-07 ANU\u6691\u671f\u5b66\u6821-\u5c3e\u58f0 2018-02-07 ANU\u6691\u671f\u5b66\u6821-\u751f\u6d3b\u548c\u5de5\u4f5c 2018-02-01 ANU\u6691\u671f\u5b66\u6821-\u6211\u7684\u77db\u76fe 2018-01-21 ANU\u6691\u671f\u5b66\u6821-\u60ca\u5947 2018-01-19 ANU\u6691\u671f\u5b66\u6821-\u6211\u7684\u77db\u76fe\uff08\u63d0\u7eb2\uff09 2018-01-24 ANU\u6691\u671f\u5b66\u6821-\u7efd\u653e 2018-01-23 ANU\u6691\u671f\u5b66\u6821-\u65e0\u9898","title":"Random notes"},{"location":"posts/2018-01-19-ANU%E6%9A%91%E6%9C%9F%E5%AD%A6%E6%A0%A1-%E6%88%91%E7%9A%84%E7%9F%9B%E7%9B%BE%EF%BC%88%E6%8F%90%E7%BA%B2%EF%BC%89/","text":"ANU\u6691\u671f\u5b66\u6821-\u6211\u7684\u77db\u76fe\uff08\u63d0\u7eb2\uff09 # \u7eaf\u7cb9\u751f\u6d3b\u4e0e\u7eaf\u7cb9\u5de5\u4f5c\u662f\u4e0d\u53ef\u8c03\u548c\u7684\u3002\u4ed6\u4eec\u7684\u53e6\u4e00\u4e0d\u540c\u5728\u4e8e\u7eaf\u7cb9\u751f\u6d3b\u4f1a\u8ba9\u4eba\u5feb\u901f\u9677\u5165\u8ff7\u9189\u4e4b\u4e2d\uff0c\u81f3\u5c11\u4e00\u5468\u6216\u51e0\u4ef6\u5927\u4e8b\uff0c\u624d\u8ba9\u4eba\u9192\u609f\uff1b\u800c\u540e\u8005\u8ba9\u4eba\u65f6\u65f6\u523b\u523b\u90fd\u5145\u6ee1\u4e86\u7126\u8651\u3002 \u603b\u7ed3\u8fc7\u53bb\u534a\u5e74\u7684\u79d1\u7814\u751f\u6d3b\u4e0e\u672c\u5468\u77ed\u6682\u7684\u65b0\u5c1d\u8bd5\u8fdb\u884c\u5bf9\u6bd4\u3002\u91cd\u70b9\u8c08\u8bba\u5fc3\u6001\u3001\u65f6\u95f4\u95ee\u9898\u3002\u53ef\u4ee5\u7ed3\u5408\u4e0eZ\u541b\u7684\u53d9\u65e7\u4e4b\u8bed\uff0c\u56de\u987e\uff08\u518d\u4e00\u6b21\uff09\u5927\u5b66\u751f\u6d3b\u3001\u5fc3\u8def\u5386\u7a0b\u3002\u63a2\u7d22\u81ea\u5df1\u7684\u5bfb\u627e\u7684\u53ef\u80fd\u6027\u4e0e\u751f\u6d3b\u7684\u8c03\u5242\u3002","title":"ANU\u6691\u671f\u5b66\u6821-\u6211\u7684\u77db\u76fe\uff08\u63d0\u7eb2\uff09"},{"location":"posts/2018-01-19-ANU%E6%9A%91%E6%9C%9F%E5%AD%A6%E6%A0%A1-%E6%88%91%E7%9A%84%E7%9F%9B%E7%9B%BE%EF%BC%88%E6%8F%90%E7%BA%B2%EF%BC%89/#anu-","text":"\u7eaf\u7cb9\u751f\u6d3b\u4e0e\u7eaf\u7cb9\u5de5\u4f5c\u662f\u4e0d\u53ef\u8c03\u548c\u7684\u3002\u4ed6\u4eec\u7684\u53e6\u4e00\u4e0d\u540c\u5728\u4e8e\u7eaf\u7cb9\u751f\u6d3b\u4f1a\u8ba9\u4eba\u5feb\u901f\u9677\u5165\u8ff7\u9189\u4e4b\u4e2d\uff0c\u81f3\u5c11\u4e00\u5468\u6216\u51e0\u4ef6\u5927\u4e8b\uff0c\u624d\u8ba9\u4eba\u9192\u609f\uff1b\u800c\u540e\u8005\u8ba9\u4eba\u65f6\u65f6\u523b\u523b\u90fd\u5145\u6ee1\u4e86\u7126\u8651\u3002 \u603b\u7ed3\u8fc7\u53bb\u534a\u5e74\u7684\u79d1\u7814\u751f\u6d3b\u4e0e\u672c\u5468\u77ed\u6682\u7684\u65b0\u5c1d\u8bd5\u8fdb\u884c\u5bf9\u6bd4\u3002\u91cd\u70b9\u8c08\u8bba\u5fc3\u6001\u3001\u65f6\u95f4\u95ee\u9898\u3002\u53ef\u4ee5\u7ed3\u5408\u4e0eZ\u541b\u7684\u53d9\u65e7\u4e4b\u8bed\uff0c\u56de\u987e\uff08\u518d\u4e00\u6b21\uff09\u5927\u5b66\u751f\u6d3b\u3001\u5fc3\u8def\u5386\u7a0b\u3002\u63a2\u7d22\u81ea\u5df1\u7684\u5bfb\u627e\u7684\u53ef\u80fd\u6027\u4e0e\u751f\u6d3b\u7684\u8c03\u5242\u3002","title":"ANU\u6691\u671f\u5b66\u6821-\u6211\u7684\u77db\u76fe\uff08\u63d0\u7eb2\uff09"},{"location":"posts/2018-01-21-ANU%E6%9A%91%E6%9C%9F%E5%AD%A6%E6%A0%A1-%E6%83%8A%E5%A5%87/","text":"ANU\u6691\u671f\u5b66\u6821-\u60ca\u5947 # \u5e8f # \u8fd9\u7bc7\u6587\u7ae0\u624d\u662f\u5728ANU\u6691\u671f\u5b66\u6821\u5199\u4e0b\u7684\u7b2c\u4e00\u7bc7\u6587\u7ae0\uff0c\u7f16\u8f91\u7684\u65f6\u5019\u628a\u5b83\u5fd8\u6389\u4e86\u3002\u7b2c\u4e00\u8ba9\u4eba\u5360\u4e86\u53bb\uff0c\u59d1\u4e14\u843d\u4e2a\u7b2c\u4e94\u540d\u7f62\uff01 \u6b63\u6587 # \u4e2d\u56fd\u4eba\u5f88\u65e9\u5c31\u63cf\u8ff0\u8fc7\u4fef\u77b0\u4e4b\u666f\u8272\uff0c\u6bd4\u5982\u201c\u6797\u6d77\u96ea\u539f\u201d\u3001\u201c\u677e\u6d9b\u9635\u9635\u201d\u4e4b\u7c7b\u7684\u3002\u4e2d\u56fd\u4eba\u4e5f\u5411\u5f80\u98de\u884c\uff0c\u5f53\u6211\u4e58\u5750\u7740\u6ce2\u97f3787\u7ff1\u7fd4\u572812500\u516c\u5c3a\u7684\u9ad8\u7a7a\u4e2d\uff0c\u900f\u7740\u5c0f\u7a97\u5ba1\u89c6\u56db\u5468\u65f6\uff0c\u65f6\u95f4\u548c\u7a7a\u95f4\u90fd\u51dd\u56fa\u4e86\uff0c\u4e0d\u6d41\u52a8\u4ea6\u65e0\u6240\u5c3d\uff1b\u8fd9\u4e91\u6d77\u662f\u9759\u7684\uff0c\u662f\u6ce2\u6d9b\u6c79\u6d8c\u65f6\u5019\u7684\u5b9a\u683c\uff1b\u8fd9\u4e91\u6d77\u662f\u74f7\u76d8\uff0c\u9752\u82b1\u7f8e\u5999\u3001\u5929\u7a79\u8986\u76d6\u3002\u5fc3\u91cc\u662f\u60ca\u53f9\uff0c\u8111\u4e2d\u662f\u7ffb\u6d8c\u3002\u4e2d\u56fd\u53e4\u4ee3\u6587\u4eba\uff0c\u8981\u662f\u6709\u4e00\u4e2a\u80fd\u629f\u6276\u6447\u76f4\u4e0a\u4e5d\u4e07\u91cc\uff0c\u4ed6\u5c06\u5199\u4e0b\u600e\u6837\u7684\u5343\u53e4\u540d\u7bc7\uff1f\u60ca\u5947\uff01\u8fd9\u91cc\u662f\u4e00\u4e2a\u5f02\u6837\u7684\u4e16\u754c\u3002 \u4e91\u5c42\u6e10\u6e10\u7a00\u8584\uff0c\u8fce\u9762\u800c\u6765\u7684\u662f\u5411\u5fc3\u7684\u6d77\u6c34\u3002\u8fd9\u592a\u5e73\u6d0b\u7684\u529b\u91cf\u771f\u662f\u96be\u4ee5\u4f30\u91cf\uff1b\u5f53\u4ed6\u76f4\u7acb\u5728\u6211\u7684\u9762\u524d\u65f6\uff0c\u7a92\u606f\u3001\u60ca\u614c\uff0c\u8fd9\u662f\u600e\u6837\u7684\u5947\u666f\uff0c\u94f6\u6cb3\u843d\u4e5d\u5929\u4ea6\u6709\u6240\u4e0d\u5982\u554a\uff01\u6089\u5c3c\u7684\u590f\u5929\u70ed\u70c8\u800c\u6f6e\u6e7f\uff0c\u6ca1\u6709\u4e45\u7559\uff0c\u4fbf\u5954\u53bb\u4e86\u582a\u57f9\u62c9\u3002\u5c0f\u61a9\u521d\u9192\uff0c\u73af\u987e\u5de6\u53f3\uff0c\u51fa\u4e86\u57ce\u8d70\u6811\u4e1b\u73af\u62b1\u7684\u516c\u8def\uff0c\u7adf\u8ddf\u5bb6\u4e61\u6ca1\u6709\u4ec0\u4e48\u5206\u522b\u3002\u4e0d\u8fc7\uff0c\u6e10\u6e10\u5730\uff0c\u4e5f\u6709\u4e9b\u4e50\u8da3\u3002 \u7b2c\u4e00\u4e2a\u4fbf\u662f\u770b\u8f66\u724c\u3002\u82f1\u6587\u5b57\u6bcd\u6709\u81ea\u5df1\u7684\u72ec\u7279\u7684\u6784\u56fe\u65b9\u6cd5\uff0c\u4f60\u51e0\u4e4e\u627e\u4e0d\u5230\u4ed6\u4eec\u5728\u7b14\u5212\u7c97\u7ec6\u3001\u7b14\u52bf\u67b6\u6784\u65b9\u9762\u7684\u8bbe\u8ba1\uff0c\u4f46\u5728\u8272\u5f69\u3001\u95f4\u8ddd\u3001\u5b57\u53f7\u3001\u5206\u5272\u7b49\u65b9\u9762\uff0c\u82f1\u6587\u5b57\u6bcd\u53ef\u4ee5\u7ed9\u4eba\u4e00\u79cd\u72ec\u7279\u7684\u7f8e\u611f\u2014\u2014\u6781\u5177\u5bf9\u6bd4\u5ea6\u7684\u3001\u6e05\u6670\u7684\u3001\u4eca\u4eba\u5fc3\u65f7\u795e\u6021\u7684\u2014\u2014\u73b0\u4ee3\u7684\u7f8e\u611f\u3002\u800c\u4e2d\u6587\u4e66\u6cd5\u591a\u4ee5\u9ed1\u767d\u4e3a\u4e3b\uff0c\u5c11\u6570\u5229\u7528\u8272\u5f69\u6765\u6807\u8bc6\u7c7b\u4f3c\u201d\u6731\u6279\u201c\u8fd9\u6837\u7684\u7279\u6b8a\u529f\u80fd\u3002\u540c\u65f6\uff0c\u5728\u7b14\u5212\u7684\u5934\u3001\u8eab\u3001\u5c3e\u8bbe\u8ba1\u4e0a\u53ca\u5176\u8bb2\u7a76\uff0c\u751a\u81f3\u58a8\u91cf\u3001\u8f7b\u91cd\u4e5f\u80fd\u8868\u73b0\u4e0d\u540c\u7684\u60c5\u7eea\uff0c\u5728\u7b14\u52bf\u67b6\u6784\u4e0a\u53c8\u4e30\u5bcc\u591a\u6837\u3002\u60f3\u5230\u8fd9\u513f\uff0c\u504f\u504f\u8bc4\u4e0d\u51fa\u4e00\u4e2a\u9ad8\u4e0b\u6765\uff0c\u5c31\u80fd\u7406\u89e3\uff0c\u4e3a\u4ec0\u4e48\u5dee\u5f02\u4f1a\u5e26\u6765\u75db\u82e6\u3002 \u8fd9\u91cc\u7684\u4e91\u5f69\u6781\u5177\u7ae5\u8bdd\u8272\u5f69\u3002\u6d77\u4e0a\u4e91\uff0c\u4eff\u4f5b\u8ba9\u4eba\u7f6e\u8eab\u4e8e\u8d3e\u4ead\u897f\uff0c\u201d\u6c34\u9762\u521d\u5e73\u4e91\u811a\u4f4e\u201c\u3002\u8349\u539f\u4e0a\u4e91\uff0c\u5c31\u662f\u90a3\u6574\u9f50\u6392\u5217\u7684\u7a3b\u8349\u4eba\uff0c\u662f\u519c\u4eba\u4eb2\u624b\u9020\u7684\u3001\u52e4\u52b3\u800c\u6e0a\u535a\u3002\u5c71\u4e0a\u4e91\uff0c\u662f\u86c7\u8eab\u96c0\u5c3e\uff0c\u90a3\u662f\u51e4\u51f0\uff0c\u6b63\u6b32\u8d77\u98de\u821e\u52a8\u4e8e\u4e5d\u5929\u4e4b\u4e0a\u3002\u5bc4\u751f\u4e8e\u94a2\u94c1\u73bb\u7483\u4e2d\u591a\u5e74\u540e\uff0c\u8fd9\u6837\u7684\u60ca\u5947\u96be\u514d\u53d1\u751f\u3002\u5bb6\u91cc\u7684\u5929\u7a7a\u4e5f\u662f\u5f88\u901a\u900f\u7684\uff0c\u4f46\u90a3\u4e9b\u90fd\u662f\u7ae5\u5e74\u7684\u8bb0\u5fc6\u4e86\u3002\u8fd9\u5757\u513f\u5927\u9646\u7684\u4e0a\u7a7a\uff0c\u751f\u5b58\u7740\u4e00\u4f4d\u8ba9\u4eba\u56de\u5f52\u4e50\u8da3\u7684\u795e\u79d8\u4e3b\u6559\uff0c\u5979\u4e0d\u65ad\u7684\u9020\u578b\uff0c\u4e0d\u65ad\u7684\u5b89\u7f6e\uff0c\u65e0\u8bba\u4f60\u7684\u5954\u884c\u7684\u901f\u5ea6\u6709\u591a\u5757\uff0c\u4e5f\u80fd\u8ba9\u4f60\u5e94\u63a5\u4e0d\u6687\uff0c\u4e91\u5f71\u5929\u5149\uff0c\u5176\u4e50\u65e0\u7a77\u3002 \u81ea\u7136\u6216\u8bb8\u662f\u8fd9\u6837\u7684\u4e00\u79cd\u5f62\u6001\uff1a\u6811\u8981\u4e48\u677e\u6563\u9ad8\u5927\uff0c\u8981\u4e48\u5bc6\u96c6\u4f4e\u77ee\uff1b\u679d\u8513\u4ece\u6839\u90e8\u6063\u610f\u6563\u53d1\uff0c\u6781\u5c3d\u8212\u5c55\u3002\u67af\u85e4\u8001\u6811\uff0c\u7edd\u65e0\u8427\u7d22\u4e4b\u610f\uff0c\u53cd\u800c\u866c\u52b2\u9b41\u68a7\uff0c\u4f3c\u6709\u5927\u53e3\u6c14\uff0c\u8981\u518d\u6d3b\u4e0a\u4e00\u5343\u5e74\uff1b\u4e5f\u6709\u7684\u8eab\u578b\u82d7\u6761\uff0c\u98ce\u59ff\u7ef0\u7ea6\uff0c\u6307\u5c16\u6258\u8d77\u7684\u662f\u7389\u76d8\u73cd\u7f9e\uff0c\u8981\u732e\u7ed9\u5929\u795e\u3002 \u5f02\u4e61\u5f02\u666f\uff0c\u53ef\u4ed4\u7ec6\u89c2\u5bdf\uff0c\u8fd9\u96be\u5230\u4e0d\u5c31\u662f\u5bb6\u4e61\u4e48\uff1f\u8fd9\u98ce\u666f\u96be\u5230\u4e0d\u5c31\u662f\u81ea\u7136\u4e48\uff1f","title":"ANU\u6691\u671f\u5b66\u6821-\u60ca\u5947"},{"location":"posts/2018-01-21-ANU%E6%9A%91%E6%9C%9F%E5%AD%A6%E6%A0%A1-%E6%83%8A%E5%A5%87/#anu-","text":"","title":"ANU\u6691\u671f\u5b66\u6821-\u60ca\u5947"},{"location":"posts/2018-01-21-ANU%E6%9A%91%E6%9C%9F%E5%AD%A6%E6%A0%A1-%E6%83%8A%E5%A5%87/#_1","text":"\u8fd9\u7bc7\u6587\u7ae0\u624d\u662f\u5728ANU\u6691\u671f\u5b66\u6821\u5199\u4e0b\u7684\u7b2c\u4e00\u7bc7\u6587\u7ae0\uff0c\u7f16\u8f91\u7684\u65f6\u5019\u628a\u5b83\u5fd8\u6389\u4e86\u3002\u7b2c\u4e00\u8ba9\u4eba\u5360\u4e86\u53bb\uff0c\u59d1\u4e14\u843d\u4e2a\u7b2c\u4e94\u540d\u7f62\uff01","title":"\u5e8f"},{"location":"posts/2018-01-21-ANU%E6%9A%91%E6%9C%9F%E5%AD%A6%E6%A0%A1-%E6%83%8A%E5%A5%87/#_2","text":"\u4e2d\u56fd\u4eba\u5f88\u65e9\u5c31\u63cf\u8ff0\u8fc7\u4fef\u77b0\u4e4b\u666f\u8272\uff0c\u6bd4\u5982\u201c\u6797\u6d77\u96ea\u539f\u201d\u3001\u201c\u677e\u6d9b\u9635\u9635\u201d\u4e4b\u7c7b\u7684\u3002\u4e2d\u56fd\u4eba\u4e5f\u5411\u5f80\u98de\u884c\uff0c\u5f53\u6211\u4e58\u5750\u7740\u6ce2\u97f3787\u7ff1\u7fd4\u572812500\u516c\u5c3a\u7684\u9ad8\u7a7a\u4e2d\uff0c\u900f\u7740\u5c0f\u7a97\u5ba1\u89c6\u56db\u5468\u65f6\uff0c\u65f6\u95f4\u548c\u7a7a\u95f4\u90fd\u51dd\u56fa\u4e86\uff0c\u4e0d\u6d41\u52a8\u4ea6\u65e0\u6240\u5c3d\uff1b\u8fd9\u4e91\u6d77\u662f\u9759\u7684\uff0c\u662f\u6ce2\u6d9b\u6c79\u6d8c\u65f6\u5019\u7684\u5b9a\u683c\uff1b\u8fd9\u4e91\u6d77\u662f\u74f7\u76d8\uff0c\u9752\u82b1\u7f8e\u5999\u3001\u5929\u7a79\u8986\u76d6\u3002\u5fc3\u91cc\u662f\u60ca\u53f9\uff0c\u8111\u4e2d\u662f\u7ffb\u6d8c\u3002\u4e2d\u56fd\u53e4\u4ee3\u6587\u4eba\uff0c\u8981\u662f\u6709\u4e00\u4e2a\u80fd\u629f\u6276\u6447\u76f4\u4e0a\u4e5d\u4e07\u91cc\uff0c\u4ed6\u5c06\u5199\u4e0b\u600e\u6837\u7684\u5343\u53e4\u540d\u7bc7\uff1f\u60ca\u5947\uff01\u8fd9\u91cc\u662f\u4e00\u4e2a\u5f02\u6837\u7684\u4e16\u754c\u3002 \u4e91\u5c42\u6e10\u6e10\u7a00\u8584\uff0c\u8fce\u9762\u800c\u6765\u7684\u662f\u5411\u5fc3\u7684\u6d77\u6c34\u3002\u8fd9\u592a\u5e73\u6d0b\u7684\u529b\u91cf\u771f\u662f\u96be\u4ee5\u4f30\u91cf\uff1b\u5f53\u4ed6\u76f4\u7acb\u5728\u6211\u7684\u9762\u524d\u65f6\uff0c\u7a92\u606f\u3001\u60ca\u614c\uff0c\u8fd9\u662f\u600e\u6837\u7684\u5947\u666f\uff0c\u94f6\u6cb3\u843d\u4e5d\u5929\u4ea6\u6709\u6240\u4e0d\u5982\u554a\uff01\u6089\u5c3c\u7684\u590f\u5929\u70ed\u70c8\u800c\u6f6e\u6e7f\uff0c\u6ca1\u6709\u4e45\u7559\uff0c\u4fbf\u5954\u53bb\u4e86\u582a\u57f9\u62c9\u3002\u5c0f\u61a9\u521d\u9192\uff0c\u73af\u987e\u5de6\u53f3\uff0c\u51fa\u4e86\u57ce\u8d70\u6811\u4e1b\u73af\u62b1\u7684\u516c\u8def\uff0c\u7adf\u8ddf\u5bb6\u4e61\u6ca1\u6709\u4ec0\u4e48\u5206\u522b\u3002\u4e0d\u8fc7\uff0c\u6e10\u6e10\u5730\uff0c\u4e5f\u6709\u4e9b\u4e50\u8da3\u3002 \u7b2c\u4e00\u4e2a\u4fbf\u662f\u770b\u8f66\u724c\u3002\u82f1\u6587\u5b57\u6bcd\u6709\u81ea\u5df1\u7684\u72ec\u7279\u7684\u6784\u56fe\u65b9\u6cd5\uff0c\u4f60\u51e0\u4e4e\u627e\u4e0d\u5230\u4ed6\u4eec\u5728\u7b14\u5212\u7c97\u7ec6\u3001\u7b14\u52bf\u67b6\u6784\u65b9\u9762\u7684\u8bbe\u8ba1\uff0c\u4f46\u5728\u8272\u5f69\u3001\u95f4\u8ddd\u3001\u5b57\u53f7\u3001\u5206\u5272\u7b49\u65b9\u9762\uff0c\u82f1\u6587\u5b57\u6bcd\u53ef\u4ee5\u7ed9\u4eba\u4e00\u79cd\u72ec\u7279\u7684\u7f8e\u611f\u2014\u2014\u6781\u5177\u5bf9\u6bd4\u5ea6\u7684\u3001\u6e05\u6670\u7684\u3001\u4eca\u4eba\u5fc3\u65f7\u795e\u6021\u7684\u2014\u2014\u73b0\u4ee3\u7684\u7f8e\u611f\u3002\u800c\u4e2d\u6587\u4e66\u6cd5\u591a\u4ee5\u9ed1\u767d\u4e3a\u4e3b\uff0c\u5c11\u6570\u5229\u7528\u8272\u5f69\u6765\u6807\u8bc6\u7c7b\u4f3c\u201d\u6731\u6279\u201c\u8fd9\u6837\u7684\u7279\u6b8a\u529f\u80fd\u3002\u540c\u65f6\uff0c\u5728\u7b14\u5212\u7684\u5934\u3001\u8eab\u3001\u5c3e\u8bbe\u8ba1\u4e0a\u53ca\u5176\u8bb2\u7a76\uff0c\u751a\u81f3\u58a8\u91cf\u3001\u8f7b\u91cd\u4e5f\u80fd\u8868\u73b0\u4e0d\u540c\u7684\u60c5\u7eea\uff0c\u5728\u7b14\u52bf\u67b6\u6784\u4e0a\u53c8\u4e30\u5bcc\u591a\u6837\u3002\u60f3\u5230\u8fd9\u513f\uff0c\u504f\u504f\u8bc4\u4e0d\u51fa\u4e00\u4e2a\u9ad8\u4e0b\u6765\uff0c\u5c31\u80fd\u7406\u89e3\uff0c\u4e3a\u4ec0\u4e48\u5dee\u5f02\u4f1a\u5e26\u6765\u75db\u82e6\u3002 \u8fd9\u91cc\u7684\u4e91\u5f69\u6781\u5177\u7ae5\u8bdd\u8272\u5f69\u3002\u6d77\u4e0a\u4e91\uff0c\u4eff\u4f5b\u8ba9\u4eba\u7f6e\u8eab\u4e8e\u8d3e\u4ead\u897f\uff0c\u201d\u6c34\u9762\u521d\u5e73\u4e91\u811a\u4f4e\u201c\u3002\u8349\u539f\u4e0a\u4e91\uff0c\u5c31\u662f\u90a3\u6574\u9f50\u6392\u5217\u7684\u7a3b\u8349\u4eba\uff0c\u662f\u519c\u4eba\u4eb2\u624b\u9020\u7684\u3001\u52e4\u52b3\u800c\u6e0a\u535a\u3002\u5c71\u4e0a\u4e91\uff0c\u662f\u86c7\u8eab\u96c0\u5c3e\uff0c\u90a3\u662f\u51e4\u51f0\uff0c\u6b63\u6b32\u8d77\u98de\u821e\u52a8\u4e8e\u4e5d\u5929\u4e4b\u4e0a\u3002\u5bc4\u751f\u4e8e\u94a2\u94c1\u73bb\u7483\u4e2d\u591a\u5e74\u540e\uff0c\u8fd9\u6837\u7684\u60ca\u5947\u96be\u514d\u53d1\u751f\u3002\u5bb6\u91cc\u7684\u5929\u7a7a\u4e5f\u662f\u5f88\u901a\u900f\u7684\uff0c\u4f46\u90a3\u4e9b\u90fd\u662f\u7ae5\u5e74\u7684\u8bb0\u5fc6\u4e86\u3002\u8fd9\u5757\u513f\u5927\u9646\u7684\u4e0a\u7a7a\uff0c\u751f\u5b58\u7740\u4e00\u4f4d\u8ba9\u4eba\u56de\u5f52\u4e50\u8da3\u7684\u795e\u79d8\u4e3b\u6559\uff0c\u5979\u4e0d\u65ad\u7684\u9020\u578b\uff0c\u4e0d\u65ad\u7684\u5b89\u7f6e\uff0c\u65e0\u8bba\u4f60\u7684\u5954\u884c\u7684\u901f\u5ea6\u6709\u591a\u5757\uff0c\u4e5f\u80fd\u8ba9\u4f60\u5e94\u63a5\u4e0d\u6687\uff0c\u4e91\u5f71\u5929\u5149\uff0c\u5176\u4e50\u65e0\u7a77\u3002 \u81ea\u7136\u6216\u8bb8\u662f\u8fd9\u6837\u7684\u4e00\u79cd\u5f62\u6001\uff1a\u6811\u8981\u4e48\u677e\u6563\u9ad8\u5927\uff0c\u8981\u4e48\u5bc6\u96c6\u4f4e\u77ee\uff1b\u679d\u8513\u4ece\u6839\u90e8\u6063\u610f\u6563\u53d1\uff0c\u6781\u5c3d\u8212\u5c55\u3002\u67af\u85e4\u8001\u6811\uff0c\u7edd\u65e0\u8427\u7d22\u4e4b\u610f\uff0c\u53cd\u800c\u866c\u52b2\u9b41\u68a7\uff0c\u4f3c\u6709\u5927\u53e3\u6c14\uff0c\u8981\u518d\u6d3b\u4e0a\u4e00\u5343\u5e74\uff1b\u4e5f\u6709\u7684\u8eab\u578b\u82d7\u6761\uff0c\u98ce\u59ff\u7ef0\u7ea6\uff0c\u6307\u5c16\u6258\u8d77\u7684\u662f\u7389\u76d8\u73cd\u7f9e\uff0c\u8981\u732e\u7ed9\u5929\u795e\u3002 \u5f02\u4e61\u5f02\u666f\uff0c\u53ef\u4ed4\u7ec6\u89c2\u5bdf\uff0c\u8fd9\u96be\u5230\u4e0d\u5c31\u662f\u5bb6\u4e61\u4e48\uff1f\u8fd9\u98ce\u666f\u96be\u5230\u4e0d\u5c31\u662f\u81ea\u7136\u4e48\uff1f","title":"\u6b63\u6587"},{"location":"posts/2018-01-23-ANU%E6%9A%91%E6%9C%9F%E5%AD%A6%E6%A0%A1-%E6%97%A0%E9%A2%98/","text":"ANU\u6691\u671f\u5b66\u6821-\u65e0\u9898 # \u4e00 # \u73b0\u4ee3\u5316\u7684\u57ce\u5e02\u3001\u5bf9\u81ea\u7136\u7684\u8fc7\u5ea6\u7834\u574f\uff0c\u8ba9\u4e2d\u56fd\u7684\u5e74\u8f7b\u4e00\u4ee3\u96be\u4ee5\u4f53\u4f1a\u5230\u4e00\u4e9b\u7c7b\u4f3c\u4e8e\u201c\u8349\u957f\u83ba\u98de\u201d\u3001\u201c\u843d\u971e\u5b64\u9e6d\u201d\u7684\u666f\u81f4\u4e86\u3002\u5982\u679c\u8fd9\u4e2a\u7ed3\u8bba\u4e0d\u80fd\u666e\u904d\u6210\u7acb\uff0c\u5bf9\u6211\u81ea\u5df1\u603b\u662f\u6210\u7acb\u7684\u3002 \u9ed1\u571f\u5730\u4e0a\u7565\u6709\u4e9b\u5355\u8c03\u4e86\uff0c\u4e0d\u8fc7\u5bb6\u4e61\u4ea6\u6709\u4e9b\u666f\u81f4\uff0c\u5c31\u6bd4\u5982\u7ed3\u70c8\u6cb3\u6cbf\u5cb8\u7684\u6e7f\u5730\uff0c\u5916\u52a0\u4f4e\u77ee\u7684\u704c\u6728\uff0c\u5c42\u6b21\u9519\u843d\u7684\uff0c\u4e5f\u6709\u4e9b\u5982\u753b\u4e4b\u666f\u3002\u6211\u662f\u89c1\u8fc7\u9e70\u7684\uff1b\u8fd8\u6709\u4e9b\u8da3\u5473\u5341\u8db3\u7684\u67ab\u53f6\uff0c\u6211\u603b\u6311\u4e86\u4e9b\u9001\u7ed9\u559c\u6b22\u7684\u4eba\u3002 \u4ece\u5bb6\u51fa\u6765\u4e0a\u5b66\u4e4b\u540e\uff0c\u5c31\u53d8\u5f97\u66f4\u52a0\u5355\u8c03\u3002\u4e1c\u5317\u7684\u5c71\u3001\u516c\u56ed\u5927\u540c\u5c0f\u5f02\uff0c\u6587\u5316\u7684\u79ef\u6dc0\u751a\u5c11\u3002\u6765\u5230\u5317\u4eac\uff0c\u4e5f\u6ca1\u591a\u4f53\u4f1a\u5230\u6587\u5316\u53e4\u90fd\u3001\u540d\u57ce\u7684\u8ff7\u9189\u4e4b\u610f\u3002\u5f53\u7136\u8fd9\u4e9b\u5931\u610f\u591a\u534a\u662f\u81ea\u5df1\u9020\u6210\u7684\uff0c\u73b0\u5728\u89c9\u609f\uff0c\u9ad8\u4e2d\u3001\u5927\u5b66\u6ca1\u6709\u610f\u8bc6\u53bb\u611f\u53d7\uff0c\u624d\u9020\u6210\u4e86\u5bf9\u98ce\u5149\u548c\u53e4\u57ce\u7684\u5931\u671b\u3002 \u4e2d\u56fd\u4eba\u4e00\u76f4\uff0c\u5728\u8fc7\u53bb\u7684\u51e0\u5343\u5e74\u4e2d\uff0c\u90fd\u662f\u8ddf\u81ea\u7136\u751f\u6d3b\u5728\u4e00\u8d77\u7684\u3002\u6210\u201c\u548c\u5408\u201d\u4e4b\u5883\uff0c\u662f\u6211\u4eec\u4e00\u8d2f\u7684\u3001\u6700\u9ad8\u7684\u8ffd\u6c42\u3002\u73b0\u4ee3\u5de5\u5177\u8bbe\u65bd\u5bf9\u81ea\u7136\u7684\u5165\u4fb5\u4e0e\u7834\u574f\u5df2\u7ecf\u9020\u6210\u4e86\u4e00\u79cd\u4eba\u4e0e\u81ea\u7136\u7684\u9694\u79bb\uff1b\u5728\u6063\u610f\u82b3\u534e\u7684\u5e74\u9f84\uff0c\u53bb\u65e0\u5fc3\u611f\u53d7\u8fd9\u5468\u906d\u82b1\u8349\u866b\u9c7c\uff0c\u5b9e\u5728\u662f\u6709\u4e9b\u53ef\u7b11\u3002\u4f46\u8fd9\u4f3c\u4e4e\u662f\u5fc5\u7136\u7684\uff0c\u91ce\u86ee\u7684\u53d1\u5c55\u3001\u7e41\u91cd\u7684\u5b66\u4e1a\u548c\u7ecf\u6d4e\u538b\u529b\u2026\u2026\u4eba\u4e0e\u81ea\u7136\u7684\u548c\u5408\u6015\u53ea\u80fd\u51fa\u73b0\u5728\u201c\u4eba\u95f2\u6842\u82b1\u843d\uff0c\u591c\u9759\u6625\u5c71\u7a7a\u201d\u7684\u8bd7\u53e5\u4e2d\u4e86\u3002 \u4e8c # \u582a\u57f9\u62c9\u5374\u662f\u4e0d\u540c\u7684\u3002 \u6211\u5728\u60f3\uff0c\u6b27\u7f8e\u7684\u4e00\u4e9b\u5730\u65b9\u662f\u4e0d\u662f\u4e0e\u582a\u57f9\u62c9\u7c7b\u4f3c\uff0c\u5bf9\u81ea\u7136\u7684\u5e72\u6270\u51e0\u8fd1\u4e3a\u96f6\uff0c\u751a\u81f3\u6709\u4e9b\u201c\u539f\u59cb\u201d\u3002\u8fd9\u79cd\u201c\u539f\u59cb\u201d\u4e0e\u9ad8\u5ea6\u53d1\u8fbe\u7684\u73b0\u4ee3\u6587\u660e\u7684\u9c9c\u660e\u5bf9\u6bd4\u662f\u6700\u6709\u8da3\u7684\u90e8\u5206\u3002\u5728ANU\u7684\u6821\u56ed\u91cc\uff0c\u4f60\u53ef\u4ee5\u95fb\u5230\u82b1\u9999\uff0c\u6b23\u8d4f\u4ece\u6839\u90e8\u5c31\u6563\u53d1\u679d\u8513\u7684\u9020\u578b\uff0c\u770b\u5230\u6ee1\u5929\u7e41\u661f\uff0c\u542c\u5154\u5988\u5988\u8bb2\u6545\u4e8b\uff08\u5927\u591a\u6570\u65f6\u95f4\u5728\u5403\u4e1c\u897f\uff09\uff0c\u60f3\u8c61\u7740\u7fa4\u9e1f\u4e89\u9e23\u5e26\u6765\u7684\u5bf9\u672a\u77e5\u7684\u65e0\u9650\u7684\u597d\u5947\u4e0e\u5fe7\u60e7\u3002 \u6682\u65f6\u63d2\u5165\u4e00\u6bb5\u5bf9\u5efa\u7b51\u7684\u63cf\u8ff0\u3002\u542c\u859b\u534e\u514b\u8001\u5e08\u8bb2\uff08\u6b64\u5904\u4e3a\u610f\u4f1a\uff09\uff0c\u4e2d\u56fd\u7684\u57ce\u5e02\u662f\u6781\u5ea6\u7f3a\u4e4f\u7f8e\u611f\u7684\uff0c\u697c\u623f\u7684\u5ba1\u7f8e\u4ef7\u503c\u5df2\u88ab\u964d\u5230\u6700\u4f4e\uff0c\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u201c\u5343\u57ce\u4e00\u9762\u201d\u3002\u540e\u6765\u6211\u81ea\u5df1\u5728\u540e\u6d77\u6e38\u73a9\u65f6\uff0c\u77ac\u95f4\u5bf9\u4ed6\u7684\u89c2\u70b9\u6709\u4e9b\u66f4\u6df1\u5165\u7684\u8ba4\u8bc6\u4e86\u3002\u4e00\u4e2a\u57ce\u5e02\u662f\u4ec0\u4e48\u6837\u7684\uff0c\u770b\u6765\u8981\u5148\u628a\u4e00\u4e9b\u4e11\u964b\u7684\u3001\u65e0\u804a\u7684\u3001\u76f8\u540c\u7684\u697c\u5b87\u62c6\u6389\uff0c\u770b\u770b\u8fd8\u5269\u4e0b\u4ec0\u4e48\uff0c\u90a3\u4fbf\u662f\u8fd9\u4e2a\u57ce\u5e02\u4e86\u3002\u8981\u62c6\u5317\u7406\u5de5\uff0c\u90a3\u5317\u7406\u5de5\u4fbf\u4ec0\u4e48\u4e5f\u4e0d\u5269\u4e86\uff0c\u5317\u5916\u7684\u56fe\u4e66\u9986\u662f\u4e0d\u820d\u5f97\u62c6\u6389\u7684\uff0c\u5b83\u7684\u5916\u5899\u5145\u5206\u4f53\u73b0\u4e86\u5b83\u7684\u7f8e\u611f\uff1b\u5317\u4eac\u4e94\u73af\u516d\u73af\uff0c\u5927\u90e8\u5206\u4e5f\u53ef\u62c6\u6389\uff0c\u4e09\u56db\u73af\u53ef\u5269\u4e0b\u4e00\u4e9b\u73b0\u4ee3\u5efa\u7b51\uff0c\u5185\u57ce\u91cc\u9762\uff0c\u5927\u90e8\u5206\u7684\u6c11\u5c45\u3001\u5bab\u6bbf\u90fd\u53ef\u4ee5\u4fdd\u7559\u3002\u6211\u773c\u4e2d\u7684\u5317\u4eac\u4fbf\u662f\u8fd9\u6837\u7684\u6e05\u6670\u4e86\uff0c\u524d\u95e8\u81f3\u5929\u5b89\u95e8\uff0c\u7e41\u534e\u4e8e\u4e16\uff0c\u5a01\u4e25\u5373\u81f3\uff0c\u6545\u5bab\u4e0e\u666f\u5c71\u3001\u4ec0\u5239\u6d77\u3001\u540e\u6d77\u4fbf\u662f\u5b98\u4e0e\u6c11\u7684\u3001\u6b63\u895f\u5371\u5750\u4e0e\u60ec\u610f\u7684\u5bf9\u6bd4\u3002\u5317\u4eac\u5c31\u662f\u4e00\u4e2a\uff1a\u5a01\u800c\u6709\u95f2\uff0c\u73e0\u5149\u5b9d\u6c14\u53c8\u60a0\u5f97\u81ea\u7136\u7684\u5730\u65b9\u3002 \u56de\u5230\u582a\u57f9\u62c9\uff0c\u6211\u4eec\u6cbf\u7740\u4e61\u6751\u5c0f\u8def\u6765\u4f53\u4f1a\u4e00\u4e0b\u5979\u7684\u201c\u539f\u59cb\u201d\u3002\u79bb\u5f00\u5bb6\u4e61\u591a\u5e74\uff0c\u6211\u5df2\u7ecf\u592a\u4e45\u672a\u89c1\u5230\u6beb\u65e0\u4fee\u847a\u7684\u201c\u4e61\u95f4\u5c0f\u8def\u201d\u4e86\uff0c\u8fd9\u79cd\u201c\u5e7d\u5f84\u201d\u5728\u6211\u5bb6\u662f\u6709\u7684\u3002\u8fd9\u91cc\u7684\u5c0f\u8def\u4e00\u822c\u6cbf\u6cb3\u624d\u6709\u3002\u662f\u201c\u8d70\u7684\u4eba\u591a\u4e86\u201d\u8e29\u51fa\u7684\u5c0f\u8def\uff0c\u662f\u4e0d\u5e73\u6574\u7684\u3001\u8513\u8349\u4e1b\u751f\u7684\u5c0f\u8def\u3002\u201c\u4e94\u4e5d\u516d\u4e5d\uff0c\u6cbf\u6cb3\u770b\u67f3\u201d\u867d\u5199\u521d\u6625\uff0c\u7528\u5230\u8fd9\u91cc\u4ea6\u6070\u5982\u5176\u5206\u3002\u53ea\u6709\u5728\u6cb3\u8fb9\uff08\u83ab\u6717\u683c\u6d1b\u6cb3\uff09\u624d\u6709\u67f3\u6811\u3002\u8fdc\u671b\u5782\u67f3\uff0c\u679c\u5982\u65b0\u5a18\u3002\u8d70\u5230\u4e00\u5904\uff0c\u873f\u8712\u6d41\u8f6c\uff0c\u5f69\u9547\u7ae5\u8bdd\uff0c\u6eaa\u6d41\u3001\u7eff\u6811\u3001\u884c\u4eba\u5728\u4e00\u77ac\u95f4\u8fbe\u5230\u548c\u8c10\uff0c\u6b63\u662f\u201c\u5f2f\u5f2f\u7684\u6d41\u6c34\u554a\uff0c\u84dd\u84dd\u7684\u5929\uff1b\u7eff\u6cb9\u6cb9\u7684\u8349\u5730\u554a\uff0c\u9752\u9752\u7684\u5c71\u201d\u3002\u6cb3\u6d41\u873f\u8712\uff0c\u5c31\u8981\u8fc7\u6865\u3002\u6865\u4ea6\u662f\u4e0d\u53ef\u7f3a\u5c11\u7684\u5143\u7d20\uff0c\u201c\u5c0f\u6865\u6d41\u6c34\u4eba\u5bb6\u201d\uff0c\u8fd9\u4e9b\u603b\u662f\u5728\u4e00\u8d77\u7684\uff0c\u8fd9\u6fb3\u6d32\u4eba\u7684\u5ba1\u7f8e\u4e0e\u4e2d\u56fd\u4eba\u4e5f\u6ca1\u6709\u4ec0\u4e48\u4e0d\u540c\u554a\u3002\u6cbf\u6cb3\u53f3\u5cb8\u5411\u5357\u8d70\uff0c\u8fc7\u4e00\u7247\u6797\u5730\u4fbf\u4f3c\u6ca1\u6709\u8def\u4e86\u3002\u6211\u5728\u6797\u4e2d\uff0c\u7b2c\u4e00\u6b21\u770b\u89c1\u4e86\u58c1\u864e\uff1b\u6211\u5728\u8fd9\u6797\u4e2d\uff0c\u4e5f\u770b\u5230\u4e86\u201c\u6e14\u6a35\u201d\u4e4b\u4e8b\u3002\u6709\u4e9b\u7f81\u7eca\u7684\u5c0f\u8def\uff0c\u5145\u6ee1\u4e86\u9677\u9631\u4e0e\u60ca\u5947\uff08\u6b8b\u679d\u4e4b\u4e0b\uff0c\u4e2d\u7a7a\u4e5f\uff0c\u730e\u4eba\u6280\uff09\u3002\u7ee7\u7eed\u5411\u5357\u63a2\u53bb\uff08\u56e0\u6211\u4eec\u770b\u5230\u8fdc\u5904\u7684\u9ad8\u67b6\uff09\uff0c\u679c\u7136\u662f\u201c\u5c71\u91cd\u6c34\u590d\u7591\u65e0\u8def\uff0c\u67f3\u6697\u82b1\u660e\u53c8\u4e00\u6751\u201d\u3002\u6211\u4eec\u53d1\u73b0\u4e86\u8d70\u51fa\u6797\u5730\u524d\u5f80\u516c\u8def\u7684\u6377\u5f84\uff0c\u4fbf\u8e0f\u4e86\u4e0a\u53bb\u3002\u8fc7\u4e86\u9a6c\u8def\uff0c\u6765\u5230\u9ad8\u67b6\u6865\u4e0b\u3002\u6709\u4eba\u51b2\u4e0a\u9ad8\u67b6\u6865\u7684\u9661\u5761\uff0c\u60f3\u4e00\u7779\u683c\u91cc\u82ac\u6e56\u7684\u9762\u5bb9\uff0c\u5c31\u50cf\u662f\u770b\u5362\u820d\u90a3\u5927\u4f5b\u65f6\u5019\u7684\u90a3\u79cd\u610f\u5883\uff0c\u6cbf\u9636\u800c\u4e0a\uff0c\u5362\u820d\u90a3\u4e00\u70b9\u4e00\u70b9\u5730\u51fa\u73b0\uff0c\u90a3\u89c6\u89c9\u7684\u51b2\u51fb\u548c\u5fc3\u7406\u7684\u51b2\u51fb\u662f\u6781\u5176\u5f3a\u70c8\u7684\u3002\u662f\u201c\u795e\u5723\u201d\u4e0e\u201c\u60ca\u559c\u7684\u7ed3\u5408\u201d\uff0c\u662f\u201c\u6cbf\u9636\u800c\u4e0a\u201d\u548c\u201c\u4ece\u4e0a\u81f3\u4e0b\u6d6e\u73b0\u201d\u7684\u76f8\u6620\u6210\u8da3\u3002\u672c\u60f3\uff0c\u683c\u91cc\u82ac\u6e56\u7684\u8fdc\u895f\u8981\u65e9\u51fa\u73b0\uff0c\u7d27\u63a5\u7740\u662f\u5982\u5c71\u7684\u9f3b\u5b50\uff0c\u518d\u5c31\u662f\u660e\u955c\u822c\u7684\u773c\u7738\u2026\u2026\u5b81\u9759\u81f4\u8fdc\uff0c\u5fc3\u65f7\u795e\u6021\u3002\u54ce\u54ce\u54ce\uff0c\u53f9\u53f9\u53f9\uff01\u8fd9\u683c\u91cc\u82ac\u6e56\u662f\u4e2a\u6781\u5bb3\u7f9e\u7684\u7f8e\u4eba\uff0c\u8ba9\u4e00\u6392\u6392\u7684\u201c\u68a7\u6850\u201d\uff08\u6216\u8bb8\u662f\u68a7\u6850\uff09\u548c\u5782\u67f3\u505a\u4e86\u73e0\u5e18\uff0c\u786c\u8981\u60f9\u4f60\u63a5\u8fd1\uff0c\u4eb2\u81ea\u5377\u5e18\u624d\u6ee1\u8db3\u5462\uff01 \u4e09 # \u6cbf\u7740\u6cb3\u8fb9\u5c0f\u8def\u5411\u4e1c\u884c\uff0c\u8fd9\u662f\u4e2a10\u516c\u91cc\u7684\u81ea\u884c\u8f66\u8d5b\u9053\uff0c\u4e5f\u6709\u4eba\u5728\u8dd1\u6b65\uff0c\u4ea6\u6709\u4e9b\u7f8e\u4e3d\u7684\u8bf4\u4e0d\u51fa\u540d\u5b57\u7684\u9e1f\u548c\u6210\u7a9d\u7684\u5154\u5b50\u3002\u8fd9\u91cc\u53ef\u4ee5\u7ed9\u4e88\u4e00\u5207\u5bf9\u6e56\u5149\u5c71\u8272\u7684\u524d\u666f\u7684\u60f3\u8c61\uff0c\u6811\u6797\u9634\u7ff3\uff0c\u660e\u6697\u76f8\u95f4\uff0c\u6e56\u98ce\u5148\u81f3\uff0c\u7fe0\u9e1f\u683e\u9e23\u2026\u2026\u771f\u613f\u8eba\u4e0b\uff0c\u7528\u808c\u80a4\u53bb\u542c\uff0c\u7528\u773c\u775b\u53bb\u95fb\uff0c\u7528\u9f3b\u5b50\u53bb\u770b\uff0c\u7528\u5fc3\u53bb\u7545\u60f3\uff0c\u7528\u8111\u53bb\u4f53\u4f1a\u751f\u547d\u7684\u5f8b\u52a8\u3002 \u6765\u5230\u4e00\u7247\u5c0f\u9614\u5730\uff0c\u987a\u7740\u655e\u53e3\u8fdc\u773a\uff0c\u5fc3\u662f\u6026\u6026\u76f4\u8df3\uff0c\u811a\u662f\u4e0d\u7531\u81ea\u4e3b\uff0c\u8fd9\u662f\u4ec0\u4e48\u611f\u89c9\u554a\uff01\u8fd9\u662f\u4e00\u89c1\u949f\u60c5\u554a\uff01\u8fd9\u6e56\u5149\u5c71\u8272\uff0c\u8be5\u600e\u4e48\u5f62\u5bb9\uff1f\u662f\u201c\u843d\u971e\u4e0e\u5b64\u9e5c\u9f50\u98de\uff0c\u79cb\u6c34\u5171\u957f\u5929\u4e00\u8272\u201d\u4e48\uff1f\u843d\u971e\u4ea6\u5982\u683c\u91cc\u82ac\u6e56\u4e00\u822c\u7f9e\u6da9\uff0c\u8499\u4e86\u7eb1\uff0c\u8fdc\u8fdc\u5f97\u8eb2\u5728\u5c71\u540e\u9762\uff0c\u9732\u51fa\u4e00\u70b9\u7aef\u502a\uff0c\u98de\u9e1f\u7fe9\u7fe9\uff0c\u8f7b\u76c8\u52a8\u4eba\uff1b\u786e\u662f\u201c\u6c34\u5171\u957f\u5929\u4e00\u8272\u201d\u7684\uff0c\u53ea\u4e0d\u8fc7\uff0c\u73b0\u5728\u662f\u6fb3\u6d32\u76848\u6708\uff0c\u8bf4\u79cb\u6709\u4e9b\u65e9\u4e86\u3002\u662f\u201c\u534a\u4ea9\u65b9\u5858\u4e00\u9274\u5f00\uff0c\u5929\u5149\u4e91\u5f71\u5171\u5f98\u5f8a\u201d\u4e48\uff1f\u8fd9\u6e56\u7684\u5927\u5c0f\u771f\u662f\u6070\u5230\u597d\u5904\uff0c\u6211\u4eec\u5927\u6982\u5728\u6e56\u5317\u4e2d\u90e8\u504f\u897f\uff0c\u6e56\u6c34\u4e00\u6620\u773c\u5e95\u4e14\u9752\u5c71\u7686\u5982\u542b\u82de\u70b9\u7f00\u6216\u8fde\u7f00\u5728\u6e56\u7684\u4e09\u9762\uff0c\u5c31\u50cf\u662f\u660e\u955c\u7684\u82b1\u8fb9\uff0c\u4f46\u5374\u6709\u65e0\u9650\u7684\u751f\u673a\uff1b\u6070\u5f53\u7684\u5e03\u5c40\u8ba9\u4f60\u60c5\u4e0d\u81ea\u7981\u5730\u60f3\u62e5\u62b1\u5979\uff0c\u56e0\u4e3a\u5728\u5979\u9762\u524d\uff0c\u4eba\u4f3c\u4e4e\u6709\u8db3\u591f\u7684\u4f38\u5c55\u529b\u4e86\uff1b\u201c\u5929\u5149\u4e91\u5f71\u201d\u53ea\u5360\u4e91\u5f71\uff0c\u201c\u5929\u5149\u4e91\u5f71\u201d\u5199\u7684\u662f\u84dd\u5929\u767d\u4e91\uff0c\u800c\u4e14\u662f\u6210\u6735\u7684\u7a00\u758f\u7684\u767d\u4e91\uff0c\u5012\u6620\u6c34\u4e2d\uff0c\u4efb\u7531\u7fa4\u9e2d\u63a8\u5f00\u6e56\u9762\u3002\u508d\u665a\u4ee5\u81f4\uff0c\u4e91\u6709\u4e9b\u9634\uff0c\u6574\u4f53\u8272\u8c03\u504f\u6697\uff0c\u4e91\u5f71\u5145\u6ee1\u6c34\u9762\uff0c\u4ece\u4e2d\u53ef\u4ee5\u770b\u5230\u6c34\u58a8\u753b\uff0c\u662f\u6d53\u6de1\u3001\u6392\u5e03\u7684\u827a\u672f\u3002\u6e56\u98ce\u6251\u9762\uff0c\u7a7a\u6c14\u6e7f\u6da6\uff0c\u8fd9\u9634\u4e91\u5e26\u6765\u7684\u4e00\u70b9\u513f\u4e5f\u4e0d\u662f\u538b\u6291\uff0c\u800c\u662f\u8ba9\u4f60\u6781\u5c3d\u5730\u8212\u5c55\uff0c\u8ba9\u4f60\u5fc3\u8fdc\u610f\u8fc1\uff0c\u7ed9\u4f60\u65e0\u9650\u7684\u60ec\u610f\u4e0e\u4eab\u53d7\u3002\u843d\u65e5\u5c3d\u4e8e\u5c71\u524d\uff0c\u4fbf\u662f\u201c\u534a\u6c5f\u745f\u745f\u534a\u6c5f\u7ea2\u201d\uff0c\u56e0\u6765\u7684\u7a0d\u665a\uff0c\u201c\u4e00\u9053\u6b8b\u9633\u201d\u4e0d\u590d\u518d\u73b0\u4e86\u3002\u6ca1\u6709\u9057\u61be\uff0c\u51ed\u4ec0\u4e48\u6000\u5ff5\uff1f\u6211\u51b3\u5b9a\u8981\u8d70\uff0c\u8ba9\u5979\u6210\u4e3a\u8bb0\u5fc6\uff0c\u8ba9\u6211\u6c38\u4e45\u7684\u56de\u5473\u5427\u3002 \u56db # \u7ee7\u5411\u4e1c\u884c\uff0c\u6298\u5de6\u5411\u5317\u7531\u8fdb\u5165\u4e86ANU\u7684\u6821\u56ed\uff0c\u73b0\u5728\u6211\u4eec\u5728\u6cb3\u7684\u53e6\u4e00\u5cb8\u3002\u6821\u56ed\u5bc2\u9759\uff0c\u8def\u9762\u8d77\u4f0f\uff0c\u6211\u4eec\u8d39\u4e86\u4e9b\u529f\u592b\u624d\u56de\u5230\u4f4f\u5904\uff08Bruce Hall\uff09\u3002 \u51e0\u65e5\u4e4b\u884c\uff0c\u9971\u7779\u98ce\u5149\uff0c\u5fc3\u7eea\u4e07\u5343\uff0c\u4f5c\u6587\u7559\u5ff5\u3002","title":"ANU\u6691\u671f\u5b66\u6821-\u65e0\u9898"},{"location":"posts/2018-01-23-ANU%E6%9A%91%E6%9C%9F%E5%AD%A6%E6%A0%A1-%E6%97%A0%E9%A2%98/#anu-","text":"","title":"ANU\u6691\u671f\u5b66\u6821-\u65e0\u9898"},{"location":"posts/2018-01-23-ANU%E6%9A%91%E6%9C%9F%E5%AD%A6%E6%A0%A1-%E6%97%A0%E9%A2%98/#_1","text":"\u73b0\u4ee3\u5316\u7684\u57ce\u5e02\u3001\u5bf9\u81ea\u7136\u7684\u8fc7\u5ea6\u7834\u574f\uff0c\u8ba9\u4e2d\u56fd\u7684\u5e74\u8f7b\u4e00\u4ee3\u96be\u4ee5\u4f53\u4f1a\u5230\u4e00\u4e9b\u7c7b\u4f3c\u4e8e\u201c\u8349\u957f\u83ba\u98de\u201d\u3001\u201c\u843d\u971e\u5b64\u9e6d\u201d\u7684\u666f\u81f4\u4e86\u3002\u5982\u679c\u8fd9\u4e2a\u7ed3\u8bba\u4e0d\u80fd\u666e\u904d\u6210\u7acb\uff0c\u5bf9\u6211\u81ea\u5df1\u603b\u662f\u6210\u7acb\u7684\u3002 \u9ed1\u571f\u5730\u4e0a\u7565\u6709\u4e9b\u5355\u8c03\u4e86\uff0c\u4e0d\u8fc7\u5bb6\u4e61\u4ea6\u6709\u4e9b\u666f\u81f4\uff0c\u5c31\u6bd4\u5982\u7ed3\u70c8\u6cb3\u6cbf\u5cb8\u7684\u6e7f\u5730\uff0c\u5916\u52a0\u4f4e\u77ee\u7684\u704c\u6728\uff0c\u5c42\u6b21\u9519\u843d\u7684\uff0c\u4e5f\u6709\u4e9b\u5982\u753b\u4e4b\u666f\u3002\u6211\u662f\u89c1\u8fc7\u9e70\u7684\uff1b\u8fd8\u6709\u4e9b\u8da3\u5473\u5341\u8db3\u7684\u67ab\u53f6\uff0c\u6211\u603b\u6311\u4e86\u4e9b\u9001\u7ed9\u559c\u6b22\u7684\u4eba\u3002 \u4ece\u5bb6\u51fa\u6765\u4e0a\u5b66\u4e4b\u540e\uff0c\u5c31\u53d8\u5f97\u66f4\u52a0\u5355\u8c03\u3002\u4e1c\u5317\u7684\u5c71\u3001\u516c\u56ed\u5927\u540c\u5c0f\u5f02\uff0c\u6587\u5316\u7684\u79ef\u6dc0\u751a\u5c11\u3002\u6765\u5230\u5317\u4eac\uff0c\u4e5f\u6ca1\u591a\u4f53\u4f1a\u5230\u6587\u5316\u53e4\u90fd\u3001\u540d\u57ce\u7684\u8ff7\u9189\u4e4b\u610f\u3002\u5f53\u7136\u8fd9\u4e9b\u5931\u610f\u591a\u534a\u662f\u81ea\u5df1\u9020\u6210\u7684\uff0c\u73b0\u5728\u89c9\u609f\uff0c\u9ad8\u4e2d\u3001\u5927\u5b66\u6ca1\u6709\u610f\u8bc6\u53bb\u611f\u53d7\uff0c\u624d\u9020\u6210\u4e86\u5bf9\u98ce\u5149\u548c\u53e4\u57ce\u7684\u5931\u671b\u3002 \u4e2d\u56fd\u4eba\u4e00\u76f4\uff0c\u5728\u8fc7\u53bb\u7684\u51e0\u5343\u5e74\u4e2d\uff0c\u90fd\u662f\u8ddf\u81ea\u7136\u751f\u6d3b\u5728\u4e00\u8d77\u7684\u3002\u6210\u201c\u548c\u5408\u201d\u4e4b\u5883\uff0c\u662f\u6211\u4eec\u4e00\u8d2f\u7684\u3001\u6700\u9ad8\u7684\u8ffd\u6c42\u3002\u73b0\u4ee3\u5de5\u5177\u8bbe\u65bd\u5bf9\u81ea\u7136\u7684\u5165\u4fb5\u4e0e\u7834\u574f\u5df2\u7ecf\u9020\u6210\u4e86\u4e00\u79cd\u4eba\u4e0e\u81ea\u7136\u7684\u9694\u79bb\uff1b\u5728\u6063\u610f\u82b3\u534e\u7684\u5e74\u9f84\uff0c\u53bb\u65e0\u5fc3\u611f\u53d7\u8fd9\u5468\u906d\u82b1\u8349\u866b\u9c7c\uff0c\u5b9e\u5728\u662f\u6709\u4e9b\u53ef\u7b11\u3002\u4f46\u8fd9\u4f3c\u4e4e\u662f\u5fc5\u7136\u7684\uff0c\u91ce\u86ee\u7684\u53d1\u5c55\u3001\u7e41\u91cd\u7684\u5b66\u4e1a\u548c\u7ecf\u6d4e\u538b\u529b\u2026\u2026\u4eba\u4e0e\u81ea\u7136\u7684\u548c\u5408\u6015\u53ea\u80fd\u51fa\u73b0\u5728\u201c\u4eba\u95f2\u6842\u82b1\u843d\uff0c\u591c\u9759\u6625\u5c71\u7a7a\u201d\u7684\u8bd7\u53e5\u4e2d\u4e86\u3002","title":"\u4e00"},{"location":"posts/2018-01-23-ANU%E6%9A%91%E6%9C%9F%E5%AD%A6%E6%A0%A1-%E6%97%A0%E9%A2%98/#_2","text":"\u582a\u57f9\u62c9\u5374\u662f\u4e0d\u540c\u7684\u3002 \u6211\u5728\u60f3\uff0c\u6b27\u7f8e\u7684\u4e00\u4e9b\u5730\u65b9\u662f\u4e0d\u662f\u4e0e\u582a\u57f9\u62c9\u7c7b\u4f3c\uff0c\u5bf9\u81ea\u7136\u7684\u5e72\u6270\u51e0\u8fd1\u4e3a\u96f6\uff0c\u751a\u81f3\u6709\u4e9b\u201c\u539f\u59cb\u201d\u3002\u8fd9\u79cd\u201c\u539f\u59cb\u201d\u4e0e\u9ad8\u5ea6\u53d1\u8fbe\u7684\u73b0\u4ee3\u6587\u660e\u7684\u9c9c\u660e\u5bf9\u6bd4\u662f\u6700\u6709\u8da3\u7684\u90e8\u5206\u3002\u5728ANU\u7684\u6821\u56ed\u91cc\uff0c\u4f60\u53ef\u4ee5\u95fb\u5230\u82b1\u9999\uff0c\u6b23\u8d4f\u4ece\u6839\u90e8\u5c31\u6563\u53d1\u679d\u8513\u7684\u9020\u578b\uff0c\u770b\u5230\u6ee1\u5929\u7e41\u661f\uff0c\u542c\u5154\u5988\u5988\u8bb2\u6545\u4e8b\uff08\u5927\u591a\u6570\u65f6\u95f4\u5728\u5403\u4e1c\u897f\uff09\uff0c\u60f3\u8c61\u7740\u7fa4\u9e1f\u4e89\u9e23\u5e26\u6765\u7684\u5bf9\u672a\u77e5\u7684\u65e0\u9650\u7684\u597d\u5947\u4e0e\u5fe7\u60e7\u3002 \u6682\u65f6\u63d2\u5165\u4e00\u6bb5\u5bf9\u5efa\u7b51\u7684\u63cf\u8ff0\u3002\u542c\u859b\u534e\u514b\u8001\u5e08\u8bb2\uff08\u6b64\u5904\u4e3a\u610f\u4f1a\uff09\uff0c\u4e2d\u56fd\u7684\u57ce\u5e02\u662f\u6781\u5ea6\u7f3a\u4e4f\u7f8e\u611f\u7684\uff0c\u697c\u623f\u7684\u5ba1\u7f8e\u4ef7\u503c\u5df2\u88ab\u964d\u5230\u6700\u4f4e\uff0c\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u201c\u5343\u57ce\u4e00\u9762\u201d\u3002\u540e\u6765\u6211\u81ea\u5df1\u5728\u540e\u6d77\u6e38\u73a9\u65f6\uff0c\u77ac\u95f4\u5bf9\u4ed6\u7684\u89c2\u70b9\u6709\u4e9b\u66f4\u6df1\u5165\u7684\u8ba4\u8bc6\u4e86\u3002\u4e00\u4e2a\u57ce\u5e02\u662f\u4ec0\u4e48\u6837\u7684\uff0c\u770b\u6765\u8981\u5148\u628a\u4e00\u4e9b\u4e11\u964b\u7684\u3001\u65e0\u804a\u7684\u3001\u76f8\u540c\u7684\u697c\u5b87\u62c6\u6389\uff0c\u770b\u770b\u8fd8\u5269\u4e0b\u4ec0\u4e48\uff0c\u90a3\u4fbf\u662f\u8fd9\u4e2a\u57ce\u5e02\u4e86\u3002\u8981\u62c6\u5317\u7406\u5de5\uff0c\u90a3\u5317\u7406\u5de5\u4fbf\u4ec0\u4e48\u4e5f\u4e0d\u5269\u4e86\uff0c\u5317\u5916\u7684\u56fe\u4e66\u9986\u662f\u4e0d\u820d\u5f97\u62c6\u6389\u7684\uff0c\u5b83\u7684\u5916\u5899\u5145\u5206\u4f53\u73b0\u4e86\u5b83\u7684\u7f8e\u611f\uff1b\u5317\u4eac\u4e94\u73af\u516d\u73af\uff0c\u5927\u90e8\u5206\u4e5f\u53ef\u62c6\u6389\uff0c\u4e09\u56db\u73af\u53ef\u5269\u4e0b\u4e00\u4e9b\u73b0\u4ee3\u5efa\u7b51\uff0c\u5185\u57ce\u91cc\u9762\uff0c\u5927\u90e8\u5206\u7684\u6c11\u5c45\u3001\u5bab\u6bbf\u90fd\u53ef\u4ee5\u4fdd\u7559\u3002\u6211\u773c\u4e2d\u7684\u5317\u4eac\u4fbf\u662f\u8fd9\u6837\u7684\u6e05\u6670\u4e86\uff0c\u524d\u95e8\u81f3\u5929\u5b89\u95e8\uff0c\u7e41\u534e\u4e8e\u4e16\uff0c\u5a01\u4e25\u5373\u81f3\uff0c\u6545\u5bab\u4e0e\u666f\u5c71\u3001\u4ec0\u5239\u6d77\u3001\u540e\u6d77\u4fbf\u662f\u5b98\u4e0e\u6c11\u7684\u3001\u6b63\u895f\u5371\u5750\u4e0e\u60ec\u610f\u7684\u5bf9\u6bd4\u3002\u5317\u4eac\u5c31\u662f\u4e00\u4e2a\uff1a\u5a01\u800c\u6709\u95f2\uff0c\u73e0\u5149\u5b9d\u6c14\u53c8\u60a0\u5f97\u81ea\u7136\u7684\u5730\u65b9\u3002 \u56de\u5230\u582a\u57f9\u62c9\uff0c\u6211\u4eec\u6cbf\u7740\u4e61\u6751\u5c0f\u8def\u6765\u4f53\u4f1a\u4e00\u4e0b\u5979\u7684\u201c\u539f\u59cb\u201d\u3002\u79bb\u5f00\u5bb6\u4e61\u591a\u5e74\uff0c\u6211\u5df2\u7ecf\u592a\u4e45\u672a\u89c1\u5230\u6beb\u65e0\u4fee\u847a\u7684\u201c\u4e61\u95f4\u5c0f\u8def\u201d\u4e86\uff0c\u8fd9\u79cd\u201c\u5e7d\u5f84\u201d\u5728\u6211\u5bb6\u662f\u6709\u7684\u3002\u8fd9\u91cc\u7684\u5c0f\u8def\u4e00\u822c\u6cbf\u6cb3\u624d\u6709\u3002\u662f\u201c\u8d70\u7684\u4eba\u591a\u4e86\u201d\u8e29\u51fa\u7684\u5c0f\u8def\uff0c\u662f\u4e0d\u5e73\u6574\u7684\u3001\u8513\u8349\u4e1b\u751f\u7684\u5c0f\u8def\u3002\u201c\u4e94\u4e5d\u516d\u4e5d\uff0c\u6cbf\u6cb3\u770b\u67f3\u201d\u867d\u5199\u521d\u6625\uff0c\u7528\u5230\u8fd9\u91cc\u4ea6\u6070\u5982\u5176\u5206\u3002\u53ea\u6709\u5728\u6cb3\u8fb9\uff08\u83ab\u6717\u683c\u6d1b\u6cb3\uff09\u624d\u6709\u67f3\u6811\u3002\u8fdc\u671b\u5782\u67f3\uff0c\u679c\u5982\u65b0\u5a18\u3002\u8d70\u5230\u4e00\u5904\uff0c\u873f\u8712\u6d41\u8f6c\uff0c\u5f69\u9547\u7ae5\u8bdd\uff0c\u6eaa\u6d41\u3001\u7eff\u6811\u3001\u884c\u4eba\u5728\u4e00\u77ac\u95f4\u8fbe\u5230\u548c\u8c10\uff0c\u6b63\u662f\u201c\u5f2f\u5f2f\u7684\u6d41\u6c34\u554a\uff0c\u84dd\u84dd\u7684\u5929\uff1b\u7eff\u6cb9\u6cb9\u7684\u8349\u5730\u554a\uff0c\u9752\u9752\u7684\u5c71\u201d\u3002\u6cb3\u6d41\u873f\u8712\uff0c\u5c31\u8981\u8fc7\u6865\u3002\u6865\u4ea6\u662f\u4e0d\u53ef\u7f3a\u5c11\u7684\u5143\u7d20\uff0c\u201c\u5c0f\u6865\u6d41\u6c34\u4eba\u5bb6\u201d\uff0c\u8fd9\u4e9b\u603b\u662f\u5728\u4e00\u8d77\u7684\uff0c\u8fd9\u6fb3\u6d32\u4eba\u7684\u5ba1\u7f8e\u4e0e\u4e2d\u56fd\u4eba\u4e5f\u6ca1\u6709\u4ec0\u4e48\u4e0d\u540c\u554a\u3002\u6cbf\u6cb3\u53f3\u5cb8\u5411\u5357\u8d70\uff0c\u8fc7\u4e00\u7247\u6797\u5730\u4fbf\u4f3c\u6ca1\u6709\u8def\u4e86\u3002\u6211\u5728\u6797\u4e2d\uff0c\u7b2c\u4e00\u6b21\u770b\u89c1\u4e86\u58c1\u864e\uff1b\u6211\u5728\u8fd9\u6797\u4e2d\uff0c\u4e5f\u770b\u5230\u4e86\u201c\u6e14\u6a35\u201d\u4e4b\u4e8b\u3002\u6709\u4e9b\u7f81\u7eca\u7684\u5c0f\u8def\uff0c\u5145\u6ee1\u4e86\u9677\u9631\u4e0e\u60ca\u5947\uff08\u6b8b\u679d\u4e4b\u4e0b\uff0c\u4e2d\u7a7a\u4e5f\uff0c\u730e\u4eba\u6280\uff09\u3002\u7ee7\u7eed\u5411\u5357\u63a2\u53bb\uff08\u56e0\u6211\u4eec\u770b\u5230\u8fdc\u5904\u7684\u9ad8\u67b6\uff09\uff0c\u679c\u7136\u662f\u201c\u5c71\u91cd\u6c34\u590d\u7591\u65e0\u8def\uff0c\u67f3\u6697\u82b1\u660e\u53c8\u4e00\u6751\u201d\u3002\u6211\u4eec\u53d1\u73b0\u4e86\u8d70\u51fa\u6797\u5730\u524d\u5f80\u516c\u8def\u7684\u6377\u5f84\uff0c\u4fbf\u8e0f\u4e86\u4e0a\u53bb\u3002\u8fc7\u4e86\u9a6c\u8def\uff0c\u6765\u5230\u9ad8\u67b6\u6865\u4e0b\u3002\u6709\u4eba\u51b2\u4e0a\u9ad8\u67b6\u6865\u7684\u9661\u5761\uff0c\u60f3\u4e00\u7779\u683c\u91cc\u82ac\u6e56\u7684\u9762\u5bb9\uff0c\u5c31\u50cf\u662f\u770b\u5362\u820d\u90a3\u5927\u4f5b\u65f6\u5019\u7684\u90a3\u79cd\u610f\u5883\uff0c\u6cbf\u9636\u800c\u4e0a\uff0c\u5362\u820d\u90a3\u4e00\u70b9\u4e00\u70b9\u5730\u51fa\u73b0\uff0c\u90a3\u89c6\u89c9\u7684\u51b2\u51fb\u548c\u5fc3\u7406\u7684\u51b2\u51fb\u662f\u6781\u5176\u5f3a\u70c8\u7684\u3002\u662f\u201c\u795e\u5723\u201d\u4e0e\u201c\u60ca\u559c\u7684\u7ed3\u5408\u201d\uff0c\u662f\u201c\u6cbf\u9636\u800c\u4e0a\u201d\u548c\u201c\u4ece\u4e0a\u81f3\u4e0b\u6d6e\u73b0\u201d\u7684\u76f8\u6620\u6210\u8da3\u3002\u672c\u60f3\uff0c\u683c\u91cc\u82ac\u6e56\u7684\u8fdc\u895f\u8981\u65e9\u51fa\u73b0\uff0c\u7d27\u63a5\u7740\u662f\u5982\u5c71\u7684\u9f3b\u5b50\uff0c\u518d\u5c31\u662f\u660e\u955c\u822c\u7684\u773c\u7738\u2026\u2026\u5b81\u9759\u81f4\u8fdc\uff0c\u5fc3\u65f7\u795e\u6021\u3002\u54ce\u54ce\u54ce\uff0c\u53f9\u53f9\u53f9\uff01\u8fd9\u683c\u91cc\u82ac\u6e56\u662f\u4e2a\u6781\u5bb3\u7f9e\u7684\u7f8e\u4eba\uff0c\u8ba9\u4e00\u6392\u6392\u7684\u201c\u68a7\u6850\u201d\uff08\u6216\u8bb8\u662f\u68a7\u6850\uff09\u548c\u5782\u67f3\u505a\u4e86\u73e0\u5e18\uff0c\u786c\u8981\u60f9\u4f60\u63a5\u8fd1\uff0c\u4eb2\u81ea\u5377\u5e18\u624d\u6ee1\u8db3\u5462\uff01","title":"\u4e8c"},{"location":"posts/2018-01-23-ANU%E6%9A%91%E6%9C%9F%E5%AD%A6%E6%A0%A1-%E6%97%A0%E9%A2%98/#_3","text":"\u6cbf\u7740\u6cb3\u8fb9\u5c0f\u8def\u5411\u4e1c\u884c\uff0c\u8fd9\u662f\u4e2a10\u516c\u91cc\u7684\u81ea\u884c\u8f66\u8d5b\u9053\uff0c\u4e5f\u6709\u4eba\u5728\u8dd1\u6b65\uff0c\u4ea6\u6709\u4e9b\u7f8e\u4e3d\u7684\u8bf4\u4e0d\u51fa\u540d\u5b57\u7684\u9e1f\u548c\u6210\u7a9d\u7684\u5154\u5b50\u3002\u8fd9\u91cc\u53ef\u4ee5\u7ed9\u4e88\u4e00\u5207\u5bf9\u6e56\u5149\u5c71\u8272\u7684\u524d\u666f\u7684\u60f3\u8c61\uff0c\u6811\u6797\u9634\u7ff3\uff0c\u660e\u6697\u76f8\u95f4\uff0c\u6e56\u98ce\u5148\u81f3\uff0c\u7fe0\u9e1f\u683e\u9e23\u2026\u2026\u771f\u613f\u8eba\u4e0b\uff0c\u7528\u808c\u80a4\u53bb\u542c\uff0c\u7528\u773c\u775b\u53bb\u95fb\uff0c\u7528\u9f3b\u5b50\u53bb\u770b\uff0c\u7528\u5fc3\u53bb\u7545\u60f3\uff0c\u7528\u8111\u53bb\u4f53\u4f1a\u751f\u547d\u7684\u5f8b\u52a8\u3002 \u6765\u5230\u4e00\u7247\u5c0f\u9614\u5730\uff0c\u987a\u7740\u655e\u53e3\u8fdc\u773a\uff0c\u5fc3\u662f\u6026\u6026\u76f4\u8df3\uff0c\u811a\u662f\u4e0d\u7531\u81ea\u4e3b\uff0c\u8fd9\u662f\u4ec0\u4e48\u611f\u89c9\u554a\uff01\u8fd9\u662f\u4e00\u89c1\u949f\u60c5\u554a\uff01\u8fd9\u6e56\u5149\u5c71\u8272\uff0c\u8be5\u600e\u4e48\u5f62\u5bb9\uff1f\u662f\u201c\u843d\u971e\u4e0e\u5b64\u9e5c\u9f50\u98de\uff0c\u79cb\u6c34\u5171\u957f\u5929\u4e00\u8272\u201d\u4e48\uff1f\u843d\u971e\u4ea6\u5982\u683c\u91cc\u82ac\u6e56\u4e00\u822c\u7f9e\u6da9\uff0c\u8499\u4e86\u7eb1\uff0c\u8fdc\u8fdc\u5f97\u8eb2\u5728\u5c71\u540e\u9762\uff0c\u9732\u51fa\u4e00\u70b9\u7aef\u502a\uff0c\u98de\u9e1f\u7fe9\u7fe9\uff0c\u8f7b\u76c8\u52a8\u4eba\uff1b\u786e\u662f\u201c\u6c34\u5171\u957f\u5929\u4e00\u8272\u201d\u7684\uff0c\u53ea\u4e0d\u8fc7\uff0c\u73b0\u5728\u662f\u6fb3\u6d32\u76848\u6708\uff0c\u8bf4\u79cb\u6709\u4e9b\u65e9\u4e86\u3002\u662f\u201c\u534a\u4ea9\u65b9\u5858\u4e00\u9274\u5f00\uff0c\u5929\u5149\u4e91\u5f71\u5171\u5f98\u5f8a\u201d\u4e48\uff1f\u8fd9\u6e56\u7684\u5927\u5c0f\u771f\u662f\u6070\u5230\u597d\u5904\uff0c\u6211\u4eec\u5927\u6982\u5728\u6e56\u5317\u4e2d\u90e8\u504f\u897f\uff0c\u6e56\u6c34\u4e00\u6620\u773c\u5e95\u4e14\u9752\u5c71\u7686\u5982\u542b\u82de\u70b9\u7f00\u6216\u8fde\u7f00\u5728\u6e56\u7684\u4e09\u9762\uff0c\u5c31\u50cf\u662f\u660e\u955c\u7684\u82b1\u8fb9\uff0c\u4f46\u5374\u6709\u65e0\u9650\u7684\u751f\u673a\uff1b\u6070\u5f53\u7684\u5e03\u5c40\u8ba9\u4f60\u60c5\u4e0d\u81ea\u7981\u5730\u60f3\u62e5\u62b1\u5979\uff0c\u56e0\u4e3a\u5728\u5979\u9762\u524d\uff0c\u4eba\u4f3c\u4e4e\u6709\u8db3\u591f\u7684\u4f38\u5c55\u529b\u4e86\uff1b\u201c\u5929\u5149\u4e91\u5f71\u201d\u53ea\u5360\u4e91\u5f71\uff0c\u201c\u5929\u5149\u4e91\u5f71\u201d\u5199\u7684\u662f\u84dd\u5929\u767d\u4e91\uff0c\u800c\u4e14\u662f\u6210\u6735\u7684\u7a00\u758f\u7684\u767d\u4e91\uff0c\u5012\u6620\u6c34\u4e2d\uff0c\u4efb\u7531\u7fa4\u9e2d\u63a8\u5f00\u6e56\u9762\u3002\u508d\u665a\u4ee5\u81f4\uff0c\u4e91\u6709\u4e9b\u9634\uff0c\u6574\u4f53\u8272\u8c03\u504f\u6697\uff0c\u4e91\u5f71\u5145\u6ee1\u6c34\u9762\uff0c\u4ece\u4e2d\u53ef\u4ee5\u770b\u5230\u6c34\u58a8\u753b\uff0c\u662f\u6d53\u6de1\u3001\u6392\u5e03\u7684\u827a\u672f\u3002\u6e56\u98ce\u6251\u9762\uff0c\u7a7a\u6c14\u6e7f\u6da6\uff0c\u8fd9\u9634\u4e91\u5e26\u6765\u7684\u4e00\u70b9\u513f\u4e5f\u4e0d\u662f\u538b\u6291\uff0c\u800c\u662f\u8ba9\u4f60\u6781\u5c3d\u5730\u8212\u5c55\uff0c\u8ba9\u4f60\u5fc3\u8fdc\u610f\u8fc1\uff0c\u7ed9\u4f60\u65e0\u9650\u7684\u60ec\u610f\u4e0e\u4eab\u53d7\u3002\u843d\u65e5\u5c3d\u4e8e\u5c71\u524d\uff0c\u4fbf\u662f\u201c\u534a\u6c5f\u745f\u745f\u534a\u6c5f\u7ea2\u201d\uff0c\u56e0\u6765\u7684\u7a0d\u665a\uff0c\u201c\u4e00\u9053\u6b8b\u9633\u201d\u4e0d\u590d\u518d\u73b0\u4e86\u3002\u6ca1\u6709\u9057\u61be\uff0c\u51ed\u4ec0\u4e48\u6000\u5ff5\uff1f\u6211\u51b3\u5b9a\u8981\u8d70\uff0c\u8ba9\u5979\u6210\u4e3a\u8bb0\u5fc6\uff0c\u8ba9\u6211\u6c38\u4e45\u7684\u56de\u5473\u5427\u3002","title":"\u4e09"},{"location":"posts/2018-01-23-ANU%E6%9A%91%E6%9C%9F%E5%AD%A6%E6%A0%A1-%E6%97%A0%E9%A2%98/#_4","text":"\u7ee7\u5411\u4e1c\u884c\uff0c\u6298\u5de6\u5411\u5317\u7531\u8fdb\u5165\u4e86ANU\u7684\u6821\u56ed\uff0c\u73b0\u5728\u6211\u4eec\u5728\u6cb3\u7684\u53e6\u4e00\u5cb8\u3002\u6821\u56ed\u5bc2\u9759\uff0c\u8def\u9762\u8d77\u4f0f\uff0c\u6211\u4eec\u8d39\u4e86\u4e9b\u529f\u592b\u624d\u56de\u5230\u4f4f\u5904\uff08Bruce Hall\uff09\u3002 \u51e0\u65e5\u4e4b\u884c\uff0c\u9971\u7779\u98ce\u5149\uff0c\u5fc3\u7eea\u4e07\u5343\uff0c\u4f5c\u6587\u7559\u5ff5\u3002","title":"\u56db"},{"location":"posts/2018-01-24-ANU%E6%9A%91%E6%9C%9F%E5%AD%A6%E6%A0%A1-%E7%BB%BD%E6%94%BE/","text":"ANU\u6691\u671f\u5b66\u6821-\u7efd\u653e # \u4f4e\u843d\u7684\u65e5\u5b50 \u5728\u79ef\u7d2f\u60c5\u7eea \u7efd\u653e\u4e8e\u7b14\u5c16\u7684 \u662f\u98ce\u666f\u7684\u5fc3\u60c5 \u7eda\u70c2\u8fc7\u540e \u662f\u6ca1\u843d \u662f\u7a7a\u767d \u4e00\u6b21\u6bd4\u4e00\u6b21 \u75db\u82e6 \u4e00\u6b21\u6bd4\u4e00\u6b21 \u6765\u5f97\u5feb \u4e0d\u884c\u8d70\u4e86 \u4e0d\u611f\u77e5\u4e86 \u8ba9\u75db\u82e6\u8fdc\u4e9b\u5427 \u7206\u53d1\u7684\u72c2\u559c\u4e5f\u4e0d\u8981\u4e86 \u65f6\u95f4\u5b9a\u683c\u5427 \u8ba9\u4fb5\u4e0a\u7684\u75db\u505c\u4f4f\u5427 \u5509 \u6211\u4ec0\u4e48\u4e5f\u65e0\u529b\u963b\u6b62","title":"ANU\u6691\u671f\u5b66\u6821-\u7efd\u653e"},{"location":"posts/2018-01-24-ANU%E6%9A%91%E6%9C%9F%E5%AD%A6%E6%A0%A1-%E7%BB%BD%E6%94%BE/#anu-","text":"\u4f4e\u843d\u7684\u65e5\u5b50 \u5728\u79ef\u7d2f\u60c5\u7eea \u7efd\u653e\u4e8e\u7b14\u5c16\u7684 \u662f\u98ce\u666f\u7684\u5fc3\u60c5 \u7eda\u70c2\u8fc7\u540e \u662f\u6ca1\u843d \u662f\u7a7a\u767d \u4e00\u6b21\u6bd4\u4e00\u6b21 \u75db\u82e6 \u4e00\u6b21\u6bd4\u4e00\u6b21 \u6765\u5f97\u5feb \u4e0d\u884c\u8d70\u4e86 \u4e0d\u611f\u77e5\u4e86 \u8ba9\u75db\u82e6\u8fdc\u4e9b\u5427 \u7206\u53d1\u7684\u72c2\u559c\u4e5f\u4e0d\u8981\u4e86 \u65f6\u95f4\u5b9a\u683c\u5427 \u8ba9\u4fb5\u4e0a\u7684\u75db\u505c\u4f4f\u5427 \u5509 \u6211\u4ec0\u4e48\u4e5f\u65e0\u529b\u963b\u6b62","title":"ANU\u6691\u671f\u5b66\u6821-\u7efd\u653e"},{"location":"posts/2018-02-01-ANU%E6%9A%91%E6%9C%9F%E5%AD%A6%E6%A0%A1-%E6%88%91%E7%9A%84%E7%9F%9B%E7%9B%BE/","text":"ANU\u6691\u671f\u5b66\u6821-\u6211\u7684\u77db\u76fe # \u4e00 # \u8bf4\u8d77\u82f1\u8bed\u5b66\u4e60\uff0c\u53ef\u771f\u662f\u4e00\u8a00\u96be\u5c3d\u3002\u5373\u4fbf\u662f\u62a5\u4e86\u8865\u4e60\u73ed\uff0c\u6bcf\u5929\u4e5f\u52aa\u529b\u5730\u5b66\u4e60\uff0c\u8fd8\u662f\u89c9\u5f97\u4e0d\u53ef\u80fd\u628a\u82f1\u8bed\u5b66\u597d\u3002\u8001\u5e08\u6559\u3001\u81ea\u5df1\u5b66\u3001\u82f1\u8bed\u73af\u5883\uff0c\u5982\u679c\u8bf4\u8fd9\u4e09\u70b9\u90fd\u6ee1\u8db3\u5c31\u80fd\u628a\u82f1\u8bed\u5b66\u597d\uff0c\u6015\u6211\u65e9\u5c31\u662f\u82f1\u8bed\u80fd\u624b\u4e86\u3002\u4e8b\u60c5\u5f80\u5f80\u4e0d\u662f\u90a3\u4e48\u7b80\u5355\uff0c\u66f4\u4f55\u51b5\uff0c\u4ece\u6765\u90fd\u6ca1\u6709\u6784\u5efa\u4e00\u4e2a\u82f1\u8bed\u73af\u5883\u3002\u8fd9\u6b21\u5230\u56fd\u5916\u6765\uff0c\u4e5f\u6709\u4e00\u4e9b\u5173\u4e8e\u6784\u5efa\u82f1\u8bed\u73af\u5883\u7684\u60f3\u6cd5\uff0c\u6bd4\u5982\uff0c\u7528\u82f1\u8bed\u601d\u8003\u3001\u5fc3\u91cc\u9ed8\u5ff5\u522b\u4eba\u8bf4\u7684\u8bdd\u3001\u67e5\u770b\u56fd\u5916\u52a8\u7269\u56ed\u7684\u7f51\u7ad9\u2026\u2026\u8fd9\u4e00\u6b21\u51fa\u884c\uff0c\u4e00\u822c\u7684\u4ea4\u6d41\u7528\u5230\u7684\u8bcd\u6c47\u51e0\u4e4e\u6ca1\u6709\u8d85\u8fc7\u81ea\u5df1\u7684\u6c34\u5e73\uff085000\u5de6\u53f3\uff09;\u4f46\u662f\u7a0d\u5fae\u6b63\u5f0f\u4e00\u70b9\u513f\u7684\u670d\u52a1\u4e0e\u6f14\u8bb2\u5c31\u8981\u6d89\u53ca\u66f4\u591a\u7684\u8bcd\u6c47\u4e86\uff0c\u6bd4\u5982\u70b9\u9910\u3001\u53f8\u673a\u5e08\u5085\u5728\u5f00\u8f66\u524d\u3001\u9014\u4e2d\u548c\u7ec8\u70b9\u524d\u7684\u6e29\u99a8\u63d0\u793a\u3002\u5982\u679c\u8981\u60f3\u542c\u61c2\u8fd9\u4e9b\uff0c\u786e\u5b9e\u8981\u8d39\u4e9b\u65f6\u65e5\u3002\u5982\u679c\u628a\u6211\u653e\u5728\u56fd\u5916\uff0c\u6211\u60f3\u6211\u56de\u627e\u4e00\u4e2a\u5916\u56fd\u4eba\u4f7f\u52b2\u513f\u5730\u95ee\uff0c\u8fd9\u4e2a\u4ec0\u4e48\u90a3\u662f\u4ec0\u4e48\uff0c\u6765\u5b66\u4e60\u751f\u8bcd\u548c\u53e5\u5b50\u3002\u6211\u8fd8\u4f1a\u5c3d\u53ef\u80fd\u7684\u9605\u8bfb\u82f1\u6587\u7684\u4ecb\u7ecd\u548c\u80cc\u666f\u77e5\u8bc6\u3002\u6211\u4f1a\u5c3d\u53ef\u80fd\u5730\u63a5\u89e6\u751f\u6d3b\u7684\u6bcf\u4e00\u65b9\u9762\uff0c\u5b66\u4e60\u8bcd\u6c47\u548c\u77ed\u8bed\u3002\u6211\u4f1a\u5c3d\u53ef\u80fd\u7684\u4e0e\u5916\u56fd\u4eba\u4ea4\u6d41\uff0c\u56de\u987e\u548c\u5c55\u671b\uff0c\u518d\u8fdb\u4e00\u6b65\u8ba8\u8bba\u6587\u5316\u3002\u603b\u7ed3\u8d77\u6765\uff0c\u65e0\u975e\u5c31\u662f\u6700\u5927\u9650\u5ea6\u7684\u878d\u5165\u4ed6\u4eec\u3002 \u8865\u5145\u4e00\u4e9b\u4e0eX\u541b\u7684\u4ea4\u6d41\u3002\u201c\u7528\u82f1\u8bed\u601d\u8003\u3001\u5927\u91cf\u7684\u57fa\u7840\u9605\u8bfb\uff08\u8bfe\u7a0b\uff09\u4ee5\u53ca\u5199\u4f5c\u662f\u8f83\u597d\u7684\u5b66\u4e60\u8bed\u8a00\u7684\u8981\u7d20\u201d\u3002 \u4ee5\u4e0a\u7edd\u5bf9\u662f\u8bf4\u7684\u8f7b\u677e\uff0c\u505a\u8d77\u6765\u96be\u3002\u65f6\u95f4\uff0c\u9700\u8981\u65f6\u95f4\u3002\u5982\u679c\u6bcf\u5929\u9700\u89813\u4e2a\u5c0f\u65f6\uff0c\u90a3\u5c31\u5f97\u534a\u5e74\u624d\u521d\u89c1\u7aef\u502a\u3002\u5f88\u663e\u7136\uff0c\u4e0d\u53ef\u80fd\u6bcf\u5929\u6709\u90a3\u4e48\u591a\u7684\u65f6\u95f4\u3002\u5982\u679c\uff0c\u73b0\u5728\u8ba9\u6211\u9009\u62e9\uff0c\u6211\u5927\u6982\u4f1a\u8fdb\u4e00\u6b65\u538b\u7f29\u793e\u4ea4\u4e0e\u751f\u6d3b\u7684\u65f6\u95f4\uff0c\u8ba9\u5de5\u4f5c\u7684\u6bcf\u4e00\u5929\u5c3d\u53ef\u80fd\u9ad8\u6548\u548c\u5145\u5b9e\u3002\u56e0\u4e3a\u6211\u6700\u8fd1\u660e\u767d\u8fc7\u6765\uff0c\u4e0d\u7eaf\u7cb9\u7684\u4f11\u606f\u603b\u662f\u4e00\u70b9\u610f\u4e49\u90fd\u6ca1\u6709\u7684\u3002\u4f60\u6839\u672c\u65e0\u6cd5\u5f97\u5230\u751f\u6d3b\u7684\u52a8\u529b\uff0c\u90a3\u79cd\u4f11\u606f\u7eaf\u7cb9\u662f\u8eab\u4f53\u4e0a\u4f11\u606f\uff0c\u4f46\u7cbe\u795e\u4e0a\u7684\u4e4f\u4e0d\u89e3\uff0c\u4e00\u6837\u6ca1\u6709\u7528\u3002\u5de5\u4f5c\u65f6\u8ba4\u771f\u5de5\u4f5c\u3001\u4eab\u53d7\u5de5\u4f5c\uff0c\u6512\u94b1\u5ea6\u5047\uff0c\u8d70\u8fdc\u4e00\u4e9b\uff0c\u65f6\u95f4\u957f\u4e00\u4e9b\uff08\u81f3\u5c11\u4e00\u5468\uff09\uff0c\u80fd\u5728\u6781\u5927\u653e\u677e\u7684\u540c\u65f6\u83b7\u5f97\u6781\u5927\u7684\u80fd\u91cf\uff0c\u53ef\u4ee5\u652f\u6491\u8f83\u957f\u65f6\u95f4\u7684\u503e\u60c5\u6295\u5165\u3002\u6b63\u5f0f\u6253\u7834\u4e86\u4e4b\u524d\u7684\u5e73\u8861\u4e00\u5207\u7684\u7406\u8bba\uff0c\u83b7\u53d6\u53ef\u4ee5\u51cf\u8f7b\u4e00\u4e9b\u75db\u82e6\u3002 \u7ee7\u7eed\u8bf4\u65f6\u95f4\u3002\u8fd9\u6837\u6211\u53ef\u4ee5\u505a\u4e00\u4e2a\u8f83\u957f\u65f6\u95f4\u7684\u8ba1\u5212\u3002\u4e00\u4e2a\u6708\u751a\u81f3\u51e0\u4e2a\u6708\uff0c\u5de5\u4f5c\u4e2d\u6709\u6210\u679c\u6709\u8fdb\u5c55\u3002\u6fb3\u5927\u5229\u4e9a\u662f\u4e2a\u65c5\u6e38\u7684\u597d\u5730\u65b9\uff08\u8fd9\u53e5\u8bdd\u662f\u4e2a\u4e07\u80fd\u7684\u53e5\u5b50\uff09\u3002\u8fd9\u91cc\u7684\u8282\u594f\u9002\u5408\u65c5\u6e38\u3002\u4e0d\u8981\u5f88\u5927\u7684\u56e2\uff0c\u51e0\u4e2a\u4eba\u4e00\u8d77\uff0c\u8981\u6709\u70ed\u60c5\u7684\u3001\u8981\u6709\u8bd7\u610f\u7684\u3001\u6709\u903b\u8f91\u7684\u3002\u5982\u679c\u8981\u505a\u4e00\u4e9b\u65c5\u6e38\u7684\u8ba1\u5212\uff0c\u5c31\u53ef\u4ee5\u6765\u6fb3\u6d32\u3002\u5de5\u4f5c\u7684\u73af\u5883\u4e5f\u5f88\u91cd\u8981\uff0c\u6700\u597d\u662f\u6709\u4e00\u4e2a\u6bd4\u8f83\u72ec\u7acb\u7684\u7a7a\u95f4\uff0c\u53ef\u4ee5\u662f\u5f00\u653e\u5f0f\u7684\uff0c\u4f46\u8981\u76f8\u5bf9\u4e0d\u88ab\u6253\u6270\u3002\u8fd9\u6837\u7684\u5de5\u4f5c\u6761\u4ef6\u53ef\u4ee5\u8ba9\u4eba\u4fdd\u6301\u826f\u597d\u7684\u5fc3\u60c5\u3001\u79ef\u6781\u7684\u6001\u5ea6\u3002\u5f53\u7136\u56e2\u961f\u4e5f\u5f88\u91cd\u8981\uff0c\u5c24\u5176\u662f\u4e00\u4e2a\u4eba\u7684\u79d1\u7814\u89c2\u5ff5\u521a\u521a\u5efa\u7acb\u7684\u65f6\u5019\u3002\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u662f\u65e0\u6cd5\u6d3b\u5f97\u8fd9\u6837\u7684\u5de5\u4f5c\u6761\u4ef6\u7684\uff0c\u6240\u4ee5\u53ea\u80fd\u968f\u7f18\u4e86\u3002\u5f53\u7136\u66f4\u5e0c\u671b\uff0c\u539f\u5219\u4e0a\u751f\u6d3b\u4e0e\u5de5\u4f5c\u5206\u5f00\u3002\u5de5\u4f5c\u7684\u65f6\u95f4\u53ef\u4ee5\u66f4\u957f\u4e00\u4e9b\uff0c\u7559\u597d\u9700\u8981\u5b66\u4e60\u7684\u65f6\u95f4\uff0c\u5c3d\u53ef\u80fd\u538b\u7f29\u5403\u996d\u7684\u65f6\u95f4\uff08\u5b58\u7591\uff0c\u5916\u56fd\u4eba\u5403\u996d\u65f6\u5019\u804a\u5929\u624d\u662f\u4e3b\u4e1a\uff09\u3002 \u5f53\u7136\uff0c\u6211\u4eec\u7684\u751f\u6d3b\u9700\u8981\u8c03\u5473\u5242\uff0c\u50cf\u4e00\u4e2a\u8bd7\u4eba\u4e00\u6837\u611f\u53d7\u5168\u4e16\u754c\u7684\u65f6\u5019\u96be\u514d\u5931\u53bb\u81ea\u6211\u3002\u800c\u611f\u53d7\u7684\u76ee\u7684\u6070\u6070\u662f\u4e3a\u4e86\u8868\u8fbe\u81ea\u6211\u3002\u8981\u5148\u5931\u53bb\uff08\u4e0a\u4e00\u6b21\u8868\u8fbe\uff09\uff0c\u5728\u9010\u6e10\u627e\u56de\u672c\u771f\u7684\u65f6\u5019\u628a\u4ed6\u4eec\u5199\u4e0b\u6765\uff0c\u53d1\u8868\u51fa\u53bb\u6216\u4f5c\u4e3a\u79c1\u5bb6\u65e5\u8bb0\uff0c\u518d\u4e00\u6b21\u628a\u81ea\u5df1\u653e\u7a7a\uff0c\u8ba9\u5185\u5fc3\u5145\u6ee1\u6e34\u671b\uff08\u5f53\u7136\u4e5f\u662f\u7a7a\u865a\uff09\uff0c\u4e00\u6b21\u6587\u7ae0\u4fbf\u662f\u4e00\u6b21\u8c03\u5242\u4e86\u3002\u8fd9\u662f\u4e00\u79cd\u7eda\u70c2\u7684\u8c03\u5242\uff0c\u4e00\u5207\u7684\u76ee\u7684\uff0c\u4e00\u5207\u7684\u5f52\u5bbf\u3002\u5728\u5de5\u4f5c\u4e2d\uff0c\u4f3c\u4e4e\u6709\u70b9\u68d8\u624b\u3002\u5de5\u4f5c\u4e2d\u7684\u8c03\u5242\u53c8\u662f\u4ec0\u4e48\u5462\uff1f\u8fd8\u6ca1\u6709\u7b54\u6848\uff0c\u662f\u751f\u6d3b\u4e48\uff1f\u5c31\u50cf\u4f53\u9a8c\u7684\u6700\u7ec8\u662f\u5199\u4e00\u7bc7\u6587\u7ae0\uff0c\u90a3\u5de5\u4f5c\u7684\u7ec8\u7ed3\u662f\u4ec0\u4e48\u5462\uff1f\u6362\u4e2a\u89d2\u5ea6\u601d\u8003\uff0c\u5199\u4e00\u7bc7\u6587\u7ae0\u662f\u6d88\u8017\uff0c\u662f\u4e3a\u4e86\u8ba9\u81ea\u5df1\u4fdd\u6301\u6e34\u671b\uff0c\u90a3\u5de5\u4f5c\u7684\u6d88\u8017\u53c8\u662f\u4ec0\u4e48\u5462\uff1f\u8ba9\u6211\u4eec\u5148\u653e\u4e00\u653e\u3002 \u603b\u4e4b\uff0c\u6211\u53c8\u62e5\u6709\u4e86\u4e00\u79cd\u65b0\u7684\u4f53\u609f\uff0c\u53ef\u4ee5\u8f83\u5c11\u75db\u82e6\u3002\u6295\u5165\u3001\u8c03\u5242\uff0c\u65e0\u6b62\u5883\u7684\u601d\u8003\u4e0e\u70ed\u60c5\u3002 \u4e8c # \u8bf4\u8d77\u8bed\u8a00\u5b66\u4e60\uff0c\u4e0d\u5f97\u4e0d\u8bf4\u8d77\u6cd5\u8bed\u7684\u5b66\u4e60\u3002\u6cd5\u8bed\u7684\u5b66\u4e60\u6700\u7ec8\u8ba9\u6211\u5bfb\u5230\u4e86\u4e00\u79cd\u751f\u547d\u7684\u53ef\u80fd\u3002\u4e0d\u77e5\u9053\u8fc7\u53bb\u662f\u4e0d\u662f\u540c\u6837\u7684\u611f\u53d7\uff0c\u89c9\u5f97\u81ea\u5df1\u7684\u672a\u6765\u5df2\u7ecf\u627e\u5230\u3002\u6211\u8fd9\u6b21\u806a\u660e\u4e86\uff0c\u4e0d\u90a3\u4e48\u8bf4\u4e00\u5b9a\u3002\u6211\u60f3\u672a\u6765\u51e0\u5e74\u5e94\u8be5\u662f\u8fd9\u6837\u7684\uff0c\u800c\u4e14\u5bf9\u8fd9\u79cd\u751f\u6d3b\u7684\u53ef\u80fd\u6027\uff0c\u8ba9\u4eba\u7edd\u4e0d\u6000\u7591\u3002 \u8fd9\u79cd\u751f\u547d\u8ba9\u4eba\u6781\u5176\u4e30\u5bcc\u3002\u8fd9\u79cd\u751f\u547d\u8981\u6c42\u4f60\u6781\u5927\u7684\u878d\u5165\u751f\u6d3b\u3002\u4e3a\u4ec0\u4e48\u6211\u521a\u521a\u8ba4\u8bc6\u5230\u81ea\u5df1\u8981\u6781\u5927\u7684\u878d\u5165\u751f\u6d3b\uff1f\u9ad8\u4e2d\u6bd5\u4e1a\u7684\u65f6\u5019\u4fbf\u6709\u4e00\u4e9b\u840c\u82bd\uff0c\u4f46\u662f\u90a3\u65f6\u5019\u505a\u7684\u53ea\u662f\u5bf9\u5b66\u4e60\u7684\u53cd\u6297\uff0c\u4ee5\u4e3a\u4e0d\u5b66\u4e60\u5c31\u662f\u751f\u6d3b\u4e86\u3002\u5176\u5b9e\u4e0d\u662f\u3002\u800c\u65b0\u5b66\u4e60\u4e00\u95e8\u8bed\u8a00\u8ba9\u9ebb\u6728\u7684\u795e\u7ecf\u82cf\u9192\uff0c\u539f\u6765\uff0c\u6211\u4eec\u90a3\u4e48\u4e0d\u4e86\u89e3\u81ea\u5df1\u7684\u751f\u6d3b\u7684\u57ce\u5e02\uff08\u5f53\u7136\u8fd9\u4e5f\u6709C\u541b\u5bf9\u6211\u7684\u523a\u6fc0\uff09\uff0c\u5730\u6807\u3001\u6c11\u4fd7\u3001\u6587\u5316\u3001\u4ea4\u901a\u3001\u52a8\u7269\u56ed\u3001\u79d1\u6280\u9986\u3001\u996e\u98df\u3001\u5929\u6c14\u3001\u6cd5\u5f8b\u3001\u7535\u5f71\u9662\uff0c\u4e00\u5207\u4e00\u5207\u7684\u751f\u6d3b\u5c31\u5728\u751f\u6d3b\u4e4b\u4e2d\u3002\u91cd\u65b0\u5b66\u4e60\u4e00\u95e8\u8bed\u8a00\u5c31\u9700\u8981\u638c\u63e1\u8fd9\u4e9b\u8bcd\u6c47\uff0c\u5c31\u9700\u8981\u7528\u8033\u6735\u542c\uff0c\u7528\u773c\u775b\u770b\uff0c\u7528\u5fc3\u53bb\u611f\u53d7\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u5b66\u4e60\u65b0\u8bed\u8a00\u8ba9\u6211\u89e3\u5f00\u4e86\u4e00\u4e2a\u7591\u95ee\uff1a\u6211\u7a76\u7adf\u5fd8\u4e86\u4ec0\u4e48\uff1f\u6211\u5fd8\u4e86\u8981\u597d\u597d\u5730\u505a\u4f5c\u4e1a\u3001\u542c\u8bfe\u3001\u597d\u597d\u590d\u4e60\uff0c\u8981\u52aa\u529b\u8ddf\u4e0a\u8fdb\u5ea6\uff0c\u8981\u82b1\u8d39\u957f\u65f6\u95f4\u7684\u8fdb\u884c\u8bad\u7ec3\u548c\u62d3\u5c55\uff0c\u5f53\u7136\u770b\u4e66\u4e00\u904d\u4e0d\u8db3\u591f\uff0c\u5c31\u518d\u6765\u51e0\u904d\u3002\u6211\u6240\u4f1a\u7684\u53ea\u662f\u7a81\u51fb\u8003\u8bd5\u7f62\u4e86\u3002 \u6587\u521d\u4f5c\u4e8eQuestacon\uff08\u79d1\u6280\u9986\uff09G\u5c42Cafe\u5916\uff0c\u5f55\u5fc5\u601d\u65ad\uff0c\u65e0\u6cd5\u7eed\u5199\uff0c\u6b8b\u6587\u800c\u5df2\u3002","title":"ANU\u6691\u671f\u5b66\u6821-\u6211\u7684\u77db\u76fe"},{"location":"posts/2018-02-01-ANU%E6%9A%91%E6%9C%9F%E5%AD%A6%E6%A0%A1-%E6%88%91%E7%9A%84%E7%9F%9B%E7%9B%BE/#anu-","text":"","title":"ANU\u6691\u671f\u5b66\u6821-\u6211\u7684\u77db\u76fe"},{"location":"posts/2018-02-01-ANU%E6%9A%91%E6%9C%9F%E5%AD%A6%E6%A0%A1-%E6%88%91%E7%9A%84%E7%9F%9B%E7%9B%BE/#_1","text":"\u8bf4\u8d77\u82f1\u8bed\u5b66\u4e60\uff0c\u53ef\u771f\u662f\u4e00\u8a00\u96be\u5c3d\u3002\u5373\u4fbf\u662f\u62a5\u4e86\u8865\u4e60\u73ed\uff0c\u6bcf\u5929\u4e5f\u52aa\u529b\u5730\u5b66\u4e60\uff0c\u8fd8\u662f\u89c9\u5f97\u4e0d\u53ef\u80fd\u628a\u82f1\u8bed\u5b66\u597d\u3002\u8001\u5e08\u6559\u3001\u81ea\u5df1\u5b66\u3001\u82f1\u8bed\u73af\u5883\uff0c\u5982\u679c\u8bf4\u8fd9\u4e09\u70b9\u90fd\u6ee1\u8db3\u5c31\u80fd\u628a\u82f1\u8bed\u5b66\u597d\uff0c\u6015\u6211\u65e9\u5c31\u662f\u82f1\u8bed\u80fd\u624b\u4e86\u3002\u4e8b\u60c5\u5f80\u5f80\u4e0d\u662f\u90a3\u4e48\u7b80\u5355\uff0c\u66f4\u4f55\u51b5\uff0c\u4ece\u6765\u90fd\u6ca1\u6709\u6784\u5efa\u4e00\u4e2a\u82f1\u8bed\u73af\u5883\u3002\u8fd9\u6b21\u5230\u56fd\u5916\u6765\uff0c\u4e5f\u6709\u4e00\u4e9b\u5173\u4e8e\u6784\u5efa\u82f1\u8bed\u73af\u5883\u7684\u60f3\u6cd5\uff0c\u6bd4\u5982\uff0c\u7528\u82f1\u8bed\u601d\u8003\u3001\u5fc3\u91cc\u9ed8\u5ff5\u522b\u4eba\u8bf4\u7684\u8bdd\u3001\u67e5\u770b\u56fd\u5916\u52a8\u7269\u56ed\u7684\u7f51\u7ad9\u2026\u2026\u8fd9\u4e00\u6b21\u51fa\u884c\uff0c\u4e00\u822c\u7684\u4ea4\u6d41\u7528\u5230\u7684\u8bcd\u6c47\u51e0\u4e4e\u6ca1\u6709\u8d85\u8fc7\u81ea\u5df1\u7684\u6c34\u5e73\uff085000\u5de6\u53f3\uff09;\u4f46\u662f\u7a0d\u5fae\u6b63\u5f0f\u4e00\u70b9\u513f\u7684\u670d\u52a1\u4e0e\u6f14\u8bb2\u5c31\u8981\u6d89\u53ca\u66f4\u591a\u7684\u8bcd\u6c47\u4e86\uff0c\u6bd4\u5982\u70b9\u9910\u3001\u53f8\u673a\u5e08\u5085\u5728\u5f00\u8f66\u524d\u3001\u9014\u4e2d\u548c\u7ec8\u70b9\u524d\u7684\u6e29\u99a8\u63d0\u793a\u3002\u5982\u679c\u8981\u60f3\u542c\u61c2\u8fd9\u4e9b\uff0c\u786e\u5b9e\u8981\u8d39\u4e9b\u65f6\u65e5\u3002\u5982\u679c\u628a\u6211\u653e\u5728\u56fd\u5916\uff0c\u6211\u60f3\u6211\u56de\u627e\u4e00\u4e2a\u5916\u56fd\u4eba\u4f7f\u52b2\u513f\u5730\u95ee\uff0c\u8fd9\u4e2a\u4ec0\u4e48\u90a3\u662f\u4ec0\u4e48\uff0c\u6765\u5b66\u4e60\u751f\u8bcd\u548c\u53e5\u5b50\u3002\u6211\u8fd8\u4f1a\u5c3d\u53ef\u80fd\u7684\u9605\u8bfb\u82f1\u6587\u7684\u4ecb\u7ecd\u548c\u80cc\u666f\u77e5\u8bc6\u3002\u6211\u4f1a\u5c3d\u53ef\u80fd\u5730\u63a5\u89e6\u751f\u6d3b\u7684\u6bcf\u4e00\u65b9\u9762\uff0c\u5b66\u4e60\u8bcd\u6c47\u548c\u77ed\u8bed\u3002\u6211\u4f1a\u5c3d\u53ef\u80fd\u7684\u4e0e\u5916\u56fd\u4eba\u4ea4\u6d41\uff0c\u56de\u987e\u548c\u5c55\u671b\uff0c\u518d\u8fdb\u4e00\u6b65\u8ba8\u8bba\u6587\u5316\u3002\u603b\u7ed3\u8d77\u6765\uff0c\u65e0\u975e\u5c31\u662f\u6700\u5927\u9650\u5ea6\u7684\u878d\u5165\u4ed6\u4eec\u3002 \u8865\u5145\u4e00\u4e9b\u4e0eX\u541b\u7684\u4ea4\u6d41\u3002\u201c\u7528\u82f1\u8bed\u601d\u8003\u3001\u5927\u91cf\u7684\u57fa\u7840\u9605\u8bfb\uff08\u8bfe\u7a0b\uff09\u4ee5\u53ca\u5199\u4f5c\u662f\u8f83\u597d\u7684\u5b66\u4e60\u8bed\u8a00\u7684\u8981\u7d20\u201d\u3002 \u4ee5\u4e0a\u7edd\u5bf9\u662f\u8bf4\u7684\u8f7b\u677e\uff0c\u505a\u8d77\u6765\u96be\u3002\u65f6\u95f4\uff0c\u9700\u8981\u65f6\u95f4\u3002\u5982\u679c\u6bcf\u5929\u9700\u89813\u4e2a\u5c0f\u65f6\uff0c\u90a3\u5c31\u5f97\u534a\u5e74\u624d\u521d\u89c1\u7aef\u502a\u3002\u5f88\u663e\u7136\uff0c\u4e0d\u53ef\u80fd\u6bcf\u5929\u6709\u90a3\u4e48\u591a\u7684\u65f6\u95f4\u3002\u5982\u679c\uff0c\u73b0\u5728\u8ba9\u6211\u9009\u62e9\uff0c\u6211\u5927\u6982\u4f1a\u8fdb\u4e00\u6b65\u538b\u7f29\u793e\u4ea4\u4e0e\u751f\u6d3b\u7684\u65f6\u95f4\uff0c\u8ba9\u5de5\u4f5c\u7684\u6bcf\u4e00\u5929\u5c3d\u53ef\u80fd\u9ad8\u6548\u548c\u5145\u5b9e\u3002\u56e0\u4e3a\u6211\u6700\u8fd1\u660e\u767d\u8fc7\u6765\uff0c\u4e0d\u7eaf\u7cb9\u7684\u4f11\u606f\u603b\u662f\u4e00\u70b9\u610f\u4e49\u90fd\u6ca1\u6709\u7684\u3002\u4f60\u6839\u672c\u65e0\u6cd5\u5f97\u5230\u751f\u6d3b\u7684\u52a8\u529b\uff0c\u90a3\u79cd\u4f11\u606f\u7eaf\u7cb9\u662f\u8eab\u4f53\u4e0a\u4f11\u606f\uff0c\u4f46\u7cbe\u795e\u4e0a\u7684\u4e4f\u4e0d\u89e3\uff0c\u4e00\u6837\u6ca1\u6709\u7528\u3002\u5de5\u4f5c\u65f6\u8ba4\u771f\u5de5\u4f5c\u3001\u4eab\u53d7\u5de5\u4f5c\uff0c\u6512\u94b1\u5ea6\u5047\uff0c\u8d70\u8fdc\u4e00\u4e9b\uff0c\u65f6\u95f4\u957f\u4e00\u4e9b\uff08\u81f3\u5c11\u4e00\u5468\uff09\uff0c\u80fd\u5728\u6781\u5927\u653e\u677e\u7684\u540c\u65f6\u83b7\u5f97\u6781\u5927\u7684\u80fd\u91cf\uff0c\u53ef\u4ee5\u652f\u6491\u8f83\u957f\u65f6\u95f4\u7684\u503e\u60c5\u6295\u5165\u3002\u6b63\u5f0f\u6253\u7834\u4e86\u4e4b\u524d\u7684\u5e73\u8861\u4e00\u5207\u7684\u7406\u8bba\uff0c\u83b7\u53d6\u53ef\u4ee5\u51cf\u8f7b\u4e00\u4e9b\u75db\u82e6\u3002 \u7ee7\u7eed\u8bf4\u65f6\u95f4\u3002\u8fd9\u6837\u6211\u53ef\u4ee5\u505a\u4e00\u4e2a\u8f83\u957f\u65f6\u95f4\u7684\u8ba1\u5212\u3002\u4e00\u4e2a\u6708\u751a\u81f3\u51e0\u4e2a\u6708\uff0c\u5de5\u4f5c\u4e2d\u6709\u6210\u679c\u6709\u8fdb\u5c55\u3002\u6fb3\u5927\u5229\u4e9a\u662f\u4e2a\u65c5\u6e38\u7684\u597d\u5730\u65b9\uff08\u8fd9\u53e5\u8bdd\u662f\u4e2a\u4e07\u80fd\u7684\u53e5\u5b50\uff09\u3002\u8fd9\u91cc\u7684\u8282\u594f\u9002\u5408\u65c5\u6e38\u3002\u4e0d\u8981\u5f88\u5927\u7684\u56e2\uff0c\u51e0\u4e2a\u4eba\u4e00\u8d77\uff0c\u8981\u6709\u70ed\u60c5\u7684\u3001\u8981\u6709\u8bd7\u610f\u7684\u3001\u6709\u903b\u8f91\u7684\u3002\u5982\u679c\u8981\u505a\u4e00\u4e9b\u65c5\u6e38\u7684\u8ba1\u5212\uff0c\u5c31\u53ef\u4ee5\u6765\u6fb3\u6d32\u3002\u5de5\u4f5c\u7684\u73af\u5883\u4e5f\u5f88\u91cd\u8981\uff0c\u6700\u597d\u662f\u6709\u4e00\u4e2a\u6bd4\u8f83\u72ec\u7acb\u7684\u7a7a\u95f4\uff0c\u53ef\u4ee5\u662f\u5f00\u653e\u5f0f\u7684\uff0c\u4f46\u8981\u76f8\u5bf9\u4e0d\u88ab\u6253\u6270\u3002\u8fd9\u6837\u7684\u5de5\u4f5c\u6761\u4ef6\u53ef\u4ee5\u8ba9\u4eba\u4fdd\u6301\u826f\u597d\u7684\u5fc3\u60c5\u3001\u79ef\u6781\u7684\u6001\u5ea6\u3002\u5f53\u7136\u56e2\u961f\u4e5f\u5f88\u91cd\u8981\uff0c\u5c24\u5176\u662f\u4e00\u4e2a\u4eba\u7684\u79d1\u7814\u89c2\u5ff5\u521a\u521a\u5efa\u7acb\u7684\u65f6\u5019\u3002\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u662f\u65e0\u6cd5\u6d3b\u5f97\u8fd9\u6837\u7684\u5de5\u4f5c\u6761\u4ef6\u7684\uff0c\u6240\u4ee5\u53ea\u80fd\u968f\u7f18\u4e86\u3002\u5f53\u7136\u66f4\u5e0c\u671b\uff0c\u539f\u5219\u4e0a\u751f\u6d3b\u4e0e\u5de5\u4f5c\u5206\u5f00\u3002\u5de5\u4f5c\u7684\u65f6\u95f4\u53ef\u4ee5\u66f4\u957f\u4e00\u4e9b\uff0c\u7559\u597d\u9700\u8981\u5b66\u4e60\u7684\u65f6\u95f4\uff0c\u5c3d\u53ef\u80fd\u538b\u7f29\u5403\u996d\u7684\u65f6\u95f4\uff08\u5b58\u7591\uff0c\u5916\u56fd\u4eba\u5403\u996d\u65f6\u5019\u804a\u5929\u624d\u662f\u4e3b\u4e1a\uff09\u3002 \u5f53\u7136\uff0c\u6211\u4eec\u7684\u751f\u6d3b\u9700\u8981\u8c03\u5473\u5242\uff0c\u50cf\u4e00\u4e2a\u8bd7\u4eba\u4e00\u6837\u611f\u53d7\u5168\u4e16\u754c\u7684\u65f6\u5019\u96be\u514d\u5931\u53bb\u81ea\u6211\u3002\u800c\u611f\u53d7\u7684\u76ee\u7684\u6070\u6070\u662f\u4e3a\u4e86\u8868\u8fbe\u81ea\u6211\u3002\u8981\u5148\u5931\u53bb\uff08\u4e0a\u4e00\u6b21\u8868\u8fbe\uff09\uff0c\u5728\u9010\u6e10\u627e\u56de\u672c\u771f\u7684\u65f6\u5019\u628a\u4ed6\u4eec\u5199\u4e0b\u6765\uff0c\u53d1\u8868\u51fa\u53bb\u6216\u4f5c\u4e3a\u79c1\u5bb6\u65e5\u8bb0\uff0c\u518d\u4e00\u6b21\u628a\u81ea\u5df1\u653e\u7a7a\uff0c\u8ba9\u5185\u5fc3\u5145\u6ee1\u6e34\u671b\uff08\u5f53\u7136\u4e5f\u662f\u7a7a\u865a\uff09\uff0c\u4e00\u6b21\u6587\u7ae0\u4fbf\u662f\u4e00\u6b21\u8c03\u5242\u4e86\u3002\u8fd9\u662f\u4e00\u79cd\u7eda\u70c2\u7684\u8c03\u5242\uff0c\u4e00\u5207\u7684\u76ee\u7684\uff0c\u4e00\u5207\u7684\u5f52\u5bbf\u3002\u5728\u5de5\u4f5c\u4e2d\uff0c\u4f3c\u4e4e\u6709\u70b9\u68d8\u624b\u3002\u5de5\u4f5c\u4e2d\u7684\u8c03\u5242\u53c8\u662f\u4ec0\u4e48\u5462\uff1f\u8fd8\u6ca1\u6709\u7b54\u6848\uff0c\u662f\u751f\u6d3b\u4e48\uff1f\u5c31\u50cf\u4f53\u9a8c\u7684\u6700\u7ec8\u662f\u5199\u4e00\u7bc7\u6587\u7ae0\uff0c\u90a3\u5de5\u4f5c\u7684\u7ec8\u7ed3\u662f\u4ec0\u4e48\u5462\uff1f\u6362\u4e2a\u89d2\u5ea6\u601d\u8003\uff0c\u5199\u4e00\u7bc7\u6587\u7ae0\u662f\u6d88\u8017\uff0c\u662f\u4e3a\u4e86\u8ba9\u81ea\u5df1\u4fdd\u6301\u6e34\u671b\uff0c\u90a3\u5de5\u4f5c\u7684\u6d88\u8017\u53c8\u662f\u4ec0\u4e48\u5462\uff1f\u8ba9\u6211\u4eec\u5148\u653e\u4e00\u653e\u3002 \u603b\u4e4b\uff0c\u6211\u53c8\u62e5\u6709\u4e86\u4e00\u79cd\u65b0\u7684\u4f53\u609f\uff0c\u53ef\u4ee5\u8f83\u5c11\u75db\u82e6\u3002\u6295\u5165\u3001\u8c03\u5242\uff0c\u65e0\u6b62\u5883\u7684\u601d\u8003\u4e0e\u70ed\u60c5\u3002","title":"\u4e00"},{"location":"posts/2018-02-01-ANU%E6%9A%91%E6%9C%9F%E5%AD%A6%E6%A0%A1-%E6%88%91%E7%9A%84%E7%9F%9B%E7%9B%BE/#_2","text":"\u8bf4\u8d77\u8bed\u8a00\u5b66\u4e60\uff0c\u4e0d\u5f97\u4e0d\u8bf4\u8d77\u6cd5\u8bed\u7684\u5b66\u4e60\u3002\u6cd5\u8bed\u7684\u5b66\u4e60\u6700\u7ec8\u8ba9\u6211\u5bfb\u5230\u4e86\u4e00\u79cd\u751f\u547d\u7684\u53ef\u80fd\u3002\u4e0d\u77e5\u9053\u8fc7\u53bb\u662f\u4e0d\u662f\u540c\u6837\u7684\u611f\u53d7\uff0c\u89c9\u5f97\u81ea\u5df1\u7684\u672a\u6765\u5df2\u7ecf\u627e\u5230\u3002\u6211\u8fd9\u6b21\u806a\u660e\u4e86\uff0c\u4e0d\u90a3\u4e48\u8bf4\u4e00\u5b9a\u3002\u6211\u60f3\u672a\u6765\u51e0\u5e74\u5e94\u8be5\u662f\u8fd9\u6837\u7684\uff0c\u800c\u4e14\u5bf9\u8fd9\u79cd\u751f\u6d3b\u7684\u53ef\u80fd\u6027\uff0c\u8ba9\u4eba\u7edd\u4e0d\u6000\u7591\u3002 \u8fd9\u79cd\u751f\u547d\u8ba9\u4eba\u6781\u5176\u4e30\u5bcc\u3002\u8fd9\u79cd\u751f\u547d\u8981\u6c42\u4f60\u6781\u5927\u7684\u878d\u5165\u751f\u6d3b\u3002\u4e3a\u4ec0\u4e48\u6211\u521a\u521a\u8ba4\u8bc6\u5230\u81ea\u5df1\u8981\u6781\u5927\u7684\u878d\u5165\u751f\u6d3b\uff1f\u9ad8\u4e2d\u6bd5\u4e1a\u7684\u65f6\u5019\u4fbf\u6709\u4e00\u4e9b\u840c\u82bd\uff0c\u4f46\u662f\u90a3\u65f6\u5019\u505a\u7684\u53ea\u662f\u5bf9\u5b66\u4e60\u7684\u53cd\u6297\uff0c\u4ee5\u4e3a\u4e0d\u5b66\u4e60\u5c31\u662f\u751f\u6d3b\u4e86\u3002\u5176\u5b9e\u4e0d\u662f\u3002\u800c\u65b0\u5b66\u4e60\u4e00\u95e8\u8bed\u8a00\u8ba9\u9ebb\u6728\u7684\u795e\u7ecf\u82cf\u9192\uff0c\u539f\u6765\uff0c\u6211\u4eec\u90a3\u4e48\u4e0d\u4e86\u89e3\u81ea\u5df1\u7684\u751f\u6d3b\u7684\u57ce\u5e02\uff08\u5f53\u7136\u8fd9\u4e5f\u6709C\u541b\u5bf9\u6211\u7684\u523a\u6fc0\uff09\uff0c\u5730\u6807\u3001\u6c11\u4fd7\u3001\u6587\u5316\u3001\u4ea4\u901a\u3001\u52a8\u7269\u56ed\u3001\u79d1\u6280\u9986\u3001\u996e\u98df\u3001\u5929\u6c14\u3001\u6cd5\u5f8b\u3001\u7535\u5f71\u9662\uff0c\u4e00\u5207\u4e00\u5207\u7684\u751f\u6d3b\u5c31\u5728\u751f\u6d3b\u4e4b\u4e2d\u3002\u91cd\u65b0\u5b66\u4e60\u4e00\u95e8\u8bed\u8a00\u5c31\u9700\u8981\u638c\u63e1\u8fd9\u4e9b\u8bcd\u6c47\uff0c\u5c31\u9700\u8981\u7528\u8033\u6735\u542c\uff0c\u7528\u773c\u775b\u770b\uff0c\u7528\u5fc3\u53bb\u611f\u53d7\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u5b66\u4e60\u65b0\u8bed\u8a00\u8ba9\u6211\u89e3\u5f00\u4e86\u4e00\u4e2a\u7591\u95ee\uff1a\u6211\u7a76\u7adf\u5fd8\u4e86\u4ec0\u4e48\uff1f\u6211\u5fd8\u4e86\u8981\u597d\u597d\u5730\u505a\u4f5c\u4e1a\u3001\u542c\u8bfe\u3001\u597d\u597d\u590d\u4e60\uff0c\u8981\u52aa\u529b\u8ddf\u4e0a\u8fdb\u5ea6\uff0c\u8981\u82b1\u8d39\u957f\u65f6\u95f4\u7684\u8fdb\u884c\u8bad\u7ec3\u548c\u62d3\u5c55\uff0c\u5f53\u7136\u770b\u4e66\u4e00\u904d\u4e0d\u8db3\u591f\uff0c\u5c31\u518d\u6765\u51e0\u904d\u3002\u6211\u6240\u4f1a\u7684\u53ea\u662f\u7a81\u51fb\u8003\u8bd5\u7f62\u4e86\u3002 \u6587\u521d\u4f5c\u4e8eQuestacon\uff08\u79d1\u6280\u9986\uff09G\u5c42Cafe\u5916\uff0c\u5f55\u5fc5\u601d\u65ad\uff0c\u65e0\u6cd5\u7eed\u5199\uff0c\u6b8b\u6587\u800c\u5df2\u3002","title":"\u4e8c"},{"location":"posts/2018-02-07-ANU%E6%9A%91%E6%9C%9F%E5%AD%A6%E6%A0%A1-%E5%B0%BE%E5%A3%B0/","text":"ANU\u6691\u671f\u5b66\u6821-\u5c3e\u58f0 # \u4e00 # \u4eba\u5728\u4e00\u4e2a\u964c\u751f\u7684\u73af\u5883\uff0c\u4f1a\u4e0d\u7531\u81ea\u4e3b\u7684\u5c55\u73b0\u81ea\u5df1\u7684\u6f5c\u610f\u8bc6\uff0c\u8868\u73b0\u81ea\u5df1\u672c\u80fd\u7684\u6b32\u671b\u3002\u6bd4\u5982\u8bf4\uff0c\u4e00\u4e9b\u4eba\u81ea\u613f\u7684\u3001\u4e0d\u81ea\u613f\u7684\u5b66\u8fc7\u97f3\u4e50\uff0c\u56fd\u5185\u4ece\u672a\u9732\u8fc7\u4e00\u624b\uff0c\u5230\u8fd9\u90fd\u663e\u5f97\u65e0\u9650\u7737\u604b\u4e86\uff1b\u6bd4\u5982\u8bf4\uff0c\u4e00\u4e9b\u4eba\u613f\u610f\u73a9\u6e38\u620f\uff0c\u56fd\u5185\u6bcf\u65e5\u5fd9\u5f97\u5598\u4e0d\u8fc7\u6c14\u6765\uff0c\u5230\u8fd9\u6068\u4e0d\u5f97\u73a9\u513f\u5230\u5929\u4eae\uff1b\u6bd4\u5982\u8bf4\uff0c\u4e00\u4e9b\u4eba\u4eab\u53d7\u6e05\u5bc2\uff0c\u56fd\u5185\u88ab\u8feb\u7684\u4ecb\u5165\u5230\u590d\u6742\u7684\u5173\u7cfb\u4e2d\uff0c\u8fd9\u56de\u53ef\u4e0d\u7528\u7406\u90a3\u4e48\u591a\u4e86\u3002\u5f53\u7136\uff0c\u4e5f\u6709\u4e9b\u4eba\u4e00\u76f4\u5728\u5de5\u4f5c\uff0c\u8fd8\u6709\u4e9b\u4eba\u53ea\u4e0d\u8fc7\u662f\u6362\u4e86\u4e2a\u5730\u65b9\u901b\u8857\u3002 \u8fd9\u4eba\u7269\u7fa4\u50cf\uff0c\u603b\u4e0d\u662f\u90a3\u4e48\u597d\u63cf\u8ff0\u7684\uff1b\u5224\u65ad\u4e00\u4e2a\u4eba\u4e5f\u662f\u6781\u5176\u7684\u56f0\u96be\u3002\u4e3a\u4e86\u8ba9\u4e8b\u60c5\u53d8\u5f97\u7b80\u5355\uff0c\u6211\u4eec\u603b\u662f\u613f\u610f\u91c7\u7528\u7b80\u5355\u7684\u601d\u7ef4\uff0c\u6bd4\u5982\u4e8c\u5143\u5bf9\u7acb\u3002\u4e00\u4e2a\u4eba\u662f\u5065\u8c08\u8fd8\u662f\u5be1\u8a00\uff0c\u4e00\u4e2a\u4eba\u662f\u806a\u660e\u8fd8\u662f\u611a\u7b28\u3002\u4f46\u4e00\u4e2a\u4eba\u5f80\u5f80\u8981\u66f4\u590d\u6742\u3002\u8fd9\u5065\u8c08\u6216\u662f\u5be1\u8a00\uff0c\u8981\u518d\u52a0\u4e0a\u6761\u4ef6\uff0c\u6bd4\u5982\u201c\u4e0e\u964c\u751f\u4eba\u5728\u4e00\u8d77\u201d\uff0c\u624d\u66f4\u6709\u8c08\u8bba\u7684\u610f\u4e49\u3002\u6700\u540e\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u5f97\u51fa\u7ed3\u8bba\uff0c\u8fd9\u4e2a\u4eba\u65e2\u662f\u5065\u8c08\u7684\u53c8\u662f\u5be1\u8a00\u7684\uff0c\u770b\u4f3c\u5341\u5206\u77db\u76fe\uff0c\u5b9e\u9645\u4e0a\u53c8\u662f\u5728\u4e0d\u540c\u7684\u6761\u4ef6\u4e0b\u6210\u7acb\u7684\u3002\u56e0\u4eba\u7684\u590d\u6742\u6027\u5bfc\u81f4\u4eba\u5f80\u5f80\u6ca1\u529e\u6cd5\u88ab\u6253\u4e00\u4e2a\u4fbf\u7b7e\u5c31\u53ef\u4ee5\u4ee3\u8868\u4ed6\u7684\u5168\u90e8\uff0c\u9047\u5230\u76f8\u4f3c\u7684\u60c5\u51b5\uff0c\u5c31\u8981\u591a\u601d\u8003\u4e00\u4e0b\uff0c\u5df2\u6709\u7684\u8bc4\u8bf4\u80cc\u540e\u7684\u771f\u5b9e\u610f\u56fe\u3002 \u4eba\u7684\u590d\u6742\u6027\u53c8\u5728\u4e8e\u4eba\u4eba\u4e0d\u540c\u3002\u5168\u4e16\u754c\u670970\u591a\u4ebf\u4eba\u53e3\uff0c\u6bcf\u4e00\u4e2a\u4e2a\u4f53\u90fd\u662f\u72ec\u4e00\u65e0\u4e8c\u7684\u3002\u629b\u5f00\u4eba\u79cd\u7684\u3001\u6027\u522b\u7684\u5dee\u5f02\uff0c\u4eba\u4eba\u4e0d\u540c\u7684\u539f\u56e0\u5728\u4e8e\u7ecf\u5386\u7684\u65e0\u9650\u6027\u548c\u601d\u8003\u7684\u65e0\u9650\u6027\uff1b\u533a\u57df\u5185\u6216\u8bb8\u4f1a\u9020\u6210\u7ecf\u5386\u7684\u540c\u8d28\uff0c\u4f46\u662f\u601d\u8003\u7edd\u4e0d\u53ef\u80fd\u662f\u4e00\u6837\u7684\u3002\u8981\u60f3\u628a\u81ea\u5df1\u4e0e\u522b\u4eba\u533a\u5206\u5f00\uff0c\u5c31\u8981\u60f3\u529e\u6cd5\u4ece\u81ea\u5df1\u7684\u7ecf\u5386\u548c\u601d\u8003\u5165\u624b\u3002\u4f46\u662f\uff0c\u6211\u4eec\u9762\u4e34\u7740\u4e00\u4e9b\u6781\u5927\u7684\u56f0\u5883\u3002\u793e\u4f1a\u5bf9\u4eba\u7684\u8981\u6c42\u6709\u5b83\u7684\u4f20\u7edf\uff0c\u6211\u4eec\u7684\u699c\u6837\u603b\u662f\u90a3\u6837\u7684\u3002\u4eba\u4eec\u603b\u662f\u4e0d\u81ea\u89c9\u7684\u88ab\u5b66\u4e60\u5404\u79cd\u80fd\u529b\uff0c\u751a\u81f3\u601d\u7ef4\u65b9\u5f0f\u548c\u601d\u8003\u5185\u5bb9\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u70d9\u5370\u6765\u5f62\u5bb9\u8fd9\u79cd\u73b0\u8c61\u3002\u65f6\u4ee3\u7684\u70d9\u5370\u3001\u5b66\u6821\u7684\u70d9\u5370\u3001\u5bb6\u5ead\u7684\u70d9\u5370\u2026\u2026 \u4e8c # \u4ee5\u4e0a\u79cd\u79cd\u590d\u6742\u6027\u5728\u4eba\u7fa4\u91cc\u90fd\u8868\u73b0\u5f97\u5341\u5206\u660e\u663e\u3002\u6700\u6d3b\u8dc3\u7684\u56e0\u7d20\u3001\u6700\u6709\u8da3\u7684\u90e8\u5206\u5c31\u662f\u8fd9\u4e9b\u5f62\u5f62\u8272\u8272\u7684\u4eba\u3002\u4f5c\u4e3a\u4e00\u4e2a\u89c2\u5bdf\u8005\uff0c\u9762\u5bf9\u8fd9\u4e9b\u590d\u6742\u6027\u65e2\u6b23\u559c\u53c8\u82e6\u607c\u3002\u6b23\u559c\u5728\u4e8e\u751f\u547d\u7684\u53ef\u80fd\u6027\u53c8\u88ab\u6269\u5c55\uff0c\u82e6\u607c\u5728\u4e8e\u96be\u4ee5\u628a\u63e1\u4eba\u6700\u6df1\u5c42\u7684\u9700\u6c42\u548c\u6e34\u671b\u3002 \u6700\u597d\u7684\u65b9\u5f0f\u4fbf\u662f\u81ea\u6211\u53cd\u601d\uff0c\u4efb\u4f55\u8bd5\u63a2\u6027\u7684\u8c08\u8bdd\u90fd\u65e0\u6cd5\u4ecb\u5165\u3002\u9762\u5bf9\u5916\u4eba\uff0c\u603b\u662f\u4f1a\u6709\u6240\u9690\u7792\u3002\u81ea\u6211\u53cd\u601d\u7684\u65f6\u5019\uff0c\u9700\u8981\u505a\u4e00\u4e9b\u5c0f\u5c0f\u7684\u7814\u7a76\uff0c\u66f4\u8981\u6781\u5ea6\u7684\u5411\u81ea\u5df1\u655e\u5f00\u81ea\u5df1\u3002\u5f53\u7136\uff0c\u4e5f\u4f1a\u5b58\u5728\u4e00\u4e9b\u7ec6\u5fae\u7684\u3001\u65e0\u6cd5\u4f53\u5bdf\u7684\u7279\u5f81\uff0c\u5c31\u53ea\u80fd\u7559\u7ed9\u672a\u6765\u4e86\u3002 \u4e09 # \u56de\u5230\u719f\u6089\u7684\u73af\u5883\uff0c\u4f2a\u88c5\u4fbf\u56de\u6765\u4e86\u3002\u4f60\u53c8\u53d8\u6210\u4e86\u90a3\u4e2a\u522b\u4eba\u719f\u6089\u7684\u4f60\uff0c\u662fA\u7684\u5b69\u5b50\uff0c\u662fB\u7684\u540c\u5b66\uff0c\u662fC\u7684\u597d\u670b\u53cb\u3002\u6234\u7740\u4e0d\u540c\u7684\u9762\u5177\uff0c\u5728\u4e0d\u540c\u89d2\u8272\u4e4b\u95f4\u5207\u6362\uff0c\u8868\u73b0\u4f60\u4e00\u8d2f\u7684\u98ce\u91c7\u548c\u7ef0\u7ea6\u3002 \u771f\u7684\u81ea\u5df1\u5728\u54ea\u91cc\u5462\uff1f\u5728\u957f\u65f6\u95f4\u7684\u9762\u5177\u4e4b\u4e0b\u5462\uff1f\u8fd8\u662f\u5728\u77ed\u6682\u7684\u62bd\u79bb\u4e4b\u4e2d\u5462\uff1f \u65e0\u8bba\u5982\u4f55\uff0c\u90fd\u8981\u8fc7\u5f97\u5e78\u798f\u3002","title":"ANU\u6691\u671f\u5b66\u6821-\u5c3e\u58f0"},{"location":"posts/2018-02-07-ANU%E6%9A%91%E6%9C%9F%E5%AD%A6%E6%A0%A1-%E5%B0%BE%E5%A3%B0/#anu-","text":"","title":"ANU\u6691\u671f\u5b66\u6821-\u5c3e\u58f0"},{"location":"posts/2018-02-07-ANU%E6%9A%91%E6%9C%9F%E5%AD%A6%E6%A0%A1-%E5%B0%BE%E5%A3%B0/#_1","text":"\u4eba\u5728\u4e00\u4e2a\u964c\u751f\u7684\u73af\u5883\uff0c\u4f1a\u4e0d\u7531\u81ea\u4e3b\u7684\u5c55\u73b0\u81ea\u5df1\u7684\u6f5c\u610f\u8bc6\uff0c\u8868\u73b0\u81ea\u5df1\u672c\u80fd\u7684\u6b32\u671b\u3002\u6bd4\u5982\u8bf4\uff0c\u4e00\u4e9b\u4eba\u81ea\u613f\u7684\u3001\u4e0d\u81ea\u613f\u7684\u5b66\u8fc7\u97f3\u4e50\uff0c\u56fd\u5185\u4ece\u672a\u9732\u8fc7\u4e00\u624b\uff0c\u5230\u8fd9\u90fd\u663e\u5f97\u65e0\u9650\u7737\u604b\u4e86\uff1b\u6bd4\u5982\u8bf4\uff0c\u4e00\u4e9b\u4eba\u613f\u610f\u73a9\u6e38\u620f\uff0c\u56fd\u5185\u6bcf\u65e5\u5fd9\u5f97\u5598\u4e0d\u8fc7\u6c14\u6765\uff0c\u5230\u8fd9\u6068\u4e0d\u5f97\u73a9\u513f\u5230\u5929\u4eae\uff1b\u6bd4\u5982\u8bf4\uff0c\u4e00\u4e9b\u4eba\u4eab\u53d7\u6e05\u5bc2\uff0c\u56fd\u5185\u88ab\u8feb\u7684\u4ecb\u5165\u5230\u590d\u6742\u7684\u5173\u7cfb\u4e2d\uff0c\u8fd9\u56de\u53ef\u4e0d\u7528\u7406\u90a3\u4e48\u591a\u4e86\u3002\u5f53\u7136\uff0c\u4e5f\u6709\u4e9b\u4eba\u4e00\u76f4\u5728\u5de5\u4f5c\uff0c\u8fd8\u6709\u4e9b\u4eba\u53ea\u4e0d\u8fc7\u662f\u6362\u4e86\u4e2a\u5730\u65b9\u901b\u8857\u3002 \u8fd9\u4eba\u7269\u7fa4\u50cf\uff0c\u603b\u4e0d\u662f\u90a3\u4e48\u597d\u63cf\u8ff0\u7684\uff1b\u5224\u65ad\u4e00\u4e2a\u4eba\u4e5f\u662f\u6781\u5176\u7684\u56f0\u96be\u3002\u4e3a\u4e86\u8ba9\u4e8b\u60c5\u53d8\u5f97\u7b80\u5355\uff0c\u6211\u4eec\u603b\u662f\u613f\u610f\u91c7\u7528\u7b80\u5355\u7684\u601d\u7ef4\uff0c\u6bd4\u5982\u4e8c\u5143\u5bf9\u7acb\u3002\u4e00\u4e2a\u4eba\u662f\u5065\u8c08\u8fd8\u662f\u5be1\u8a00\uff0c\u4e00\u4e2a\u4eba\u662f\u806a\u660e\u8fd8\u662f\u611a\u7b28\u3002\u4f46\u4e00\u4e2a\u4eba\u5f80\u5f80\u8981\u66f4\u590d\u6742\u3002\u8fd9\u5065\u8c08\u6216\u662f\u5be1\u8a00\uff0c\u8981\u518d\u52a0\u4e0a\u6761\u4ef6\uff0c\u6bd4\u5982\u201c\u4e0e\u964c\u751f\u4eba\u5728\u4e00\u8d77\u201d\uff0c\u624d\u66f4\u6709\u8c08\u8bba\u7684\u610f\u4e49\u3002\u6700\u540e\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u5f97\u51fa\u7ed3\u8bba\uff0c\u8fd9\u4e2a\u4eba\u65e2\u662f\u5065\u8c08\u7684\u53c8\u662f\u5be1\u8a00\u7684\uff0c\u770b\u4f3c\u5341\u5206\u77db\u76fe\uff0c\u5b9e\u9645\u4e0a\u53c8\u662f\u5728\u4e0d\u540c\u7684\u6761\u4ef6\u4e0b\u6210\u7acb\u7684\u3002\u56e0\u4eba\u7684\u590d\u6742\u6027\u5bfc\u81f4\u4eba\u5f80\u5f80\u6ca1\u529e\u6cd5\u88ab\u6253\u4e00\u4e2a\u4fbf\u7b7e\u5c31\u53ef\u4ee5\u4ee3\u8868\u4ed6\u7684\u5168\u90e8\uff0c\u9047\u5230\u76f8\u4f3c\u7684\u60c5\u51b5\uff0c\u5c31\u8981\u591a\u601d\u8003\u4e00\u4e0b\uff0c\u5df2\u6709\u7684\u8bc4\u8bf4\u80cc\u540e\u7684\u771f\u5b9e\u610f\u56fe\u3002 \u4eba\u7684\u590d\u6742\u6027\u53c8\u5728\u4e8e\u4eba\u4eba\u4e0d\u540c\u3002\u5168\u4e16\u754c\u670970\u591a\u4ebf\u4eba\u53e3\uff0c\u6bcf\u4e00\u4e2a\u4e2a\u4f53\u90fd\u662f\u72ec\u4e00\u65e0\u4e8c\u7684\u3002\u629b\u5f00\u4eba\u79cd\u7684\u3001\u6027\u522b\u7684\u5dee\u5f02\uff0c\u4eba\u4eba\u4e0d\u540c\u7684\u539f\u56e0\u5728\u4e8e\u7ecf\u5386\u7684\u65e0\u9650\u6027\u548c\u601d\u8003\u7684\u65e0\u9650\u6027\uff1b\u533a\u57df\u5185\u6216\u8bb8\u4f1a\u9020\u6210\u7ecf\u5386\u7684\u540c\u8d28\uff0c\u4f46\u662f\u601d\u8003\u7edd\u4e0d\u53ef\u80fd\u662f\u4e00\u6837\u7684\u3002\u8981\u60f3\u628a\u81ea\u5df1\u4e0e\u522b\u4eba\u533a\u5206\u5f00\uff0c\u5c31\u8981\u60f3\u529e\u6cd5\u4ece\u81ea\u5df1\u7684\u7ecf\u5386\u548c\u601d\u8003\u5165\u624b\u3002\u4f46\u662f\uff0c\u6211\u4eec\u9762\u4e34\u7740\u4e00\u4e9b\u6781\u5927\u7684\u56f0\u5883\u3002\u793e\u4f1a\u5bf9\u4eba\u7684\u8981\u6c42\u6709\u5b83\u7684\u4f20\u7edf\uff0c\u6211\u4eec\u7684\u699c\u6837\u603b\u662f\u90a3\u6837\u7684\u3002\u4eba\u4eec\u603b\u662f\u4e0d\u81ea\u89c9\u7684\u88ab\u5b66\u4e60\u5404\u79cd\u80fd\u529b\uff0c\u751a\u81f3\u601d\u7ef4\u65b9\u5f0f\u548c\u601d\u8003\u5185\u5bb9\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u70d9\u5370\u6765\u5f62\u5bb9\u8fd9\u79cd\u73b0\u8c61\u3002\u65f6\u4ee3\u7684\u70d9\u5370\u3001\u5b66\u6821\u7684\u70d9\u5370\u3001\u5bb6\u5ead\u7684\u70d9\u5370\u2026\u2026","title":"\u4e00"},{"location":"posts/2018-02-07-ANU%E6%9A%91%E6%9C%9F%E5%AD%A6%E6%A0%A1-%E5%B0%BE%E5%A3%B0/#_2","text":"\u4ee5\u4e0a\u79cd\u79cd\u590d\u6742\u6027\u5728\u4eba\u7fa4\u91cc\u90fd\u8868\u73b0\u5f97\u5341\u5206\u660e\u663e\u3002\u6700\u6d3b\u8dc3\u7684\u56e0\u7d20\u3001\u6700\u6709\u8da3\u7684\u90e8\u5206\u5c31\u662f\u8fd9\u4e9b\u5f62\u5f62\u8272\u8272\u7684\u4eba\u3002\u4f5c\u4e3a\u4e00\u4e2a\u89c2\u5bdf\u8005\uff0c\u9762\u5bf9\u8fd9\u4e9b\u590d\u6742\u6027\u65e2\u6b23\u559c\u53c8\u82e6\u607c\u3002\u6b23\u559c\u5728\u4e8e\u751f\u547d\u7684\u53ef\u80fd\u6027\u53c8\u88ab\u6269\u5c55\uff0c\u82e6\u607c\u5728\u4e8e\u96be\u4ee5\u628a\u63e1\u4eba\u6700\u6df1\u5c42\u7684\u9700\u6c42\u548c\u6e34\u671b\u3002 \u6700\u597d\u7684\u65b9\u5f0f\u4fbf\u662f\u81ea\u6211\u53cd\u601d\uff0c\u4efb\u4f55\u8bd5\u63a2\u6027\u7684\u8c08\u8bdd\u90fd\u65e0\u6cd5\u4ecb\u5165\u3002\u9762\u5bf9\u5916\u4eba\uff0c\u603b\u662f\u4f1a\u6709\u6240\u9690\u7792\u3002\u81ea\u6211\u53cd\u601d\u7684\u65f6\u5019\uff0c\u9700\u8981\u505a\u4e00\u4e9b\u5c0f\u5c0f\u7684\u7814\u7a76\uff0c\u66f4\u8981\u6781\u5ea6\u7684\u5411\u81ea\u5df1\u655e\u5f00\u81ea\u5df1\u3002\u5f53\u7136\uff0c\u4e5f\u4f1a\u5b58\u5728\u4e00\u4e9b\u7ec6\u5fae\u7684\u3001\u65e0\u6cd5\u4f53\u5bdf\u7684\u7279\u5f81\uff0c\u5c31\u53ea\u80fd\u7559\u7ed9\u672a\u6765\u4e86\u3002","title":"\u4e8c"},{"location":"posts/2018-02-07-ANU%E6%9A%91%E6%9C%9F%E5%AD%A6%E6%A0%A1-%E5%B0%BE%E5%A3%B0/#_3","text":"\u56de\u5230\u719f\u6089\u7684\u73af\u5883\uff0c\u4f2a\u88c5\u4fbf\u56de\u6765\u4e86\u3002\u4f60\u53c8\u53d8\u6210\u4e86\u90a3\u4e2a\u522b\u4eba\u719f\u6089\u7684\u4f60\uff0c\u662fA\u7684\u5b69\u5b50\uff0c\u662fB\u7684\u540c\u5b66\uff0c\u662fC\u7684\u597d\u670b\u53cb\u3002\u6234\u7740\u4e0d\u540c\u7684\u9762\u5177\uff0c\u5728\u4e0d\u540c\u89d2\u8272\u4e4b\u95f4\u5207\u6362\uff0c\u8868\u73b0\u4f60\u4e00\u8d2f\u7684\u98ce\u91c7\u548c\u7ef0\u7ea6\u3002 \u771f\u7684\u81ea\u5df1\u5728\u54ea\u91cc\u5462\uff1f\u5728\u957f\u65f6\u95f4\u7684\u9762\u5177\u4e4b\u4e0b\u5462\uff1f\u8fd8\u662f\u5728\u77ed\u6682\u7684\u62bd\u79bb\u4e4b\u4e2d\u5462\uff1f \u65e0\u8bba\u5982\u4f55\uff0c\u90fd\u8981\u8fc7\u5f97\u5e78\u798f\u3002","title":"\u4e09"},{"location":"posts/2018-02-07-ANU%E6%9A%91%E6%9C%9F%E5%AD%A6%E6%A0%A1-%E7%94%9F%E6%B4%BB%E5%92%8C%E5%B7%A5%E4%BD%9C/","text":"ANU\u6691\u671f\u5b66\u6821-\u751f\u6d3b\u548c\u5de5\u4f5c # \u4e00 # \u5728\u8fd9\u91cc\u6211\u6240\u5b9a\u4e49\u7684\u751f\u6d3b\u548c\u5de5\u4f5c\u90fd\u662f\u7eaf\u7cb9\u7684\u3002\u4e4b\u6240\u4ee5\u8981\u5b9a\u4e49\u8fd9\u4e24\u79cd\u751f\u5b58\u72b6\u6001\u662f\u56e0\u4e3a\u6211\u5e38\u5e38\u4f1a\u5728\u5e73\u8861\u4e2d\u9677\u5165\u4e00\u65b9\uff0c\u7d22\u6027\u5b9a\u4e49\u4e24\u79cd\u7eaf\u7cb9\u7684\u6982\u5ff5\uff0c\u4ee5\u4fbf\u533a\u5206\u3002 \u4e8c # \u751f\u6d3b\u4fbf\u662f\u6ca1\u6709\u5de5\u4f5c\uff0c\u5de5\u4f5c\u4fbf\u662f\u6ca1\u6709\u751f\u6d3b\u3002 \u6211\u5f88\u5bb9\u6613\u5728\u751f\u6d3b\u4e2d\u8ff7\u5931\uff0c\u81ea\u4ee5\u4e3a\u4eba\u751f\u5c31\u662f\u751f\u6d3b\u7684\u6837\u5b50\uff0c\u662f\u7eaf\u7cb9\u7684\u611f\u53d7\u7684\u72b6\u6001\u3002\u5728\u8fd9\u79cd\u72b6\u6001\u91cc\uff0c\u4f60\u65e0\u9700\u89e3\u91ca\uff0c\u4f60\u5e26\u6765\u7684\u5c31\u662f\u4e00\u5207\u7f8e\u3002\u8fd9\u4e5f\u8574\u542b\u7740\u5931\u63a7\u7684\u98ce\u9669\uff0c\u5f88\u5bb9\u6613\u9020\u6210\u60c5\u611f\u548c\u7cbe\u795e\u5d29\u6e83\uff0c\u8868\u73b0\u4e3a\u60c5\u611f\u7684\u6063\u610f\u8868\u8fbe\u548c\u6b32\u671b\u7684\u65e0\u9650\u81a8\u80c0\u3002\u5f80\u5f80\u9700\u8981\u4e00\u6761\u6e20\u9053\u6765\u53d1\u6cc4\uff0c\u540c\u65f6\u8fd9\u6761\u6e20\u9053\u4e5f\u8d77\u5230\u4e86\u4f11\u6b62\u7b26\u7684\u4f5c\u7528\uff0c\u8ba9\u81ea\u5df1\u5728\u6b32\u671b\u4e0e\u73b0\u5b9e\u7684\u7d27\u5f20\u5173\u7cfb\u4e2d\u5f97\u5230\u653e\u677e\uff0c\u751a\u81f3\u89e3\u8131\u3002\u6211\u53d1\u73b0\u8fd9\u6761\u6e20\u9053\u5c31\u662f\u5199\u4f5c\u3002\u5199\u4f5c\u5f80\u5f80\u80fd\u4e00\u6b21\u6027\u5730\u5378\u7a7a\u6700\u8fd1\u4e00\u6bb5\u65f6\u95f4\u7684\u60c5\u7eea\uff0c\u8ba9\u4eba\u91cd\u65b0\u53d8\u6210\u4e00\u5757\u513f\u5e72\u71e5\u7684\u6d77\u7ef5\u3002\u5728\u5c1a\u672a\u5f00\u59cb\u6c72\u53d6\u6c34\u5206\u7684\u65f6\u5019\uff0c\u53ca\u65f6\u5730\u5207\u6362\u5230\u5de5\u4f5c\u72b6\u6001\u4e2d\u3002\u8fd9\u662f\u6781\u5176\u7406\u60f3\u7684\u72b6\u6001\uff0c\u56e0\u4e3a\u5728\u4e8b\u60c5\u7684\u5f00\u7aef\u505a\u51b3\u5b9a\uff0c\u603b\u662f\u4e0d\u4f1a\u53d7\u8bf8\u591a\u65e2\u5b9a\u56e0\u7d20\u7275\u7eca\u3002\u8fd9\u6837\u4e5f\u5c31\u514d\u4e8e\u8ff7\u5931\u5728\u751f\u6d3b\u4e4b\u4e2d\uff0c\u514d\u4e8e\u6df1\u9677\u75db\u82e6\u523b\u523b\u707c\u5fc3\u3002 \u5f53\u7136\uff0c\u6211\u4e5f\u5bb9\u6613\u8ff7\u5931\u5728\u5de5\u4f5c\u4e4b\u4e2d\uff0c\u81ea\u4ee5\u4e3a\u4eba\u751f\u8be5\u662f\u5de5\u4f5c\u7684\u6837\u5b50\u3002\u5de5\u4f5c\u65f6\u5019\uff0c\u662f\u7eaf\u7cb9\u7684\u81ea\u6211\u5b9e\u73b0\u7684\u72b6\u6001\u2014\u2014\u5728\u4e0d\u65ad\u7684\u6c72\u53d6\u77e5\u8bc6\u548c\u6280\u80fd\u3001\u8fbe\u6210\u76ee\u6807\u3001\u521b\u9020\u4ef7\u503c\u7684\u8fc7\u7a0b\u4e2d\u5b9e\u73b0\u81ea\u6211\u3002\u751f\u6d3b\u4f3c\u9759\u79cb\u4e4b\u6c34\uff0c\u5de5\u4f5c\u4f3c\u590f\u82b1\u7eda\u70c2\u3002\u5de5\u4f5c\u4e5f\u662f\u4e00\u79cd\u8fd0\u52a8\uff0c\u6bd4\u8f83\u8d77\u6765\u66f4\u50cf\u662f\u745c\u4f3d\u3002\u5de5\u4f5c\u5728\u67d0\u79cd\u5c42\u9762\u4e0a\u53c8\u8ba9\u4eba\u6210\u763e\uff0c\u4e0d\u7ba1\u662f\u5916\u90e8\u7763\u4fc3\uff0c\u8fd8\u662f\u5185\u751f\u7684\u8d23\u4efb\u611f\uff0c\u5de5\u4f5c\u8d77\u6765\u4fbf\u505c\u4e0d\u4f4f\u3002\u6240\u8c13\u8ff7\u5931\uff0c\u5c31\u662f\u65e5\u590d\u4e00\u65e5\u7684\u5de5\u4f5c\u65f6\u95f4\u5bf9\u751f\u6d3b\u65f6\u95f4\u7684\u4fb5\u5165\uff0c\u6700\u7ec8\u5219\u51e0\u8fd1\u5b8c\u5168\u5360\u636e\uff0c\u662f\u8ff7\u5931\u5728\u65f6\u95f4\u4e2d\u4e86\u3002\u53ef\u662f\uff0c\u53c8\u600e\u4e48\u89e3\u8131\u51fa\u6765\u5462\uff1f","title":"ANU\u6691\u671f\u5b66\u6821-\u751f\u6d3b\u548c\u5de5\u4f5c"},{"location":"posts/2018-02-07-ANU%E6%9A%91%E6%9C%9F%E5%AD%A6%E6%A0%A1-%E7%94%9F%E6%B4%BB%E5%92%8C%E5%B7%A5%E4%BD%9C/#anu-","text":"","title":"ANU\u6691\u671f\u5b66\u6821-\u751f\u6d3b\u548c\u5de5\u4f5c"},{"location":"posts/2018-02-07-ANU%E6%9A%91%E6%9C%9F%E5%AD%A6%E6%A0%A1-%E7%94%9F%E6%B4%BB%E5%92%8C%E5%B7%A5%E4%BD%9C/#_1","text":"\u5728\u8fd9\u91cc\u6211\u6240\u5b9a\u4e49\u7684\u751f\u6d3b\u548c\u5de5\u4f5c\u90fd\u662f\u7eaf\u7cb9\u7684\u3002\u4e4b\u6240\u4ee5\u8981\u5b9a\u4e49\u8fd9\u4e24\u79cd\u751f\u5b58\u72b6\u6001\u662f\u56e0\u4e3a\u6211\u5e38\u5e38\u4f1a\u5728\u5e73\u8861\u4e2d\u9677\u5165\u4e00\u65b9\uff0c\u7d22\u6027\u5b9a\u4e49\u4e24\u79cd\u7eaf\u7cb9\u7684\u6982\u5ff5\uff0c\u4ee5\u4fbf\u533a\u5206\u3002","title":"\u4e00"},{"location":"posts/2018-02-07-ANU%E6%9A%91%E6%9C%9F%E5%AD%A6%E6%A0%A1-%E7%94%9F%E6%B4%BB%E5%92%8C%E5%B7%A5%E4%BD%9C/#_2","text":"\u751f\u6d3b\u4fbf\u662f\u6ca1\u6709\u5de5\u4f5c\uff0c\u5de5\u4f5c\u4fbf\u662f\u6ca1\u6709\u751f\u6d3b\u3002 \u6211\u5f88\u5bb9\u6613\u5728\u751f\u6d3b\u4e2d\u8ff7\u5931\uff0c\u81ea\u4ee5\u4e3a\u4eba\u751f\u5c31\u662f\u751f\u6d3b\u7684\u6837\u5b50\uff0c\u662f\u7eaf\u7cb9\u7684\u611f\u53d7\u7684\u72b6\u6001\u3002\u5728\u8fd9\u79cd\u72b6\u6001\u91cc\uff0c\u4f60\u65e0\u9700\u89e3\u91ca\uff0c\u4f60\u5e26\u6765\u7684\u5c31\u662f\u4e00\u5207\u7f8e\u3002\u8fd9\u4e5f\u8574\u542b\u7740\u5931\u63a7\u7684\u98ce\u9669\uff0c\u5f88\u5bb9\u6613\u9020\u6210\u60c5\u611f\u548c\u7cbe\u795e\u5d29\u6e83\uff0c\u8868\u73b0\u4e3a\u60c5\u611f\u7684\u6063\u610f\u8868\u8fbe\u548c\u6b32\u671b\u7684\u65e0\u9650\u81a8\u80c0\u3002\u5f80\u5f80\u9700\u8981\u4e00\u6761\u6e20\u9053\u6765\u53d1\u6cc4\uff0c\u540c\u65f6\u8fd9\u6761\u6e20\u9053\u4e5f\u8d77\u5230\u4e86\u4f11\u6b62\u7b26\u7684\u4f5c\u7528\uff0c\u8ba9\u81ea\u5df1\u5728\u6b32\u671b\u4e0e\u73b0\u5b9e\u7684\u7d27\u5f20\u5173\u7cfb\u4e2d\u5f97\u5230\u653e\u677e\uff0c\u751a\u81f3\u89e3\u8131\u3002\u6211\u53d1\u73b0\u8fd9\u6761\u6e20\u9053\u5c31\u662f\u5199\u4f5c\u3002\u5199\u4f5c\u5f80\u5f80\u80fd\u4e00\u6b21\u6027\u5730\u5378\u7a7a\u6700\u8fd1\u4e00\u6bb5\u65f6\u95f4\u7684\u60c5\u7eea\uff0c\u8ba9\u4eba\u91cd\u65b0\u53d8\u6210\u4e00\u5757\u513f\u5e72\u71e5\u7684\u6d77\u7ef5\u3002\u5728\u5c1a\u672a\u5f00\u59cb\u6c72\u53d6\u6c34\u5206\u7684\u65f6\u5019\uff0c\u53ca\u65f6\u5730\u5207\u6362\u5230\u5de5\u4f5c\u72b6\u6001\u4e2d\u3002\u8fd9\u662f\u6781\u5176\u7406\u60f3\u7684\u72b6\u6001\uff0c\u56e0\u4e3a\u5728\u4e8b\u60c5\u7684\u5f00\u7aef\u505a\u51b3\u5b9a\uff0c\u603b\u662f\u4e0d\u4f1a\u53d7\u8bf8\u591a\u65e2\u5b9a\u56e0\u7d20\u7275\u7eca\u3002\u8fd9\u6837\u4e5f\u5c31\u514d\u4e8e\u8ff7\u5931\u5728\u751f\u6d3b\u4e4b\u4e2d\uff0c\u514d\u4e8e\u6df1\u9677\u75db\u82e6\u523b\u523b\u707c\u5fc3\u3002 \u5f53\u7136\uff0c\u6211\u4e5f\u5bb9\u6613\u8ff7\u5931\u5728\u5de5\u4f5c\u4e4b\u4e2d\uff0c\u81ea\u4ee5\u4e3a\u4eba\u751f\u8be5\u662f\u5de5\u4f5c\u7684\u6837\u5b50\u3002\u5de5\u4f5c\u65f6\u5019\uff0c\u662f\u7eaf\u7cb9\u7684\u81ea\u6211\u5b9e\u73b0\u7684\u72b6\u6001\u2014\u2014\u5728\u4e0d\u65ad\u7684\u6c72\u53d6\u77e5\u8bc6\u548c\u6280\u80fd\u3001\u8fbe\u6210\u76ee\u6807\u3001\u521b\u9020\u4ef7\u503c\u7684\u8fc7\u7a0b\u4e2d\u5b9e\u73b0\u81ea\u6211\u3002\u751f\u6d3b\u4f3c\u9759\u79cb\u4e4b\u6c34\uff0c\u5de5\u4f5c\u4f3c\u590f\u82b1\u7eda\u70c2\u3002\u5de5\u4f5c\u4e5f\u662f\u4e00\u79cd\u8fd0\u52a8\uff0c\u6bd4\u8f83\u8d77\u6765\u66f4\u50cf\u662f\u745c\u4f3d\u3002\u5de5\u4f5c\u5728\u67d0\u79cd\u5c42\u9762\u4e0a\u53c8\u8ba9\u4eba\u6210\u763e\uff0c\u4e0d\u7ba1\u662f\u5916\u90e8\u7763\u4fc3\uff0c\u8fd8\u662f\u5185\u751f\u7684\u8d23\u4efb\u611f\uff0c\u5de5\u4f5c\u8d77\u6765\u4fbf\u505c\u4e0d\u4f4f\u3002\u6240\u8c13\u8ff7\u5931\uff0c\u5c31\u662f\u65e5\u590d\u4e00\u65e5\u7684\u5de5\u4f5c\u65f6\u95f4\u5bf9\u751f\u6d3b\u65f6\u95f4\u7684\u4fb5\u5165\uff0c\u6700\u7ec8\u5219\u51e0\u8fd1\u5b8c\u5168\u5360\u636e\uff0c\u662f\u8ff7\u5931\u5728\u65f6\u95f4\u4e2d\u4e86\u3002\u53ef\u662f\uff0c\u53c8\u600e\u4e48\u89e3\u8131\u51fa\u6765\u5462\uff1f","title":"\u4e8c"},{"location":"posts/2018-03-08-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E4%B8%80%E5%A4%A9/","text":"\u5728\u676d\u5dde\u7684100\u5929-\u7b2c\u4e00\u5929 # \u7b2c\u4e00\u5929 # \u8fd9\u662f\u6211\u7b2c\u4e09\u6b21\u8d76\u8d74\u676d\u5dde\u3002\u7b2c\u4e00\u6b21\u662f2016\u5e74\u7684\u7aef\u5348\u201c\u51fa\u8d70\u201d\uff0c\u8fd9\u4e00\u6b21\u201c\u51fa\u8d70\u201d\u662f\u4e3a\u81ea\u5df1\u201c\u5fd9\u788c\u201c\u7684\u5927\u5b66\u751f\u6d3b\u7684\u7292\u8d4f\uff1b\u4ea6\u662f\u642c\u79bb\u826f\u4e61\u540e\u6323\u624e\u7684\u65e5\u5b50\u524d\u7684\u6700\u540e\u4e00\u6b21\u8fdc\u884c\uff08\u4e5f\u662f\u552f\u4e00\u4e00\u6b21\uff09\u3002\u7b2c\u4e8c\u6b21\u4fbf\u662f2017\u5e74\u7684\u6691\u5047\uff0c\u8fd9\u4e00\u6b21\u6211\u6218\u6218\u5162\u5162\u5730\u6765\u53c2\u52a0\u6d59\u6c5f\u5927\u5b66\u7684\u590f\u4ee4\u8425\uff0c\u751f\u6015\u8fd9\u6765\u4e4b\u4e0d\u6613\u7684\u673a\u4f1a\u6e9c\u8d70\u3002\u8fd9\u4e00\u6b21\uff0c2018\u5e743\u67083\u65e5\uff0c\u6211\u4eca\u665a\u4ece\u54c8\u5c14\u6ee8\u51fa\u53d1\uff0c\u53bb\u6d59\u6c5f\u5927\u5b66\u5b8c\u6210\u6211\u7684\u6bd5\u4e1a\u8bbe\u8ba1\u3002 \u51fa\u8d70\uff0c\u662f\u70d9\u5728\u6211\u8eab\u4e0a\u7684\u4e00\u751f\u7684\u6325\u4e4b\u4e0d\u53bb\u7684\u5370\u8bb0\u3002 \u54c8\u897f\u706b\u8f66\u7ad9\u6211\u5df2\u7ecf\u6765\u4e86\u8bb8\u591a\u6b21\u4e86\uff0c\u8fd9\u6b21\u8d76\u4e0a\u4e86\u7279\u6b8a\u7684\u54c8\u897f\u2014\u2014\u4ece\u672a\u4f53\u9a8c\u8fc7\u7684\u5165\u7ad9\u4e24\u68c0\uff0c\u4ee5\u53ca\u5bf9\u4e58\u5750\u5f00\u5f80\u5317\u4eac\u7684\u5217\u8f66\u7684\u4e58\u5ba2\u7684\u5dee\u522b\u5bf9\u5f85\u3002\u4e00\u5207\u5200\u5177\u3001\u706b\u6e90\u3001\u52a9\u71c3\u5242\u90fd\u8981\u4e3b\u52a8\u4ea4\u51fa\u6765\u3002\u5019\u8f66\u533a\u57df\u88ab\u56f4\u4e86\u8d77\u6765\uff0c\u6211\u4eec\u5728\u5916\u9762\u6392\u4e86\u4e24\u6761\u957f\u961f\uff0c\u53c8\u9047\u5230\u4e86\u518d\u4e00\u6b21\u7684\u91d1\u5c5e\u63a2\u6d4b\u548c\u968f\u673a\u5f00\u5305\u68c0\u67e5\u3002\u6211\u548cS\u541b\u987a\u5229\u7684\u901a\u8fc7\u4e86\u91d1\u5c5e\u63a2\u6d4b\uff0c\u6b63\u5c0f\u6b65\u8d76\u4e0a\u5df2\u8fdb\u7ad9\u7684\u4e58\u5ba2\uff0cY\u541b\u5374\u88ab\u53eb\u4f4f\uff0c\u5b89\u68c0\u4eba\u5458\u5f00\u59cb\u4e00\u70b9\u4e00\u70b9\u5730\u67e5\u770b\u5979\u7684\u65c5\u884c\u7bb1\u548c\u80cc\u5305\u4e86\u3002\u67e5\u51fa\u6765\u7684\u4e0d\u8fc7\u662f\u4fee\u7709\u5200\u4e4b\u7c7b\u7684\uff0c\u6211\u5e76\u4e0d\u8bb0\u5f97\u5f88\u6e05\u695a\u3002\u6211\u8bb0\u5f97\u6700\u6e05\u695a\u7684\u662f\u5979\u4e0e\u7537\u670b\u53cb\u95f4\u7684\u60dc\u522b\uff0c\u4e00\u53bb\u5343\u91cc\uff0c\u7adf\u6709\u4e9b\u6df1\u60c5\u4e0e\u51dd\u564e\u4e86\u3002\u8d70\u4e86\uff01 \u6211\u6709\u4e9b\u559c\u6b22\u54c8\u5c14\u6ee8\u8fd9\u4e2a\u57ce\u5e02\u4e86\u3002\u8fd9\u4e00\u6b21\uff0c\u6211\u5728\u8fd9\u5df2\u7ecf\u5f85\u4e8610\u5929\uff0c\u662f\u6700\u4e45\u7684\u4e00\u6b21\u3002\u4e0a\u4e16\u7eaa\u521d\u7684\u56fd\u9645\u5927\u90fd\u5e02\u4ecd\u7136\u5728\u8f7b\u76c8\u7684\u767d\u8863\u4e0b\u6563\u53d1\u7740\u5f02\u56fd\u98ce\u60c5\uff1b\u51b0\u57ce\u54c8\u5c14\u6ee8\uff0c\u4ecd\u7136\u5728\u7199\u7199\u6518\u6518\u7684\u4eba\u7fa4\u4e2d\u751f\u6d3b\u7740\u3002\u8fd9\u91cc\u7684\u5efa\u7b51\u7ba1\u4ed6\u662f\u4fdd\u7559\u7684\u8fd8\u662f\u91cd\u5efa\u7684\uff0c\u90fd\u786c\u751f\u751f\u7684\u628a\u54c8\u5c14\u6ee8\u8fd9\u5ea7\u57ce\u5e02\u7684\u5386\u53f2\u5ba3\u8bb2\u7740\uff0c\u5728\u4e2d\u592e\u5927\u8857\u7684\u671b\u4e0d\u5c3d\u7684\u5a5a\u7eb1\u62d6\u5c3e\u91cc\uff0c\u5fc3\u52a8\u548c\u60cb\u60dc\u5e76\u5b58\u3002 \u8d70\u4e86\uff01 \u706b\u8f66\u5df2\u7ecf\u5f00\u51fa\u54c8\u5c14\u6ee8\uff0c\u5165\u5173\u4fbf\u7531\u5510\u5c71\u6298\u5411\u5317\u4eac\u57ce\u3002\u8f66\u4e0a\u4eba\u4e0d\u662f\u6700\u591a\u7684\u60c5\u5f62\uff0c\u5eca\u9053\u4e0a\u6709\u4eba\u5750\u7740\u5c0f\u51f3\u7761\u89c9\u3001\u6709\u4eba\u65e0\u5ea7\u53c8\u6ca1\u51f3\u5b50\u4fbf\u7ad9\u7740\u3002\u5217\u8f66\u5458\u63a8\u7740\u7684\u98df\u54c1\u548c\u996e\u6c34\u8f66\u8fc7\u6765\u4e86\uff0c\u5927\u5bb6\u5c31\u90fd\u772f\u7740\u773c\u775b\u8d77\u6765\u8ba9\u3002\u6ca1\u6709\u4eba\u89c9\u5f97\u90a3\u5217\u8f66\u5458\u7684\u55d3\u95e8\u5927\uff0c\u4e5f\u6ca1\u6709\u4eba\u89c9\u5f97\u5217\u8f66\u4e0a\u7684\u8d27\u54c1\u8d35\uff0c\u4e5f\u6ca1\u6709\u4eba\u89c9\u5f97\u5728\u5217\u8f66\u4e0a\u7684\u8c08\u8bdd\u8981\u907f\u7740\u4eba\u3002\u706b\u8f66\u4e0a\uff0c\u4e0d\u8fc7\u662f\u4f60\u89c1\u4e86\u6211\uff0c\u6211\u89c1\u4e86\u4f60\uff0c\u6211\u8bf4\u4e86\u4ec0\u4e48\uff0c\u4f60\u53c8\u8bf4\u4e86\u4ec0\u4e48\uff0c\u4e0b\u4e86\u8f66\uff0c\u5c31\u90fd\u7559\u5728\u8f66\u53a2\u91cc\u968f\u5b83\u53bb\u4e86\u3002 S\u541b\u5728\u7761\u89c9\uff0c\u6211\u4e0eY\u541b\u804a\u5230\u540e\u534a\u591c\u4fbf\u90fd\u6df7\u6df7\u7761\u53bb\u3002\u8c08\u5230\u6700\u540e\uff0c\u58f0\u97f3\u4e5f\u542c\u4e0d\u89c1\u4e86\uff0c\u773c\u775b\u4e5f\u7741\u4e0d\u5f00\u4e86\uff0c\u5934\u8037\u62c9\u7740\u3002\u624b\u652f\u6491\u8d77\u81ea\u5df1\u4ee5\u4fbf\u627e\u5230\u4e00\u4e2a\u597d\u7684\u59ff\u52bf\u4f11\u606f\uff0c\u5373\u4fbf\u662f\u786c\u5ea7\uff0c\u4e5f\u8981\u627e\u4e00\u4e2a\u597d\u7684\u59ff\u52bf\u4f11\u606f\u3002Y\u541b\u6216\u8981\u8d74\u897f\u5317\u53bb\uff0c\u6709\u4e86\u7231\u4eba\u4fbf\u6709\u4e86\u4e00\u5207\u3002 \u4e4b\u524d\uff0c\u4e0e\u51e0\u4f4d\u670b\u53cb\u505a\u4e86\u6700\u540e\u7684\u9053\u522b\u3002\u4eba\u548c\u4eba\u4e4b\u95f4\u7684\u60c5\u611f\u53ea\u5269\u4e0b\u53ea\u8a00\u7247\u8bed\u7684\u65f6\u5019\uff0c\u4fbf\u8981\u7528\u773c\u795e\u4ea4\u6d41\uff0c\u4fbf\u8981\u7528\u80a2\u4f53\u4ea4\u6d41\u3002\u62e5\u62b1\u4f60\u7231\u7684\u4eba\uff0c\u76ee\u9001\u4f60\u5ba0\u7684\u4eba\uff0c\u4fbf\u6bd4\u4ec0\u4e48\u6d77\u8a93\u5c71\u76df\u66f4\u6709\u522b\u6837\u7684\u6ecb\u5473\u4e86\u3002\u6216\u8bb8\u518d\u89c1\uff0c\u6216\u8bb8\u518d\u4e5f\u4e0d\u89c1\uff0c\u8d70\u4e86\uff01 \u6668\u81f3\u5317\u4eac\u7ad9\uff0c\u6211\u4eec\u4e09\u4eba\u8f97\u8f6c\u5230\u5317\u4eac\u5357\uff0c\u5403\u4e86\u65e9\u996d\uff0c\u7ec8\u8e0f\u4e0a\u5f00\u5f80\u676d\u5dde\u7684\u706b\u8f66\u3002","title":"\u5728\u676d\u5dde\u7684100\u5929-\u7b2c\u4e00\u5929"},{"location":"posts/2018-03-08-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E4%B8%80%E5%A4%A9/#100-","text":"","title":"\u5728\u676d\u5dde\u7684100\u5929-\u7b2c\u4e00\u5929"},{"location":"posts/2018-03-08-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E4%B8%80%E5%A4%A9/#_1","text":"\u8fd9\u662f\u6211\u7b2c\u4e09\u6b21\u8d76\u8d74\u676d\u5dde\u3002\u7b2c\u4e00\u6b21\u662f2016\u5e74\u7684\u7aef\u5348\u201c\u51fa\u8d70\u201d\uff0c\u8fd9\u4e00\u6b21\u201c\u51fa\u8d70\u201d\u662f\u4e3a\u81ea\u5df1\u201c\u5fd9\u788c\u201c\u7684\u5927\u5b66\u751f\u6d3b\u7684\u7292\u8d4f\uff1b\u4ea6\u662f\u642c\u79bb\u826f\u4e61\u540e\u6323\u624e\u7684\u65e5\u5b50\u524d\u7684\u6700\u540e\u4e00\u6b21\u8fdc\u884c\uff08\u4e5f\u662f\u552f\u4e00\u4e00\u6b21\uff09\u3002\u7b2c\u4e8c\u6b21\u4fbf\u662f2017\u5e74\u7684\u6691\u5047\uff0c\u8fd9\u4e00\u6b21\u6211\u6218\u6218\u5162\u5162\u5730\u6765\u53c2\u52a0\u6d59\u6c5f\u5927\u5b66\u7684\u590f\u4ee4\u8425\uff0c\u751f\u6015\u8fd9\u6765\u4e4b\u4e0d\u6613\u7684\u673a\u4f1a\u6e9c\u8d70\u3002\u8fd9\u4e00\u6b21\uff0c2018\u5e743\u67083\u65e5\uff0c\u6211\u4eca\u665a\u4ece\u54c8\u5c14\u6ee8\u51fa\u53d1\uff0c\u53bb\u6d59\u6c5f\u5927\u5b66\u5b8c\u6210\u6211\u7684\u6bd5\u4e1a\u8bbe\u8ba1\u3002 \u51fa\u8d70\uff0c\u662f\u70d9\u5728\u6211\u8eab\u4e0a\u7684\u4e00\u751f\u7684\u6325\u4e4b\u4e0d\u53bb\u7684\u5370\u8bb0\u3002 \u54c8\u897f\u706b\u8f66\u7ad9\u6211\u5df2\u7ecf\u6765\u4e86\u8bb8\u591a\u6b21\u4e86\uff0c\u8fd9\u6b21\u8d76\u4e0a\u4e86\u7279\u6b8a\u7684\u54c8\u897f\u2014\u2014\u4ece\u672a\u4f53\u9a8c\u8fc7\u7684\u5165\u7ad9\u4e24\u68c0\uff0c\u4ee5\u53ca\u5bf9\u4e58\u5750\u5f00\u5f80\u5317\u4eac\u7684\u5217\u8f66\u7684\u4e58\u5ba2\u7684\u5dee\u522b\u5bf9\u5f85\u3002\u4e00\u5207\u5200\u5177\u3001\u706b\u6e90\u3001\u52a9\u71c3\u5242\u90fd\u8981\u4e3b\u52a8\u4ea4\u51fa\u6765\u3002\u5019\u8f66\u533a\u57df\u88ab\u56f4\u4e86\u8d77\u6765\uff0c\u6211\u4eec\u5728\u5916\u9762\u6392\u4e86\u4e24\u6761\u957f\u961f\uff0c\u53c8\u9047\u5230\u4e86\u518d\u4e00\u6b21\u7684\u91d1\u5c5e\u63a2\u6d4b\u548c\u968f\u673a\u5f00\u5305\u68c0\u67e5\u3002\u6211\u548cS\u541b\u987a\u5229\u7684\u901a\u8fc7\u4e86\u91d1\u5c5e\u63a2\u6d4b\uff0c\u6b63\u5c0f\u6b65\u8d76\u4e0a\u5df2\u8fdb\u7ad9\u7684\u4e58\u5ba2\uff0cY\u541b\u5374\u88ab\u53eb\u4f4f\uff0c\u5b89\u68c0\u4eba\u5458\u5f00\u59cb\u4e00\u70b9\u4e00\u70b9\u5730\u67e5\u770b\u5979\u7684\u65c5\u884c\u7bb1\u548c\u80cc\u5305\u4e86\u3002\u67e5\u51fa\u6765\u7684\u4e0d\u8fc7\u662f\u4fee\u7709\u5200\u4e4b\u7c7b\u7684\uff0c\u6211\u5e76\u4e0d\u8bb0\u5f97\u5f88\u6e05\u695a\u3002\u6211\u8bb0\u5f97\u6700\u6e05\u695a\u7684\u662f\u5979\u4e0e\u7537\u670b\u53cb\u95f4\u7684\u60dc\u522b\uff0c\u4e00\u53bb\u5343\u91cc\uff0c\u7adf\u6709\u4e9b\u6df1\u60c5\u4e0e\u51dd\u564e\u4e86\u3002\u8d70\u4e86\uff01 \u6211\u6709\u4e9b\u559c\u6b22\u54c8\u5c14\u6ee8\u8fd9\u4e2a\u57ce\u5e02\u4e86\u3002\u8fd9\u4e00\u6b21\uff0c\u6211\u5728\u8fd9\u5df2\u7ecf\u5f85\u4e8610\u5929\uff0c\u662f\u6700\u4e45\u7684\u4e00\u6b21\u3002\u4e0a\u4e16\u7eaa\u521d\u7684\u56fd\u9645\u5927\u90fd\u5e02\u4ecd\u7136\u5728\u8f7b\u76c8\u7684\u767d\u8863\u4e0b\u6563\u53d1\u7740\u5f02\u56fd\u98ce\u60c5\uff1b\u51b0\u57ce\u54c8\u5c14\u6ee8\uff0c\u4ecd\u7136\u5728\u7199\u7199\u6518\u6518\u7684\u4eba\u7fa4\u4e2d\u751f\u6d3b\u7740\u3002\u8fd9\u91cc\u7684\u5efa\u7b51\u7ba1\u4ed6\u662f\u4fdd\u7559\u7684\u8fd8\u662f\u91cd\u5efa\u7684\uff0c\u90fd\u786c\u751f\u751f\u7684\u628a\u54c8\u5c14\u6ee8\u8fd9\u5ea7\u57ce\u5e02\u7684\u5386\u53f2\u5ba3\u8bb2\u7740\uff0c\u5728\u4e2d\u592e\u5927\u8857\u7684\u671b\u4e0d\u5c3d\u7684\u5a5a\u7eb1\u62d6\u5c3e\u91cc\uff0c\u5fc3\u52a8\u548c\u60cb\u60dc\u5e76\u5b58\u3002 \u8d70\u4e86\uff01 \u706b\u8f66\u5df2\u7ecf\u5f00\u51fa\u54c8\u5c14\u6ee8\uff0c\u5165\u5173\u4fbf\u7531\u5510\u5c71\u6298\u5411\u5317\u4eac\u57ce\u3002\u8f66\u4e0a\u4eba\u4e0d\u662f\u6700\u591a\u7684\u60c5\u5f62\uff0c\u5eca\u9053\u4e0a\u6709\u4eba\u5750\u7740\u5c0f\u51f3\u7761\u89c9\u3001\u6709\u4eba\u65e0\u5ea7\u53c8\u6ca1\u51f3\u5b50\u4fbf\u7ad9\u7740\u3002\u5217\u8f66\u5458\u63a8\u7740\u7684\u98df\u54c1\u548c\u996e\u6c34\u8f66\u8fc7\u6765\u4e86\uff0c\u5927\u5bb6\u5c31\u90fd\u772f\u7740\u773c\u775b\u8d77\u6765\u8ba9\u3002\u6ca1\u6709\u4eba\u89c9\u5f97\u90a3\u5217\u8f66\u5458\u7684\u55d3\u95e8\u5927\uff0c\u4e5f\u6ca1\u6709\u4eba\u89c9\u5f97\u5217\u8f66\u4e0a\u7684\u8d27\u54c1\u8d35\uff0c\u4e5f\u6ca1\u6709\u4eba\u89c9\u5f97\u5728\u5217\u8f66\u4e0a\u7684\u8c08\u8bdd\u8981\u907f\u7740\u4eba\u3002\u706b\u8f66\u4e0a\uff0c\u4e0d\u8fc7\u662f\u4f60\u89c1\u4e86\u6211\uff0c\u6211\u89c1\u4e86\u4f60\uff0c\u6211\u8bf4\u4e86\u4ec0\u4e48\uff0c\u4f60\u53c8\u8bf4\u4e86\u4ec0\u4e48\uff0c\u4e0b\u4e86\u8f66\uff0c\u5c31\u90fd\u7559\u5728\u8f66\u53a2\u91cc\u968f\u5b83\u53bb\u4e86\u3002 S\u541b\u5728\u7761\u89c9\uff0c\u6211\u4e0eY\u541b\u804a\u5230\u540e\u534a\u591c\u4fbf\u90fd\u6df7\u6df7\u7761\u53bb\u3002\u8c08\u5230\u6700\u540e\uff0c\u58f0\u97f3\u4e5f\u542c\u4e0d\u89c1\u4e86\uff0c\u773c\u775b\u4e5f\u7741\u4e0d\u5f00\u4e86\uff0c\u5934\u8037\u62c9\u7740\u3002\u624b\u652f\u6491\u8d77\u81ea\u5df1\u4ee5\u4fbf\u627e\u5230\u4e00\u4e2a\u597d\u7684\u59ff\u52bf\u4f11\u606f\uff0c\u5373\u4fbf\u662f\u786c\u5ea7\uff0c\u4e5f\u8981\u627e\u4e00\u4e2a\u597d\u7684\u59ff\u52bf\u4f11\u606f\u3002Y\u541b\u6216\u8981\u8d74\u897f\u5317\u53bb\uff0c\u6709\u4e86\u7231\u4eba\u4fbf\u6709\u4e86\u4e00\u5207\u3002 \u4e4b\u524d\uff0c\u4e0e\u51e0\u4f4d\u670b\u53cb\u505a\u4e86\u6700\u540e\u7684\u9053\u522b\u3002\u4eba\u548c\u4eba\u4e4b\u95f4\u7684\u60c5\u611f\u53ea\u5269\u4e0b\u53ea\u8a00\u7247\u8bed\u7684\u65f6\u5019\uff0c\u4fbf\u8981\u7528\u773c\u795e\u4ea4\u6d41\uff0c\u4fbf\u8981\u7528\u80a2\u4f53\u4ea4\u6d41\u3002\u62e5\u62b1\u4f60\u7231\u7684\u4eba\uff0c\u76ee\u9001\u4f60\u5ba0\u7684\u4eba\uff0c\u4fbf\u6bd4\u4ec0\u4e48\u6d77\u8a93\u5c71\u76df\u66f4\u6709\u522b\u6837\u7684\u6ecb\u5473\u4e86\u3002\u6216\u8bb8\u518d\u89c1\uff0c\u6216\u8bb8\u518d\u4e5f\u4e0d\u89c1\uff0c\u8d70\u4e86\uff01 \u6668\u81f3\u5317\u4eac\u7ad9\uff0c\u6211\u4eec\u4e09\u4eba\u8f97\u8f6c\u5230\u5317\u4eac\u5357\uff0c\u5403\u4e86\u65e9\u996d\uff0c\u7ec8\u8e0f\u4e0a\u5f00\u5f80\u676d\u5dde\u7684\u706b\u8f66\u3002","title":"\u7b2c\u4e00\u5929"},{"location":"posts/2018-03-08-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E4%BA%8C%E5%A4%A9/","text":"\u5728\u676d\u5dde\u7684100\u5929-\u7b2c\u4e8c\u5929 # \u7b2c\u4e8c\u5929 # \u4eca\u5929\u624d\u771f\u6b63\u7684\u53c8\u56de\u5230\u4e86\u676d\u5dde\uff0c\u4eca\u5929\u624d\u662f\u7b2c\u4e00\u5929\u54e9\uff01 \u4ece\u5317\u4eac\u5230\u676d\u5dde\u7684\u9ad8\u94c1\u4e5f\u4e0d\u8fc76\u4e2a\u534a\u5c0f\u65f6\u7f62\u4e86\u3002\u4e00\u8def\u4e0a\uff0c\u6d41\u6c34\u6c60\u5858\u8d8a\u6765\u8d8a\u591a\uff0c\u51b0\u96ea\u4e4b\u4e8b\u65e9\u5c31\u5df2\u7ecf\u4e0d\u89c1\u4e86\u3002\u4e00\u65e5\u8fc7\u4e24\u5b63\uff0c\u4e00\u8def\u7779\u4e24\u666f\u3002\u73b0\u4ee3\u4eba\u5f97\u76ca\u4e8e\u5feb\u901f\u4ea4\u901a\uff0c\u5df2\u7ecf\u6709\u4e86\u8bb8\u591a\u524d\u4eba\u6240\u6ca1\u6709\u7684\u4f53\u9a8c\u3002\u54ea\u5412\u65e5\u884c\u4e09\u5343\u91cc\uff0c\u8fc7\u53bb\u90a3\u53ea\u662f\u795e\u8bdd\u4e2d\u7684\u60f3\u8c61\uff0c\u73b0\u5728\u65e5\u884c\u4e09\u4e07\u91cc\u4e5f\u4e0d\u662f\u6ca1\u6709\u53ef\u80fd\u3002\u4eba\u4eec\u7684\u8db3\u8ff9\u53ef\u4ee5\u904d\u5e03\u5927\u6c5f\u5357\u5317\uff0c\u4eba\u4eec\u7684\u80f8\u895f\u4ea6\u53ef\u4ee5\u6781\u5ea6\u7684\u8212\u5c55\u3002\u770b\u8fc7\u4e86\u7956\u56fd\u7684\u5927\u597d\u6cb3\u5c71\uff0c\u624d\u77e5\u9053\u98ce\u666f\u8fd9\u8fb9\u66f4\u597d\uff1b\u4e2d\u56fd\u6c38\u8fdc\u9002\u5408\u4e2d\u56fd\u4eba\u751f\u5b58\u3002 Y\u541b\u548cS\u541b\u7761\u5f97\u6c89\uff0c\u6211\u4e5f\u6709\u4e9b\u778c\u7761\u4e86\u3002\u8def\u8fc7\u6cf0\u5b89\uff0c\u4e0b\u8d77\u4e86\u5c0f\u96e8\u3002\u6709\u8da3\u7684\u662f\uff0c\u75be\u9a70\u7684\u5217\u8f66\u4f3c\u4e4e\u4e0e\u9f99\u738b\u505a\u4e86\u534f\u8bae\uff0c\u8981\u8001\u9f99\u738b\u4e13\u95e8\u6d17\u5237\u81ea\u5df1\u4e00\u4fa7\u7684\u7a97\u6237\u5462\uff0c\u53e6\u4e00\u4fa7\u5219\u5e72\u5e72\u7684\uff0c\u4e00\u5c18\u4e0d\u67d3\u7684\u3002 \u957f\u6c5f\u3002 \u592a\u6e56\u3002 \u676d\u5dde\u3002\u4e0b\u8f66\uff0c\u6b63\u8d76\u4e0a3\u6708\u6c14\u6e29\u56de\u6696\uff0c\u4eca\u5929\u53ef\u771f\u662f\u6625\u98ce\u548c\u7166\u4e86\u3002\u8fd9\u91cc\u6ca1\u6709\u7e41\u590d\u7684\u5b89\u68c0\uff0c\u4ece\u7ad9\u53f0\u51fa\u53bb\u4fbf\u76f4\u63a5\u53ef\u4ee5\u9009\u62e9\u516c\u5171\u4ea4\u901a\u6216\u8005\u6253\u7684\u3002Y\u541b\u7684\u670b\u53cb\u6765\u63a5\uff0c\u5174\u81f4\u52c3\u52c3\u7684\u8d70\u4e86\uff0cS\u541b\u8fd8\u8981\u8d76\u5230\u53e6\u4e00\u4e2a\u7ad9\u53f0\u4e0a\u8f66\u3002\u4e92\u76f8\u544a\u522b\u4e4b\u540e\uff0c\u6211\u81ea\u5df1\u4e5f\u5728\u676d\u5dde\u4e1c\u7ad9\u897f\u5e7f\u573a\u4e5828\u8def\u8f66\u8d70\u4e86\u3002 \u70ed\u7684\u51fa\u6c57\uff01 \u5230\u4e00\u4e2a\u4e2d\u5b66\u4e0b\u8f66\uff0c\u6cbf\u7740\u6d59\u5927\u8def\u5411\u897f\u884c\uff0c\u4fbf\u5230\u6d59\u5927\u7389\u6cc9\u6821\u533a\u3002\u6211\u5feb\u6b65\u4ece\u4e1c\u95e8\u8fdb\u5165\uff0c\u6298\u5411\u5357\uff0c\u53d6\u4e86\u5bbf\u820d\u7533\u8bf7\u6761\u540e\uff0c\u5411\u7740\u8001\u548c\u5c71\u8d70\u53bb\u3002\u90a3\u8fb9\u6211\u8fd8\u4e0d\u662f\u5f88\u719f\u6089\uff0c\u591c\u5e55\u5df2\u964d\uff0c\u5f88\u96be\u8fa8\u8ba4\u697c\u7684\u989c\u8272\u548c\u5916\u89c2\uff0c\u697c\u53f7\u4e5f\u662f\u5f88\u96be\u5bfb\u627e\u3002\u8d70\u8d70\u505c\u505c\uff0c\u5bfb\u5bfb\u89c5\u89c5\uff0c\u7ec8\u4e8e\u5b89\u987f\u4e86\u4e0b\u6765\u3002\u6211\u4f4f\u5728\u6821\u56ed\u7684\u897f\u5317\uff0c\u9876\u697c\uff0c\u6700\u8fb9\u4e0a\u7684\u4e00\u4e2a\u623f\u95f4\u3002\u6536\u62fe\u4e86\u8bb8\u4e45\uff0c\u7ec8\u4e8e\u5230\u4e86\u4f11\u606f\u7684\u65f6\u5019\uff0c\u6574\u4e2a\u4eba\u5f00\u59cb\u653e\u677e\uff0c\u56f0\u610f\u5341\u8db3\u3002\u53bb\u8981\u4e86\u4e00\u5e8a\u65e7\u88ab\u5b50\uff0c\u94fa\u4e0a\uff0c\u4fbf\u660f\u660f\u7761\u53bb\u3002","title":"\u5728\u676d\u5dde\u7684100\u5929-\u7b2c\u4e8c\u5929"},{"location":"posts/2018-03-08-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E4%BA%8C%E5%A4%A9/#100-","text":"","title":"\u5728\u676d\u5dde\u7684100\u5929-\u7b2c\u4e8c\u5929"},{"location":"posts/2018-03-08-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E4%BA%8C%E5%A4%A9/#_1","text":"\u4eca\u5929\u624d\u771f\u6b63\u7684\u53c8\u56de\u5230\u4e86\u676d\u5dde\uff0c\u4eca\u5929\u624d\u662f\u7b2c\u4e00\u5929\u54e9\uff01 \u4ece\u5317\u4eac\u5230\u676d\u5dde\u7684\u9ad8\u94c1\u4e5f\u4e0d\u8fc76\u4e2a\u534a\u5c0f\u65f6\u7f62\u4e86\u3002\u4e00\u8def\u4e0a\uff0c\u6d41\u6c34\u6c60\u5858\u8d8a\u6765\u8d8a\u591a\uff0c\u51b0\u96ea\u4e4b\u4e8b\u65e9\u5c31\u5df2\u7ecf\u4e0d\u89c1\u4e86\u3002\u4e00\u65e5\u8fc7\u4e24\u5b63\uff0c\u4e00\u8def\u7779\u4e24\u666f\u3002\u73b0\u4ee3\u4eba\u5f97\u76ca\u4e8e\u5feb\u901f\u4ea4\u901a\uff0c\u5df2\u7ecf\u6709\u4e86\u8bb8\u591a\u524d\u4eba\u6240\u6ca1\u6709\u7684\u4f53\u9a8c\u3002\u54ea\u5412\u65e5\u884c\u4e09\u5343\u91cc\uff0c\u8fc7\u53bb\u90a3\u53ea\u662f\u795e\u8bdd\u4e2d\u7684\u60f3\u8c61\uff0c\u73b0\u5728\u65e5\u884c\u4e09\u4e07\u91cc\u4e5f\u4e0d\u662f\u6ca1\u6709\u53ef\u80fd\u3002\u4eba\u4eec\u7684\u8db3\u8ff9\u53ef\u4ee5\u904d\u5e03\u5927\u6c5f\u5357\u5317\uff0c\u4eba\u4eec\u7684\u80f8\u895f\u4ea6\u53ef\u4ee5\u6781\u5ea6\u7684\u8212\u5c55\u3002\u770b\u8fc7\u4e86\u7956\u56fd\u7684\u5927\u597d\u6cb3\u5c71\uff0c\u624d\u77e5\u9053\u98ce\u666f\u8fd9\u8fb9\u66f4\u597d\uff1b\u4e2d\u56fd\u6c38\u8fdc\u9002\u5408\u4e2d\u56fd\u4eba\u751f\u5b58\u3002 Y\u541b\u548cS\u541b\u7761\u5f97\u6c89\uff0c\u6211\u4e5f\u6709\u4e9b\u778c\u7761\u4e86\u3002\u8def\u8fc7\u6cf0\u5b89\uff0c\u4e0b\u8d77\u4e86\u5c0f\u96e8\u3002\u6709\u8da3\u7684\u662f\uff0c\u75be\u9a70\u7684\u5217\u8f66\u4f3c\u4e4e\u4e0e\u9f99\u738b\u505a\u4e86\u534f\u8bae\uff0c\u8981\u8001\u9f99\u738b\u4e13\u95e8\u6d17\u5237\u81ea\u5df1\u4e00\u4fa7\u7684\u7a97\u6237\u5462\uff0c\u53e6\u4e00\u4fa7\u5219\u5e72\u5e72\u7684\uff0c\u4e00\u5c18\u4e0d\u67d3\u7684\u3002 \u957f\u6c5f\u3002 \u592a\u6e56\u3002 \u676d\u5dde\u3002\u4e0b\u8f66\uff0c\u6b63\u8d76\u4e0a3\u6708\u6c14\u6e29\u56de\u6696\uff0c\u4eca\u5929\u53ef\u771f\u662f\u6625\u98ce\u548c\u7166\u4e86\u3002\u8fd9\u91cc\u6ca1\u6709\u7e41\u590d\u7684\u5b89\u68c0\uff0c\u4ece\u7ad9\u53f0\u51fa\u53bb\u4fbf\u76f4\u63a5\u53ef\u4ee5\u9009\u62e9\u516c\u5171\u4ea4\u901a\u6216\u8005\u6253\u7684\u3002Y\u541b\u7684\u670b\u53cb\u6765\u63a5\uff0c\u5174\u81f4\u52c3\u52c3\u7684\u8d70\u4e86\uff0cS\u541b\u8fd8\u8981\u8d76\u5230\u53e6\u4e00\u4e2a\u7ad9\u53f0\u4e0a\u8f66\u3002\u4e92\u76f8\u544a\u522b\u4e4b\u540e\uff0c\u6211\u81ea\u5df1\u4e5f\u5728\u676d\u5dde\u4e1c\u7ad9\u897f\u5e7f\u573a\u4e5828\u8def\u8f66\u8d70\u4e86\u3002 \u70ed\u7684\u51fa\u6c57\uff01 \u5230\u4e00\u4e2a\u4e2d\u5b66\u4e0b\u8f66\uff0c\u6cbf\u7740\u6d59\u5927\u8def\u5411\u897f\u884c\uff0c\u4fbf\u5230\u6d59\u5927\u7389\u6cc9\u6821\u533a\u3002\u6211\u5feb\u6b65\u4ece\u4e1c\u95e8\u8fdb\u5165\uff0c\u6298\u5411\u5357\uff0c\u53d6\u4e86\u5bbf\u820d\u7533\u8bf7\u6761\u540e\uff0c\u5411\u7740\u8001\u548c\u5c71\u8d70\u53bb\u3002\u90a3\u8fb9\u6211\u8fd8\u4e0d\u662f\u5f88\u719f\u6089\uff0c\u591c\u5e55\u5df2\u964d\uff0c\u5f88\u96be\u8fa8\u8ba4\u697c\u7684\u989c\u8272\u548c\u5916\u89c2\uff0c\u697c\u53f7\u4e5f\u662f\u5f88\u96be\u5bfb\u627e\u3002\u8d70\u8d70\u505c\u505c\uff0c\u5bfb\u5bfb\u89c5\u89c5\uff0c\u7ec8\u4e8e\u5b89\u987f\u4e86\u4e0b\u6765\u3002\u6211\u4f4f\u5728\u6821\u56ed\u7684\u897f\u5317\uff0c\u9876\u697c\uff0c\u6700\u8fb9\u4e0a\u7684\u4e00\u4e2a\u623f\u95f4\u3002\u6536\u62fe\u4e86\u8bb8\u4e45\uff0c\u7ec8\u4e8e\u5230\u4e86\u4f11\u606f\u7684\u65f6\u5019\uff0c\u6574\u4e2a\u4eba\u5f00\u59cb\u653e\u677e\uff0c\u56f0\u610f\u5341\u8db3\u3002\u53bb\u8981\u4e86\u4e00\u5e8a\u65e7\u88ab\u5b50\uff0c\u94fa\u4e0a\uff0c\u4fbf\u660f\u660f\u7761\u53bb\u3002","title":"\u7b2c\u4e8c\u5929"},{"location":"posts/2018-03-10-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E4%B8%89%E5%A4%A9/","text":"\u5728\u676d\u5dde\u7684100\u5929-\u7b2c\u4e09\u5929 # \u7b2c\u4e09\u5929-\u5468\u4e00 # \u8bf4\u5b9e\u8bdd\uff0c\u5199\u4e0b\u8fd9\u6bb5\u6587\u5b57\u7684\u65f6\u5019\u5df2\u8fdc\u8fdc\u5728\u7b2c\u4e09\u5929\u4e4b\u540e\u3002\u90a3\u4eca\u5929\u5c31\u6765\u4e2a\u4e86\u65ad\uff0c\u7701\u5f97\u4e00\u4e9b\u4e8b\u60c5\u5fd8\u4e86\uff0c\u8981\u4e48\u7a7a\u6b22\u559c\u4e00\u573a\uff0c\u8981\u4e48\u7a7a\u60b2\u4f24\u4e00\u573a\u3002 \u4e00\u7741\u773c\u5df2\u7ecf\u63a5\u8fd1\u516b\u70b9\uff0c\u53c8\u987f\u89c9\u51c9\u610f\u88ad\u6765\u3002\u8fd9\u5929\u6c14\u7684\u53d8\u6362\u7adf\u5982\u540c\u5c0f\u5b69\u513f\u7684\u813e\u6c14\u4e00\u822c\u96be\u4ee5\u7422\u78e8\u3002\u987e\u4e0d\u4e86\u90a3\u4e48\u591a\uff0c\u6211\u8d76\u7d27\u8d77\u6765\uff0c\u51c6\u5907\u6d17\u6f31\u3002 \u53bb\u5e74\u529e\u7684\u5b66\u751f\u5361\uff08\u84dd\u5361\uff0c\u53ef\u4ee5\u5728\u9650\u5b9a\u7684\u98df\u5802\u5403\u996d\uff0c\u53ef\u4ee5\u5237\u95e8\u7981\uff09\u4eca\u5929\u53ef\u4ee5\u6d3e\u4e0a\u7528\u573a\u4e86\uff0c\u8fd9\u5b66\u751f\u5361\u4e5f\u662f\u53ef\u4ee5\u5237\u70ed\u6c34\u7684\uff08\u6628\u665a\u6210\u529f\u8bd5\u8fc7\uff09\u3002\u6211\u6025\u5306\u5306\u5730\u8dd1\u53bb\u6d17\u6f31\u95f4\uff0c\u51c6\u5907\u6253\u4e9b\u70ed\u6c34\uff0c\u6bcf\u6210\u60f3\uff0c\u8fd9\u70ed\u6c34\u9f99\u5934\u53ea\u662f\u56a3\u53eb\uff0c\u6ca1\u6709\u4e00\u70b9\u653e\u51fa\u4e00\u70b9\u6c34\u6765\u7684\u610f\u601d\uff0c\u597d\u5389\u5bb3\u7684\u9b54\u738b\uff01\u6211\u53c8\u56de\u5230\u5bbf\u820d\u95ee\u5ba4\u53cb\uff08\u8001\u751f\uff09\uff0c\u4ed6\u544a\u8bc9\u6211\u65e9\u4e0a\u662f\u6ca1\u6709\u70ed\u6c34\u7684\uff0c\u9700\u8981\u5934\u4e00\u5929\u665a\u4e0a\u7528\u6696\u74f6\u63a5\u597d\u3002\u6211\u6014\u4f4f\uff0c\u60f3\u4e86\u60f3\uff0c\u56de\u4e86\u6d17\u6f31\u95f4\uff0c\u6df1\u5438\u4e86\u4e00\u53e3\u6c14\uff0c\u4fbf\u63a5\u8d77\u51c9\u6c34\u6765\u3002 \u6211\u5feb\u6b65\u8d70\u5230\u5b9e\u9a8c\u5ba4\uff0c\u89c1\u4e86S\u8001\u5e08\uff0c\u5f00\u59cb\u4e86\u4e00\u5929\u7684\u5de5\u4f5c\u3002\u5de5\u4f5c\u5185\u5bb9\u4e0d\u63d0\u3002\u4eca\u5929\u7a81\u7136\u901a\u77e5\u8981\u4ea4\u5f00\u9898\u62a5\u544a\u548c\u6587\u732e\u7ffb\u8bd1\uff0c\u771f\u662f\u706b\u4e0a\u6d47\u6cb9\uff01 \u665a\u4e0a\uff0c\u6211\u65e9\u65e9\u5c31\u56de\u4e86\u5bbf\u820d\u3002\u5916\u9762\u53c8\u4e0b\u8d77\u96e8\u6765\uff0c\u5929\u6c14\u8d8a\u6765\u8d8a\u51c9\u4e86\u3002\u8981\u518d\u4e70\u4e00\u5e8a\u88ab\u5b50\uff01\u8981\u518d\u4e70\u4e00\u53cc\u68c9\u62d6\u978b\uff01 \u7b2c\u56db\u5929-\u5468\u4e8c # \u4e0a\u5348\u5f00\u4f1a\u3002 \u4e0b\u5348\u5f00\u59cb\u5199\u6587\u732e\u7ffb\u8bd1\u548c\u5f00\u9898\u62a5\u544a\u3002google\u7ffb\u8bd1\u5728\u524d\u4e00\u6bb5\u65f6\u95f4\u6709\u4e86\u8f83\u5927\u7684\u7a81\u7834\uff0c\u5176\u5bf9\u6574\u53e5\u7684\u7406\u89e3\u80fd\u529b\u5927\u5927\u52a0\u5f3a1\u3002\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u6d88\u606f\uff0c\u6211\u7684\u6587\u732e\u7ffb\u8bd1\u5f88\u5feb\u5c31\u501f\u52a9\u5b83\u5b8c\u6210\u4e86\u3002\u82e5\u662f\u80fd\u6839\u636e\u4e0d\u540c\u671f\u520a\u3001\u4f1a\u8bae\u7684\u8bba\u6587\u683c\u5f0f\u505a\u4e00\u4e2a\u81ea\u52a8\u89e3\u6790\uff0c\u90a3\u5c31\u518d\u597d\u4e0d\u8fc7\u4e86\u3002\u8fd9\u5f00\u9898\u62a5\u544a\u53ef\u96be\u4f4f\u4e86\u6211\uff0c\u6211\u6700\u7ec8\u91c7\u53d6\u4e86\u4e00\u7bc7tutorial2\u7684\u5efa\u8bae\uff0c\u5199\u4e86\u5927\u69823000\u5b57\u3002\u4e00\u76f4\u5199\u5230\u540e\u534a\u591c1\u70b9\u3002\u771f\u662f\u50cf\u6324\u7259\u818f\u3002\u4e00\u822c\u5199\u4f5c\uff0c\u8981\u60f3\u51993000\u5b57\uff0c\u82e5\u662f\u6ca1\u6709\u51e0\u4e07\u5b57\u7684\u77e5\u8bc6\u91cf\u6015\u662f\u4ec0\u4e48\u4e5f\u5199\u4e0d\u51fa\u6765\u7684\u3002\u771f\u662f\u96be\u4f4f\u6211\u4e86\u3002 \u7b2c\u4e94\u5929-\u5468\u4e09 # \u4e0a\u5348\u5f00\u4f1a\u3002 \u4e0b\u5348\u5f00\u59cb\u5c1d\u8bd5\u7f16\u5199CNN\u6a21\u578b\u5e76\u8c03\u8bd5\u3002\u8fd9\u4e5f\u662f\u6211\u5934\u4e00\u6b21\u505a\u7c7b\u4f3c\u7684\u5de5\u4f5c\uff0c\u8fc7\u53bb\u4e00\u6bb5\u65f6\u95f4\u4e5f\u53ea\u662f\u201c\u8d70\u9a6c\u89c2\u82b1\u201d\uff0c\u7b2c\u4e00\u6b21\u771f\u6b63\u7684\u53bb\u5b9e\u73b0\u8fd9\u6837\u4e00\u4e2a\u6a21\u578b\uff0c\u5728\u7ec6\u8282\u4e0a\u96be\u514d\u4f1a\u6709\u4e0d\u8db3\u3002\u4ee3\u7801\u7f16\u5199\u662f\u4e00\u90e8\u5206\u5de5\u4f5c\uff0c\u66f4\u591a\u7684\u65f6\u95f4\u88ab\u6211\u82b1\u5728tuning\u4e0a\uff0c\u8fd9\u66f4\u662f\u96be\u4e0a\u52a0\u96be\u3002 \u665a\u4e0a\u4e0eJ\u541b\u8ba8\u8bba\u5b66\u4e60\u5185\u6838\u77e5\u8bc6\u7684\u4e8b\u5b9c\uff0c\u5546\u5b9a\u5468\u5468\u5b9a\u91cf\u5b66\u4e60\uff0c\u5468\u5468\u5b9a\u65f6\u8ba8\u8bba\u3002 \u7b2c\u516d\u5929-\u5468\u56db # \u88ab\u5b50\u5230\u4e86\u3002\u771f\u662f\u4e00\u4ef6\u5927\u559c\u4e8b\u3002\u94fa\u5e8a\u94fa\u4e86\u5f88\u4e45\u5f88\u4e45\uff0c\u751f\u6015\u94fa\u5f97\u4e0d\u5e73\u6574\uff0c\u665a\u4e0a\u4f1a\u51b7\u3002 \u7b2c\u4e03\u5929-\u5468\u4e94 # \u51bb\u9192\uff01 \u4e8b\u5b9e\u8bc1\u660e \u5c4b\u5b50\u91cc\u662f\u771f\u7684 \u51b7\uff01 \u88ab\u5b50\u5b58\u4e0d\u4f4f\u6e29\u5ea6\uff01 \u95e8\u7a97\u6f0f\u98ce\uff01 \u545c\u547c\u54c0\u54c9\uff01 \u4fc4\u9877\u98ce\u5b9a\u4e91\u58a8\u8272\uff0c\u79cb\u5929\u6f20\u6f20\u5411\u660f\u9ed1 \u5e03\u887e\u591a\u5e74\u51b7\u4f3c\u94c1\uff0c\u5a07\u513f\u6076\u5367\u8e0f\u91cc\u88c2 \u5e8a\u5934\u5c4b\u6f0f\u65e0\u5e72\u5904\uff0c\u96e8\u811a\u5982\u9ebb\u672a\u65ad\u7edd \u81ea\u7ecf\u4e27\u4e71\u5c11\u7761\u7720\uff0c\u957f\u591c\u6cbe\u6e7f\u4f55\u7531\u5f7b\uff01 \u4e0b\u5348 \u68c9\u62d6\u978b \u5230\u4e86\uff0c\u624b\u673a \u5230\u4e86\uff0cRNN\u6a21\u578b \u5b9e\u73b0\u4e86\uff0ctuning \u4f9d\u65e7\u5931\u8d25 \u96be\uff01 \u56de\u53bb \u804a\u5929 C\u541b\uff0c\u5979\uff0cshe\uff0cher\uff0celle \u6625\u98ce\u5341\u91cc\u626c\u5dde\u8def \u5377\u4e0a\u73e0\u83b2\u603b\u4e0d\u5982 \u76f8\u601d\u4e0d\u7528\u5bbd\u91d1\u948f \u4e5f\u4e0d\u7528\u3001\u591a\u60c5\u4f3c\u7389\u71d5 \u95ee\u53d6\u5a75\u5a1f\u5b66\u957f\u8fdc \u4e0d\u5fc5\u6e05\u5149\u591c\u591c\u89c1 \u4f46\u83ab\u8d1f\u3001\u56e2\u5706\u613f","title":"\u5728\u676d\u5dde\u7684100\u5929-\u7b2c\u4e09\u5929"},{"location":"posts/2018-03-10-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E4%B8%89%E5%A4%A9/#100-","text":"","title":"\u5728\u676d\u5dde\u7684100\u5929-\u7b2c\u4e09\u5929"},{"location":"posts/2018-03-10-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E4%B8%89%E5%A4%A9/#-","text":"\u8bf4\u5b9e\u8bdd\uff0c\u5199\u4e0b\u8fd9\u6bb5\u6587\u5b57\u7684\u65f6\u5019\u5df2\u8fdc\u8fdc\u5728\u7b2c\u4e09\u5929\u4e4b\u540e\u3002\u90a3\u4eca\u5929\u5c31\u6765\u4e2a\u4e86\u65ad\uff0c\u7701\u5f97\u4e00\u4e9b\u4e8b\u60c5\u5fd8\u4e86\uff0c\u8981\u4e48\u7a7a\u6b22\u559c\u4e00\u573a\uff0c\u8981\u4e48\u7a7a\u60b2\u4f24\u4e00\u573a\u3002 \u4e00\u7741\u773c\u5df2\u7ecf\u63a5\u8fd1\u516b\u70b9\uff0c\u53c8\u987f\u89c9\u51c9\u610f\u88ad\u6765\u3002\u8fd9\u5929\u6c14\u7684\u53d8\u6362\u7adf\u5982\u540c\u5c0f\u5b69\u513f\u7684\u813e\u6c14\u4e00\u822c\u96be\u4ee5\u7422\u78e8\u3002\u987e\u4e0d\u4e86\u90a3\u4e48\u591a\uff0c\u6211\u8d76\u7d27\u8d77\u6765\uff0c\u51c6\u5907\u6d17\u6f31\u3002 \u53bb\u5e74\u529e\u7684\u5b66\u751f\u5361\uff08\u84dd\u5361\uff0c\u53ef\u4ee5\u5728\u9650\u5b9a\u7684\u98df\u5802\u5403\u996d\uff0c\u53ef\u4ee5\u5237\u95e8\u7981\uff09\u4eca\u5929\u53ef\u4ee5\u6d3e\u4e0a\u7528\u573a\u4e86\uff0c\u8fd9\u5b66\u751f\u5361\u4e5f\u662f\u53ef\u4ee5\u5237\u70ed\u6c34\u7684\uff08\u6628\u665a\u6210\u529f\u8bd5\u8fc7\uff09\u3002\u6211\u6025\u5306\u5306\u5730\u8dd1\u53bb\u6d17\u6f31\u95f4\uff0c\u51c6\u5907\u6253\u4e9b\u70ed\u6c34\uff0c\u6bcf\u6210\u60f3\uff0c\u8fd9\u70ed\u6c34\u9f99\u5934\u53ea\u662f\u56a3\u53eb\uff0c\u6ca1\u6709\u4e00\u70b9\u653e\u51fa\u4e00\u70b9\u6c34\u6765\u7684\u610f\u601d\uff0c\u597d\u5389\u5bb3\u7684\u9b54\u738b\uff01\u6211\u53c8\u56de\u5230\u5bbf\u820d\u95ee\u5ba4\u53cb\uff08\u8001\u751f\uff09\uff0c\u4ed6\u544a\u8bc9\u6211\u65e9\u4e0a\u662f\u6ca1\u6709\u70ed\u6c34\u7684\uff0c\u9700\u8981\u5934\u4e00\u5929\u665a\u4e0a\u7528\u6696\u74f6\u63a5\u597d\u3002\u6211\u6014\u4f4f\uff0c\u60f3\u4e86\u60f3\uff0c\u56de\u4e86\u6d17\u6f31\u95f4\uff0c\u6df1\u5438\u4e86\u4e00\u53e3\u6c14\uff0c\u4fbf\u63a5\u8d77\u51c9\u6c34\u6765\u3002 \u6211\u5feb\u6b65\u8d70\u5230\u5b9e\u9a8c\u5ba4\uff0c\u89c1\u4e86S\u8001\u5e08\uff0c\u5f00\u59cb\u4e86\u4e00\u5929\u7684\u5de5\u4f5c\u3002\u5de5\u4f5c\u5185\u5bb9\u4e0d\u63d0\u3002\u4eca\u5929\u7a81\u7136\u901a\u77e5\u8981\u4ea4\u5f00\u9898\u62a5\u544a\u548c\u6587\u732e\u7ffb\u8bd1\uff0c\u771f\u662f\u706b\u4e0a\u6d47\u6cb9\uff01 \u665a\u4e0a\uff0c\u6211\u65e9\u65e9\u5c31\u56de\u4e86\u5bbf\u820d\u3002\u5916\u9762\u53c8\u4e0b\u8d77\u96e8\u6765\uff0c\u5929\u6c14\u8d8a\u6765\u8d8a\u51c9\u4e86\u3002\u8981\u518d\u4e70\u4e00\u5e8a\u88ab\u5b50\uff01\u8981\u518d\u4e70\u4e00\u53cc\u68c9\u62d6\u978b\uff01","title":"\u7b2c\u4e09\u5929-\u5468\u4e00"},{"location":"posts/2018-03-10-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E4%B8%89%E5%A4%A9/#-_1","text":"\u4e0a\u5348\u5f00\u4f1a\u3002 \u4e0b\u5348\u5f00\u59cb\u5199\u6587\u732e\u7ffb\u8bd1\u548c\u5f00\u9898\u62a5\u544a\u3002google\u7ffb\u8bd1\u5728\u524d\u4e00\u6bb5\u65f6\u95f4\u6709\u4e86\u8f83\u5927\u7684\u7a81\u7834\uff0c\u5176\u5bf9\u6574\u53e5\u7684\u7406\u89e3\u80fd\u529b\u5927\u5927\u52a0\u5f3a1\u3002\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u6d88\u606f\uff0c\u6211\u7684\u6587\u732e\u7ffb\u8bd1\u5f88\u5feb\u5c31\u501f\u52a9\u5b83\u5b8c\u6210\u4e86\u3002\u82e5\u662f\u80fd\u6839\u636e\u4e0d\u540c\u671f\u520a\u3001\u4f1a\u8bae\u7684\u8bba\u6587\u683c\u5f0f\u505a\u4e00\u4e2a\u81ea\u52a8\u89e3\u6790\uff0c\u90a3\u5c31\u518d\u597d\u4e0d\u8fc7\u4e86\u3002\u8fd9\u5f00\u9898\u62a5\u544a\u53ef\u96be\u4f4f\u4e86\u6211\uff0c\u6211\u6700\u7ec8\u91c7\u53d6\u4e86\u4e00\u7bc7tutorial2\u7684\u5efa\u8bae\uff0c\u5199\u4e86\u5927\u69823000\u5b57\u3002\u4e00\u76f4\u5199\u5230\u540e\u534a\u591c1\u70b9\u3002\u771f\u662f\u50cf\u6324\u7259\u818f\u3002\u4e00\u822c\u5199\u4f5c\uff0c\u8981\u60f3\u51993000\u5b57\uff0c\u82e5\u662f\u6ca1\u6709\u51e0\u4e07\u5b57\u7684\u77e5\u8bc6\u91cf\u6015\u662f\u4ec0\u4e48\u4e5f\u5199\u4e0d\u51fa\u6765\u7684\u3002\u771f\u662f\u96be\u4f4f\u6211\u4e86\u3002","title":"\u7b2c\u56db\u5929-\u5468\u4e8c"},{"location":"posts/2018-03-10-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E4%B8%89%E5%A4%A9/#-_2","text":"\u4e0a\u5348\u5f00\u4f1a\u3002 \u4e0b\u5348\u5f00\u59cb\u5c1d\u8bd5\u7f16\u5199CNN\u6a21\u578b\u5e76\u8c03\u8bd5\u3002\u8fd9\u4e5f\u662f\u6211\u5934\u4e00\u6b21\u505a\u7c7b\u4f3c\u7684\u5de5\u4f5c\uff0c\u8fc7\u53bb\u4e00\u6bb5\u65f6\u95f4\u4e5f\u53ea\u662f\u201c\u8d70\u9a6c\u89c2\u82b1\u201d\uff0c\u7b2c\u4e00\u6b21\u771f\u6b63\u7684\u53bb\u5b9e\u73b0\u8fd9\u6837\u4e00\u4e2a\u6a21\u578b\uff0c\u5728\u7ec6\u8282\u4e0a\u96be\u514d\u4f1a\u6709\u4e0d\u8db3\u3002\u4ee3\u7801\u7f16\u5199\u662f\u4e00\u90e8\u5206\u5de5\u4f5c\uff0c\u66f4\u591a\u7684\u65f6\u95f4\u88ab\u6211\u82b1\u5728tuning\u4e0a\uff0c\u8fd9\u66f4\u662f\u96be\u4e0a\u52a0\u96be\u3002 \u665a\u4e0a\u4e0eJ\u541b\u8ba8\u8bba\u5b66\u4e60\u5185\u6838\u77e5\u8bc6\u7684\u4e8b\u5b9c\uff0c\u5546\u5b9a\u5468\u5468\u5b9a\u91cf\u5b66\u4e60\uff0c\u5468\u5468\u5b9a\u65f6\u8ba8\u8bba\u3002","title":"\u7b2c\u4e94\u5929-\u5468\u4e09"},{"location":"posts/2018-03-10-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E4%B8%89%E5%A4%A9/#-_3","text":"\u88ab\u5b50\u5230\u4e86\u3002\u771f\u662f\u4e00\u4ef6\u5927\u559c\u4e8b\u3002\u94fa\u5e8a\u94fa\u4e86\u5f88\u4e45\u5f88\u4e45\uff0c\u751f\u6015\u94fa\u5f97\u4e0d\u5e73\u6574\uff0c\u665a\u4e0a\u4f1a\u51b7\u3002","title":"\u7b2c\u516d\u5929-\u5468\u56db"},{"location":"posts/2018-03-10-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E4%B8%89%E5%A4%A9/#-_4","text":"\u51bb\u9192\uff01 \u4e8b\u5b9e\u8bc1\u660e \u5c4b\u5b50\u91cc\u662f\u771f\u7684 \u51b7\uff01 \u88ab\u5b50\u5b58\u4e0d\u4f4f\u6e29\u5ea6\uff01 \u95e8\u7a97\u6f0f\u98ce\uff01 \u545c\u547c\u54c0\u54c9\uff01 \u4fc4\u9877\u98ce\u5b9a\u4e91\u58a8\u8272\uff0c\u79cb\u5929\u6f20\u6f20\u5411\u660f\u9ed1 \u5e03\u887e\u591a\u5e74\u51b7\u4f3c\u94c1\uff0c\u5a07\u513f\u6076\u5367\u8e0f\u91cc\u88c2 \u5e8a\u5934\u5c4b\u6f0f\u65e0\u5e72\u5904\uff0c\u96e8\u811a\u5982\u9ebb\u672a\u65ad\u7edd \u81ea\u7ecf\u4e27\u4e71\u5c11\u7761\u7720\uff0c\u957f\u591c\u6cbe\u6e7f\u4f55\u7531\u5f7b\uff01 \u4e0b\u5348 \u68c9\u62d6\u978b \u5230\u4e86\uff0c\u624b\u673a \u5230\u4e86\uff0cRNN\u6a21\u578b \u5b9e\u73b0\u4e86\uff0ctuning \u4f9d\u65e7\u5931\u8d25 \u96be\uff01 \u56de\u53bb \u804a\u5929 C\u541b\uff0c\u5979\uff0cshe\uff0cher\uff0celle \u6625\u98ce\u5341\u91cc\u626c\u5dde\u8def \u5377\u4e0a\u73e0\u83b2\u603b\u4e0d\u5982 \u76f8\u601d\u4e0d\u7528\u5bbd\u91d1\u948f \u4e5f\u4e0d\u7528\u3001\u591a\u60c5\u4f3c\u7389\u71d5 \u95ee\u53d6\u5a75\u5a1f\u5b66\u957f\u8fdc \u4e0d\u5fc5\u6e05\u5149\u591c\u591c\u89c1 \u4f46\u83ab\u8d1f\u3001\u56e2\u5706\u613f","title":"\u7b2c\u4e03\u5929-\u5468\u4e94"},{"location":"posts/2018-03-11-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E4%B9%9D%E5%A4%A9/","text":"\u5728\u676d\u5dde\u7684100\u5929-\u7b2c\u4e5d\u5929 # \u7b2c\u4e5d\u5929-\u5468\u516d-3-10 # \u6628\u665a\u7761\u89c9\u7684\u65f6\u5019\uff0c\u7279\u610f\u5728\u5e8a\u5c3e\u4e00\u4fa7\u653e\u4e86\u5757\u513f\u6bef\u5b50\uff0c\u4eca\u65e9\u8d77\u6765\u4fbf\u6ca1\u6709\u90a3\u4e48\u51b7\u3002 \u8bf4\u8d77\u5bbf\u820d\u6765\uff0c\u96be\u514d\u4e0e\u6bcd\u6821\u6709\u4e00\u4e9b\u5bf9\u6bd4\u3002\u8fd9\u623f\u95f4\u95e8\u3001\u7a97\u6f0f\u98ce\u662f\u4e2a\u5927\u95ee\u9898\uff0c12\u53f7\u697c\uff08\u6bcd\u6821\u5bbf\u820d\uff09\u5728\u6211\u4eec\u4f4f\u8fdb\u53bb\u4e4b\u524d\u5c31\u505a\u4e86\u4fdd\u6e29\uff0c\u5df2\u7ecf\u628a\u8fd9\u4e9b\u95ee\u9898\u89e3\u51b3\u4e86\uff0c\u5916\u52a0\u4e0a\u5317\u4eac\u7684\u5bbf\u820d\u90fd\u88c5\u6709\u6696\u6c14\uff0c\u6625\u5929\u7684\u65f6\u5019\u6211\u4ece\u672a\u611f\u5230\u5982\u6b64\u4e0d\u9002\uff08\u51b7\uff09\u3002\u5176\u4ed6\u65b9\u9762\uff0c\u8fd9\u623f\u95f4\u6574\u6574\u6bd412\u53f7\u697c\u7684\u5bbf\u820d\u5927\u4e00\u5708\uff0c\u6211\u53ef\u4ee5\u8f7b\u677e\u5730\u5728\u5e8a\u4e0a\u7ad9\u7740\u76f4\u8d77\u8170\u6765\uff0c\u524d\u540e\u8ddd\u79bb\u6709\u63a5\u8fd13\u5f20\u5e8a\uff1b\u5bf9\u4e8e\u5bbd\u5ea6\uff0c\u6211\u8ba4\u4e3a\u5e76\u6392\u4e5f\u53ef\u4ee5\u6446\u4e0b3\u5f20\u5e8a\u3002\u4e0e\u8717\u5c45\u5317\u4eac\u76f8\u6bd4\uff0c\u6211\u8fd9\u91cc\u771f\u7b97\u662f\u201c\u8c6a\u5b85\u201d\u4e86\u3002\u8fd9\u5e76\u4e0d\u662f\u4e2a\u72ec\u7279\u73b0\u8c61\uff0c\u6d59\u5927\u7684\u4efb\u4f55\u5efa\u7b51\u5728\u7a7a\u95f4\u8003\u91cf\u4e0a\u90fd\u662f\u201c\u4e0d\u8282\u7ea6\u201d\u7684\uff0c\u98df\u5802\u5de5\u4f5c\u95f4\u8db3\u8db3\u662f\u4e2a\u5c0f\u5c4b\u5b50\uff0c\u91cc\u9762\u53ea\u6709\u4e00\u4e24\u4e2a\u5de5\u4f5c\u4eba\u5458\uff0c\u4eba\u5747\u9762\u79ef\u6211\u4f30\u8ba1\u57287\u30018\u5e73\u7c73\u4ee5\u4e0a\u3002\u5b9e\u9a8c\u5ba4\u7684\u7a7a\u95f4\u66f4\u662f\u201c\u5962\u4f88\u201d\uff0c\u5de5\u4f5c\u53f0\u7684\u9762\u79ef\u4e00\u822c\uff0c\u4f46\u662f\u8f83\u5206\u6563\uff0c\u4eba\u4eec\u6d3b\u52a8\u7684\u9762\u79ef\u662f\u5f88\u5927\uff0c\u8fc7\u5802\u98ce\u53ef\u4ee5\u8f7b\u800c\u6613\u4e3e\u7684\u8fdb\u6765\u53c8\u51fa\u53bb\u3002\u6d59\u5927\u7389\u6cc9\u6821\u533a\u6709\u6781\u5927\u4e00\u90e8\u5206\u4f9b\u4eba\u4eec\u4f11\u606f\u7684\u5730\u65b9\u5929\u6c14\u9002\u5b9c\u7684\u65f6\u5019\u4fbf\u51fa\u6765\u6652\u6652\u592a\u9633\uff0c\u6216\u5e2d\u5730\u800c\u5750\uff0c\u6216\u6c60\u8fb9\u96c5\u5ea7\uff0c\u60ec\u610f\u5f97\u4e0d\u5f97\u4e86\uff0c\u4eba\u4eec\u5728\u8fd9\u91cc\u5f97\u5230\u4e86\u6781\u5927\u7684\u5c0a\u91cd\u4e86\u3002 \u4e0e\u535c\u8001\u5e08\u804a\u5929\u4e0d\u63d0\u3002 \u8fd9\u91cc\u7684\u751f\u6d3b\u6709\u4e9b\u5b89\u9038\uff0c\u8fd9\u6837\u53ef\u4e0d\u597d\u3002 \u672c\u6765\u8ba1\u5212\u6e38\u897f\u6e56\uff0c\u6216\u8005\u53bb\u8868\u54e5\u5bb6\uff0c\u5948\u4f55\u7d27\u5f20\uff0c\u53ea\u5f97\u7559\u4e0b\u5de5\u4f5c\u3002\u5de5\u7a0b\u7684\u95ee\u9898\u662f\u4e00\u5b9a\u80fd\u89e3\u51b3\u7684\uff0cS\u8001\u5e08\u5982\u662f\u8bf4\u3002\u5f53\u4e00\u4e2aresearch\u7684\u95ee\u9898\u53d8\u6210\u5de5\u7a0b\u7684\u95ee\u9898\u7684\u65f6\u5019\uff0c\u89e3\u51b3\u8d77\u6765\u5c31\u662f\u770b\u65f6\u95f4\u3002\u6211\u4eec\u6709\u5f88\u591a\u7406\u7531\u7ec8\u6b62\u81ea\u5df1\u7684\u5de5\u4f5c\uff0c\u6bd4\u5982\u5728\u6709\u9650\u7684\u65f6\u95f4\u4e0d\u80fd\u89e3\u51b3\u4e00\u4e2a\u5de5\u7a0b\u95ee\u9898\uff0c\u8fd9\u8bf4\u660e\u6211\u4eec\u7684\u80fd\u529b\u4e0d\u8db3\uff0c\u751a\u81f3\u95ee\u9898\u662f\u4e0d\u53ef\u89e3\u7684\u3002\u8fd9\u4e24\u79cd\u60c5\u51b5\u90fd\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\uff0c\u662f\u9700\u8981\u5728research\u7684\u9636\u6bb5\u89e3\u51b3\u597d\u7684\u95ee\u9898\u3002\u4e5f\u5c31\u80fd\u7406\u89e3\uff0c\u4e3a\u4ec0\u4e48\u4e00\u4e9b\u5f00\u9898\u62a5\u544a\u4e0a\uff0c\u90a3\u4e48\u5f3a\u8c03\u201c\u53ef\u884c\u6027\u201d\u548c\u201c\u5b9e\u65bd\u65b9\u6848\u201d\u4e86\u3002 \u5373\u4fbf\u662f\u52a0\u73ed\uff0c\u4e5f\u89c9\u5f97\u751f\u6d3b\u5b89\u9038\u3002 \u6709\u51e0\u4e2a\u73b0\u8c61\uff0c\u8d77\u5e8a\u8d77\u4e0d\u6765\uff0c\u8d70\u8def\u6162\u60a0\u60a0\uff0c\u7ecf\u5e38\u73a9\u624b\u673a\uff0c\u4e4b\u95f4\u4e00\u76f4\u575a\u6301\u7684\u82f1\u8bed\u548c\u6cd5\u8bed\u7684\u5b66\u4e60\u4e00\u76f4\u62d6\u5ef6\u3002\u800c\u4e14\uff0c\u81ea\u5df1\u8fd8\u6709\u5f88\u591a\u4e8b\u60c5\u8981\u505a\uff0c\u953b\u70bc\u3001\u6e38\u73a9\u3001\u517c\u804c\u2026\u2026 \u90a3\u5c31\u884c\u52a8\u8d77\u6765\u5427\uff01","title":"\u5728\u676d\u5dde\u7684100\u5929-\u7b2c\u4e5d\u5929"},{"location":"posts/2018-03-11-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E4%B9%9D%E5%A4%A9/#100-","text":"","title":"\u5728\u676d\u5dde\u7684100\u5929-\u7b2c\u4e5d\u5929"},{"location":"posts/2018-03-11-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E4%B9%9D%E5%A4%A9/#-3-10","text":"\u6628\u665a\u7761\u89c9\u7684\u65f6\u5019\uff0c\u7279\u610f\u5728\u5e8a\u5c3e\u4e00\u4fa7\u653e\u4e86\u5757\u513f\u6bef\u5b50\uff0c\u4eca\u65e9\u8d77\u6765\u4fbf\u6ca1\u6709\u90a3\u4e48\u51b7\u3002 \u8bf4\u8d77\u5bbf\u820d\u6765\uff0c\u96be\u514d\u4e0e\u6bcd\u6821\u6709\u4e00\u4e9b\u5bf9\u6bd4\u3002\u8fd9\u623f\u95f4\u95e8\u3001\u7a97\u6f0f\u98ce\u662f\u4e2a\u5927\u95ee\u9898\uff0c12\u53f7\u697c\uff08\u6bcd\u6821\u5bbf\u820d\uff09\u5728\u6211\u4eec\u4f4f\u8fdb\u53bb\u4e4b\u524d\u5c31\u505a\u4e86\u4fdd\u6e29\uff0c\u5df2\u7ecf\u628a\u8fd9\u4e9b\u95ee\u9898\u89e3\u51b3\u4e86\uff0c\u5916\u52a0\u4e0a\u5317\u4eac\u7684\u5bbf\u820d\u90fd\u88c5\u6709\u6696\u6c14\uff0c\u6625\u5929\u7684\u65f6\u5019\u6211\u4ece\u672a\u611f\u5230\u5982\u6b64\u4e0d\u9002\uff08\u51b7\uff09\u3002\u5176\u4ed6\u65b9\u9762\uff0c\u8fd9\u623f\u95f4\u6574\u6574\u6bd412\u53f7\u697c\u7684\u5bbf\u820d\u5927\u4e00\u5708\uff0c\u6211\u53ef\u4ee5\u8f7b\u677e\u5730\u5728\u5e8a\u4e0a\u7ad9\u7740\u76f4\u8d77\u8170\u6765\uff0c\u524d\u540e\u8ddd\u79bb\u6709\u63a5\u8fd13\u5f20\u5e8a\uff1b\u5bf9\u4e8e\u5bbd\u5ea6\uff0c\u6211\u8ba4\u4e3a\u5e76\u6392\u4e5f\u53ef\u4ee5\u6446\u4e0b3\u5f20\u5e8a\u3002\u4e0e\u8717\u5c45\u5317\u4eac\u76f8\u6bd4\uff0c\u6211\u8fd9\u91cc\u771f\u7b97\u662f\u201c\u8c6a\u5b85\u201d\u4e86\u3002\u8fd9\u5e76\u4e0d\u662f\u4e2a\u72ec\u7279\u73b0\u8c61\uff0c\u6d59\u5927\u7684\u4efb\u4f55\u5efa\u7b51\u5728\u7a7a\u95f4\u8003\u91cf\u4e0a\u90fd\u662f\u201c\u4e0d\u8282\u7ea6\u201d\u7684\uff0c\u98df\u5802\u5de5\u4f5c\u95f4\u8db3\u8db3\u662f\u4e2a\u5c0f\u5c4b\u5b50\uff0c\u91cc\u9762\u53ea\u6709\u4e00\u4e24\u4e2a\u5de5\u4f5c\u4eba\u5458\uff0c\u4eba\u5747\u9762\u79ef\u6211\u4f30\u8ba1\u57287\u30018\u5e73\u7c73\u4ee5\u4e0a\u3002\u5b9e\u9a8c\u5ba4\u7684\u7a7a\u95f4\u66f4\u662f\u201c\u5962\u4f88\u201d\uff0c\u5de5\u4f5c\u53f0\u7684\u9762\u79ef\u4e00\u822c\uff0c\u4f46\u662f\u8f83\u5206\u6563\uff0c\u4eba\u4eec\u6d3b\u52a8\u7684\u9762\u79ef\u662f\u5f88\u5927\uff0c\u8fc7\u5802\u98ce\u53ef\u4ee5\u8f7b\u800c\u6613\u4e3e\u7684\u8fdb\u6765\u53c8\u51fa\u53bb\u3002\u6d59\u5927\u7389\u6cc9\u6821\u533a\u6709\u6781\u5927\u4e00\u90e8\u5206\u4f9b\u4eba\u4eec\u4f11\u606f\u7684\u5730\u65b9\u5929\u6c14\u9002\u5b9c\u7684\u65f6\u5019\u4fbf\u51fa\u6765\u6652\u6652\u592a\u9633\uff0c\u6216\u5e2d\u5730\u800c\u5750\uff0c\u6216\u6c60\u8fb9\u96c5\u5ea7\uff0c\u60ec\u610f\u5f97\u4e0d\u5f97\u4e86\uff0c\u4eba\u4eec\u5728\u8fd9\u91cc\u5f97\u5230\u4e86\u6781\u5927\u7684\u5c0a\u91cd\u4e86\u3002 \u4e0e\u535c\u8001\u5e08\u804a\u5929\u4e0d\u63d0\u3002 \u8fd9\u91cc\u7684\u751f\u6d3b\u6709\u4e9b\u5b89\u9038\uff0c\u8fd9\u6837\u53ef\u4e0d\u597d\u3002 \u672c\u6765\u8ba1\u5212\u6e38\u897f\u6e56\uff0c\u6216\u8005\u53bb\u8868\u54e5\u5bb6\uff0c\u5948\u4f55\u7d27\u5f20\uff0c\u53ea\u5f97\u7559\u4e0b\u5de5\u4f5c\u3002\u5de5\u7a0b\u7684\u95ee\u9898\u662f\u4e00\u5b9a\u80fd\u89e3\u51b3\u7684\uff0cS\u8001\u5e08\u5982\u662f\u8bf4\u3002\u5f53\u4e00\u4e2aresearch\u7684\u95ee\u9898\u53d8\u6210\u5de5\u7a0b\u7684\u95ee\u9898\u7684\u65f6\u5019\uff0c\u89e3\u51b3\u8d77\u6765\u5c31\u662f\u770b\u65f6\u95f4\u3002\u6211\u4eec\u6709\u5f88\u591a\u7406\u7531\u7ec8\u6b62\u81ea\u5df1\u7684\u5de5\u4f5c\uff0c\u6bd4\u5982\u5728\u6709\u9650\u7684\u65f6\u95f4\u4e0d\u80fd\u89e3\u51b3\u4e00\u4e2a\u5de5\u7a0b\u95ee\u9898\uff0c\u8fd9\u8bf4\u660e\u6211\u4eec\u7684\u80fd\u529b\u4e0d\u8db3\uff0c\u751a\u81f3\u95ee\u9898\u662f\u4e0d\u53ef\u89e3\u7684\u3002\u8fd9\u4e24\u79cd\u60c5\u51b5\u90fd\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\uff0c\u662f\u9700\u8981\u5728research\u7684\u9636\u6bb5\u89e3\u51b3\u597d\u7684\u95ee\u9898\u3002\u4e5f\u5c31\u80fd\u7406\u89e3\uff0c\u4e3a\u4ec0\u4e48\u4e00\u4e9b\u5f00\u9898\u62a5\u544a\u4e0a\uff0c\u90a3\u4e48\u5f3a\u8c03\u201c\u53ef\u884c\u6027\u201d\u548c\u201c\u5b9e\u65bd\u65b9\u6848\u201d\u4e86\u3002 \u5373\u4fbf\u662f\u52a0\u73ed\uff0c\u4e5f\u89c9\u5f97\u751f\u6d3b\u5b89\u9038\u3002 \u6709\u51e0\u4e2a\u73b0\u8c61\uff0c\u8d77\u5e8a\u8d77\u4e0d\u6765\uff0c\u8d70\u8def\u6162\u60a0\u60a0\uff0c\u7ecf\u5e38\u73a9\u624b\u673a\uff0c\u4e4b\u95f4\u4e00\u76f4\u575a\u6301\u7684\u82f1\u8bed\u548c\u6cd5\u8bed\u7684\u5b66\u4e60\u4e00\u76f4\u62d6\u5ef6\u3002\u800c\u4e14\uff0c\u81ea\u5df1\u8fd8\u6709\u5f88\u591a\u4e8b\u60c5\u8981\u505a\uff0c\u953b\u70bc\u3001\u6e38\u73a9\u3001\u517c\u804c\u2026\u2026 \u90a3\u5c31\u884c\u52a8\u8d77\u6765\u5427\uff01","title":"\u7b2c\u4e5d\u5929-\u5468\u516d-3-10"},{"location":"posts/2018-03-28-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E5%8D%81%E5%A4%A9/","text":"\u5728\u676d\u5dde\u7684100\u5929-\u7b2c\u5341\u5929 # \u7b2c\u5341\u5929-\u5468\u65e5-3-11 # \u8fd9\u7bc7\u65e5\u8bb0\u81f3\u672c\u7bc7\u6587\u7ae0\u6b62\uff0c\u90fd\u662f\u56de\u5fc6\u6027\u8d28\u7684\u3002\u65e5\u8bb0\u65e5\u8bb0\uff0c\u603b\u8981\u575a\u6301\u8bb0\u5f55\u624d\u597d\u3002\u5929\u5929\u8bb0\u5f55\uff0c\u5c31\u8981\u5bf9\u7ec6\u8282\u4e4b\u4e8b\u591a\u8d39\u7b14\u58a8\uff1b\u9694\u5929\u8bb0\u5f55\uff0c\u5374\u53c8\u4e22\u5931\u4e86\u60c5\u666f\u3002\u5475\uff0c\u4e0d\u77e5\u8be5\u5982\u4f55\u6743\u8861\u3002\u6700\u8fd1\u65e5\u8bb0\u6ca1\u8ddf\u4e0a\u7684\u539f\u56e0\u5230\u4e0d\u662f\u524d\u9762\u8fd9\u4e2a\u77db\u76fe\uff0c\u800c\u662f\uff0c\u61d2\u5f97\u8bb0\u3002\u6211\u4e4b\u6240\u4ee5\u80fd\u56de\u5fc6\u8d7717\u5929\u524d\u7684\u4e8b\u60c5\uff0c\u5168\u9760\u81ea\u5df1\u65e5\u5e38\u6d82\u6d82\u753b\u753b\u7684\u7b14\u8bb0\u672c\u4e0a\u7684\u53ea\u8a00\u7247\u8bed\u3002 \u5199\u5230\uff1a\u7814\u7a76\u4e00\u4e0b\u7a7f\u8863\u670d\u3002 \u4eca\u5929\u4e70\u4e86\u4e00\u5957\u6625\u5bd2\u7a7f\u7684\u8863\u670d\uff0c\u8fd9\u4e9b\u5929\u51b7\u5f97\u5389\u5bb3\u3002\u672c\u60f3\u7740\u6765\u5230\u676d\u5dde\u5c31\u76f4\u63a5\u8fc7\u590f\u5929\u4e86\uff0c\u6ca1\u60f3\u5230\u6625\u5bd2\u6599\u5ced\uff0c\u6c14\u6e29\u7adf\u4f4e\u5f97\u53ef\u6015\u3002\u5317\u4eac\u8fd8\u5728\u4f9b\u6696\u671f\uff0c\u6211\u5b9e\u5728\u53d7\u4e0d\u4e86\u8fd9\u822c\u6ca1\u6709\u6696\u6c14\u7684\u6e7f\u51b7\u7684\u65e5\u5b50\u3002 \u7b2c\u5341\u4e00\u5929-\u5468\u4e00-3-12 # \u5199\u5230\uff1a\u4eca\u5929\u5565\u4e5f\u6ca1\u5e72 \u4eca\u5929\u4e5f\u4e0d\u662f\u4ec0\u4e48\u4e5f\u6ca1\u505a\uff0c\u53ea\u662f\u53c8\u63a5\u89e6\u4e86\u4e00\u4e2a\u65b0\u7684\u9886\u57df\u2014\u2014\u6570\u636e\u53ef\u89c6\u5316\uff0c\u81ea\u5df1\u6709\u4e9b\u675f\u624b\u65e0\u7b56\u7f62\u4e86\u3002\u5927\u6570\u636e\u3001\u6570\u636e\u6316\u6398\u3001data scientist\u4e4b\u7c7b\u7684\u540d\u5b57\uff0c\u6211\u8fd8\u662f\u5f88\u6a21\u7cca\u3002\u53bb\u5e74\u5e74\u4e2d\u521a\u521a\u53c2\u52a0\u9879\u76ee\u7ec4\u7684\u65f6\u5019\uff0c\u4fbf\u767e\u822c\u7684\u4e0d\u9002\u5e94\u2014\u2014AI\u3001\u673a\u5668\u5b66\u4e60\uff0c\u6df1\u5ea6\u5b66\u4e60\uff0c\u54ea\u4e00\u4e2a\u6211\u53c8\u719f\u6089\u5462\uff1f9\u4e2a\u6708\u8fc7\u53bb\u4e86\uff0c\u4f3c\u4e4e\u624d\u6709\u4e9b\u611f\u89c9\u3002\u6570\u636e\u4e91\u4e91\uff0c\u8fd8\u8fdc\u7740\u54e9\u3002\u9664\u4e86\u4e13\u4e1a\u65b9\u9762\u7684\u77e5\u8bc6\u4e4b\u5916\uff0c\u6211\u4e00\u76f4\u8ba4\u4e3a\u81ea\u5df1\u5e94\u8be5\u5728\u6570\u5b66\uff08\u73b0\u4ee3\u6570\u5b66\uff09\u3001\u7b97\u6cd5\uff08\u4f20\u7edf\u7b97\u6cd5\uff09\u548c\u82f1\u8bed\uff08\u8bf4\u3001\u5199\uff09\u4e0a\u591a\u82b1\u529f\u592b\u3002 \u7b2c\u5341\u4e8c\u5929-\u5468\u4e8c-3-13 # \u5199\u5230\uff1a\u5f00\u4f1a\u3001\u770bandroid\u7684code\u3001\u665a\u4e0a\u804a\u6cd5\u8bed \u5b66\u4e60\u6cd5\u8bed\u7684\u52a8\u673a\u662f\u8fd9\u6837\u7684\u3002\u9ad8\u4e2d\u7684\u65f6\u5019\u6709\u5317\u5927\u7684\u8001\u5e08\u8fc7\u6765\u4ea4\u6d41\uff0c\u4ed6\u7740\u91cd\u8bb2\u4e86\u4ed6\u6c42\u5b66\u7684\u90a3\u4e00\u6bb5\u7ecf\u5386\u3002\u5728\u6e05\u534e\u7684\u65f6\u5019\uff0c\u4ed6\u53bb\u8e6d\u6cd5\u8bed\u8bfe\uff0c\u4e5f\u8ddf\u7740\u5927\u5bb6\u4ea4\u4f5c\u4e1a\uff0c\u4e00\u5802\u8bfe\u4e5f\u4e0d\u5dee\uff0c\u8001\u5e08\u4fbf\u8ba4\u8bc6\u4e86\u4ed6\u3002\u518d\u52a0\u4e0a\u4e86\uff0c\u81ea\u5df1\u673a\u654f\u597d\u5b66\uff0c\u7a0b\u5ea6\u8fd8\u597d\u3002\u7d27\u63a5\u7740\u6e05\u534e\u6709\u4e00\u4e2a\u53bb\u6cd5\u56fd\u7559\u5b66\u7684\u540d\u989d\uff0c\u9009\u62d4\u7684\u662f\u7406\u5de5\u79d1\u7684\u5b66\u751f\uff0c\u4ed6\u4fbf\u5f97\u4e86\u4e2a\u4fbf\u5b9c\uff0c\u8d74\u6cd5\u7559\u5b66\u53bb\u4e86\u3002\u6211\u5bf9\u6cd5\u8bed\u7684\u7b2c\u4e00\u5370\u8c61\u4fbf\u662f\u5982\u6b64\u3002\u6211\u81ea\u5df1\u5728\u5927\u4e8c\u7684\u65f6\u5019\uff0c\u5b66\u6821\u6709\u53bb\u6cd5\u8bfb\u5de5\u7a0b\u5e08\u7684\u9879\u76ee\u3002\u90a3\u65f6\u5019\u76d8\u7b97\u4e86\u5f88\u4e45\uff0c\u7701\u5403\u4fed\u75283\u5e7420\u4e07\u3002\u867d\u7136\u8fd9\u5bf9\u6211\u5bb6\u6765\u8bf4\u4e5f\u662f\u5f88\u5927\u4e00\u7b14\u5f00\u9500\uff0c\u4f46\u662f\u6211\u80fd\u65e9\u65e9\u6bd5\u4e1a\uff083+1+2\uff09\u8fd8\u6709\u53ef\u80fd\u4e89\u53d6\u5230\u5956\u5b66\u91d1\uff0c\u524d\u666f\u4e5f\u662f\u4e0d\u9519\u3002\u5948\u4f55\u5b66\u9662\u91cc\u6839\u672c\u4e0dcare\u8fd9\u4e2a\u9879\u76ee\uff0c\u4e5f\u6ca1\u6709\u8d44\u52a9\u7684\u610f\u5411\uff0c\u518d\u52a0\u4e0a\u5144\u957f\u4e70\u4e86\u623f\u5b50\uff0c\u5bb6\u91cc\u7ecf\u6d4e\u7d27\u5f20\uff0c\u6211\u8fd9\u51fa\u56fd\u7684\u6253\u7b97\u4fbf\u6210\u4e86\u6ce1\u5f71\u3002\u4e0d\u8fc7\uff0c\u8fd9\u6b21\u8ba9\u6211\u5bf9\u6cd5\u8bed\u672c\u8eab\u4ea7\u751f\u4e86\u5174\u8da3\u3002\u65e2\u7136\u53bb\u4e0d\u4e86\u6cd5\u56fd\uff0c\u90a3\u5c31\u5b66\u5b83\u4e00\u4e0b\uff01\u5927\u56db\u65f6\u5019\uff0c\u7ec8\u4e8e\u5f97\u51fa\u70b9\u65f6\u95f4\uff0c\u53c8\u627e\u5230\u8fd9\u4e2a\u9879\u76ee\u7684\u8d1f\u8d23\u8001\u5e08\uff0c\u7533\u8bf7\u53ea\u4e0a\u8bfe\u4e0d\u51fa\u56fd\u3002\u8fd9\u4e9b\u90fd\u53d1\u751f\u57282017\u5e746\u6708\uff0c\u90a3\u65f6\u5019\u4fdd\u7814\u590f\u4ee4\u8425\u5f55\u53d6\u5728\u5373\uff0c\u6211\u9700\u8981\u6743\u8861\u65f6\u95f4\uff0c\u590f\u4ee4\u8425\u5728\u6691\u5047\uff0c\u6cd5\u8bed\u8bfe\u4e5f\u5728\u6691\u5047\u3002\u90a3\u65f6\u5019\u56e0\u590f\u4ee4\u8425\u7533\u8bf7\u88ab\u62d2\uff0c\u5174\u5473\u7d22\u7136\u3002\u6211\u4fbf\u6beb\u4e0d\u72b9\u8c6b\u7684\u53bb\u62a5\u4e86\u540d\uff0c\u8d1f\u8d23\u7684\u8001\u5e08\u4eec\u4e5f\u540c\u610f\u6211\u8fd9\u6837\u53c2\u4e0e\u4ed6\u4eec\u7684\u9879\u76ee\u3002\u7d27\u63a5\u7740\u4fbf\u4e00\u76f4\u5b66\u4e60\u52302018\u5e741\u6708\u4efd\uff0c\u56e0\u81ea\u5df1\u7684\u539f\u56e0\u800c\u4e2d\u65ad\u4e86\u5b66\u4e60\u3002\u76ee\u524d\uff0c\u82f1\u8bed\u662f\u6211\u66f4\u8981\u5b66\u597d\u7684\u4e8b\u60c5\uff0c\u6211\u53ea\u80fd\u6bcf\u5929\u65e9\u4e0a\u542c\u7740\u6cd5\u8bed\u8bfe\u672c\u542c\u529b\uff0c\u4ece\u5bbf\u820d\u8d70\u5230\u98df\u5802\uff0c\u518d\u8d70\u5230\u5b9e\u9a8c\u5ba4\uff0c\u7ec3\u7740\u8033\u6735\uff0c\u751f\u6015\u505c\u4e0b\u4e00\u6bb5\u65f6\u95f4\u7684\u5b66\u4e60\uff0c\u5c31\u4f1a\u628a\u4ee5\u524d\u7684\u77e5\u8bc6\u90fd\u5fd8\u6389\u3002\u6211\u60f3\u57282020\u5e74\u4e4b\u524d\u53bb\u4e00\u8d9f\u6cd5\u56fd\u3002 \u7b2c\u5341\u4e09\u5929-\u5468\u4e09-3-14 # \u5199\u5230\uff1a\u5b66\u82f1\u8bed\uff0c\u5e7f\u64ad \u6bcf\u5929\u508d\u665a5\u70b9\u5de6\u53f3\u7684\u65f6\u5019\uff0c\u6d59\u5927\u7389\u6cc9\u7684\u6821\u56ed\u91cc\u5c31\u4f1a\u54cd\u8d77\u5982\u82b1\u9999\u822c\u5f25\u6f2b\u4e8e\u7a7a\u6c14\u4e2d\u7684\u6e29\u99a8\u7684\u5e7f\u64ad\u3002\u7389\u6cc9\u8fd9\u91cc\u6811\u6797\u9634\u7ff3\u7684\u5730\u65b9\uff0c\u5e7f\u64ad\u4fbf\u5728\u5929\u4e0a\uff0c\u8fd9\u91cc\u6728\u77ee\u8349\u4e1b\u7684\u5730\u65b9\uff0c\u5e7f\u64ad\u4fbf\u5728\u5730\u4e0a\u3002\u5929\u4e0a\u5730\u4e0a\u90fd\u6709\u4e86\uff0c\u4e5f\u662f\u548c\u5408\u4e4b\u5883\u4e86\u2014\u2014\u4e0d\u540c\u7684\u89d2\u5ea6\u7684\u58f0\u97f3\u2014\u2014\u7a7a\u95f4\u7684\u8f6e\u8f6c\u3001\u5c42\u6b21\u7684\u5206\u660e\uff0c\u5728\u504c\u5927\u7684\u6821\u56ed\u91cc\u5f62\u6210\u4e86\u4e00\u79cd\u72ec\u7279\u7684\u4f53\u9a8c\u3002 \u7b2c\u5341\u56db\u5929-\u5468\u56db-3-15 # \u5199\u5230\uff1a\u8ba8\u8bba\uff0c\u770b\u6587\u732e\uff0c\u8ba8\u8bba\uff0c\u6539android\uff0c\u901b\u8d85\u5e02\uff0c\u53bb\u7403\u573a\uff0c\u5496\u5561 \u6211\u4e4b\u6240\u4ee5\u559c\u6b22\u6253\u7fbd\u6bdb\u7403\u662f\u56e0\u4e3a\u8fd9\u662f\u4e00\u9879\u6ca1\u6709\u8eab\u4f53\u63a5\u89e6\u7684\u3001\u6bd4\u8f83\u6587\u660e\u7684\u8fd0\u52a8\u3002\u4e0d\u8fc7\u51e1\u662f\u8fd0\u52a8\u5c31\u4f1a\u6709\u7ade\u6280\u6027\uff0c\u6211\u52a0\u5165\u4e86\u8fd9\u8fb9\u7684\u7fbd\u534f\uff0c\u5e0c\u671b\u53ef\u4ee5\u4e92\u76f8\u5b66\u4e60\u3001\u5207\u78cb\u3002 \u6211\u4e4b\u6240\u4ee5\u559c\u6b22\u559d\u5496\u5561\u662f\u56e0\u4e3a\uff0c\u6211\u559d\u5496\u5561\u7626\u4e86\u3002\u7626\u4e86\uff0c\u6ca1\u9519\u3002\u53e6\u5916\u5c31\u662f\uff0c\u53ef\u4ee5\u8ddf\u670b\u53cb\u53bb\u5496\u5561\u9986\u804a\u5929\u3002\u6211\u6700\u957f\u7684\u8bb0\u5f55\u662f\u804a\u4e865\u4e2a\u5c0f\u65f6\uff08\u6216\u8005\u66f4\u957f\uff09\uff0c\u6211\u60f3\u53ef\u4ee5\u518d\u957f\u4e00\u4e9b\uff0c\u53ea\u662f\u5f53\u65f6\u592a\u665a\uff0c\u6015\u6ca1\u6709\u8f66\u3002\u804a\u5929\u603b\u662f\u4e00\u4ef6\u653e\u677e\u7684\u4e8b\u60c5\uff0c\u5c31\u8981\u53bb\u4e00\u4e2a\u653e\u677e\u7684\u5730\u65b9\u3002 \u7b2c\u5341\u4e94\u5929-\u5468\u4e94-3-16 # \u5199\u5230\uff1a\u4eca\u65e9\u8d77\u665a\uff0c\u6ca1\u5403\u65e9\u996d\u3002\u6253\u7403\uff0csoul\uff0cQ\u541b \u8fd9\u8fb9\u98df\u5802\u662f\u5f88\u4fbf\u5b9c\u7684\uff0c\u53ef\u4ee5\u5403\u7684\u5f88\u6e05\u5355\u3002\u53c8\u5065\u5eb7\u53c8\u5b9e\u60e0\u3002\u4e0eQ\u541b\u5403\u996d\uff0c\u4ed6\u9a6c\u4e0a\u6bd5\u4e1a\u8d70\u4e86\u3002\u6211\u4e45\u4ef0Q\u541b\u5927\u540d\u5df2\u4e45\uff0c\u5982\u4eca\u89c1\u5230\u5e90\u5c71\u771f\u9762\u76ee\u7adf\u6709\u4e9b\u4e0d\u77e5\u8bf4\u4ec0\u4e48\u597d\u3002\u4ed6\u4ece\u5bb6\u91cc\u8003\u5165\u540d\u6821\uff0c\u521b\u9020\u4e86\u4e00\u4e9b\u201c\u8bb0\u5f55\u201d\u3002\u8bb0\u5f55\u603b\u662f\u8981\u88ab\u4eba\u6253\u7834\u7684\uff0c\u5e0c\u671b\u6211\u4e4b\u540e\u7684\u4eba\u80fd\u5728\u5b66\u4e1a\u4e0a\u518d\u63a5\u518d\u5389\u3002 \u7b2c\u5341\u516d\u5929-\u5468\u516d-3-17 # \u5199\u5230\uff1a\u5e0c\u671b\u81ea\u5df1\u505a\u7684\u6bcf\u4e00\u4ef6\u4e8b\u90fd\u6709\u4e9b\u8fdb\u6b65\u610f\u4e49 \u8fd9\u5f53\u7136\u662f\u9650\u4e8e\u5de5\u4f5c\u4e2d\u3002\u6700\u8fd1\u505a\u4e8b\u60c5\u4f1a\u8003\u8651\u628a\u4e00\u4ef6\u4e8b\u505a\u597d\uff0c\u800c\u4e0d\u662f\u8d70\u9a6c\u89c2\u82b1\u3002\u5c24\u5176\u662f\u7b2c\u4e8c\u6b21\u505a\u8fd9\u4ef6\u4e8b\u6216\u7b2c\u4e09\u6b21\u505a\u8fd9\u4ef6\u4e8b\u7684\u65f6\u5019\u3002\u6311\u9009\u4e3b\u6d41\u7684\u5de5\u5177\u5f80\u5f80\u4e0d\u4f1a\u6709\u8fc7\u9519\uff0c\u8981\u628aword\u5b66\u597d\u3002\u5199\u6587\u6863\u6700\u91cd\u8981\u7684\u8fd8\u662f\u6e05\u6670\u8868\u8fbe\uff0c\u8fd9\u5f80\u5f80\u53ef\u4ee5\u901a\u8fc7\u4e00\u5b9a\u7684\u5f62\u5f0f\u6765\u8868\u73b0\u3002\u5f62\u5f0f\u8981\u4e3a\u5185\u5bb9\u670d\u52a1\uff0c\u5e0c\u671b\u5728\u4eca\u540e\u5199\u6587\u6863\u7684\u6e05\u6670\u8868\u8fbe\u4e0a\u80fd\u591a\u4e0b\u529f\u592b\u3002 \u4e0b\u5348\u901b\u897f\u6e56\uff0c\u508d\u665a\u53bb\u8868\u54e5\u5bb6 \u7b2c\u5341\u516d\u5929-\u5468\u65e5-3-18 # \u4ece\u8868\u54e5\u5bb6\u56de\u6765\uff0c\u91cd\u65b0\u7ed9\u7535\u8111\u5b89\u88c5\u4e86\u7cfb\u7edf \u7b2c\u5341\u4e03\u5929-\u5468\u4e00-3-19 # \u4ec0\u4e48\u4e5f\u6ca1\u5199\uff0c\u51c6\u5907\u7b2c\u4e8c\u5929\u5f00\u4f1a \u7b2c\u5341\u516b\u5929-\u5468\u4e8c-3-20 # \u4ec0\u4e48\u4e5f\u6ca1\u5199\uff0c\u8fd9\u4e00\u5929\u5f00\u4f1a \u7b2c\u5341\u4e5d\u5929-\u5468\u4e09-3-21 # \u5199\u5230\uff1a\u4e70\u4e86\u7535\u70ed\u6bef \u5bd2\u6f6e\u6765\u88ad\uff0c\u6c14\u6e29\u9aa4\u964d\u3002\u7ec8\u4e8e\u4e0b\u4e86\u51b3\u5fc3\u4e70\u4e86\u7535\u70ed\u6bef\u3002\u8fd9\u4e2a\u6708\u5b9e\u5728\u6709\u4e9b\u7834\u8d39\uff0c\u6bcf\u4e00\u5e74\u603b\u6709\u51e0\u4e2a\u6708\u662f\u7834\u8d39\u7684\u3002\u6ca1\u6709\u6536\u5165\uff0c\u53ea\u6709\u652f\u51fa\uff0c\u545c\u547c\uff01\u665a\u4e0a\u7761\u4e86\u4e2a\u6696\u548c\u89c9\u3002 \u7b2c\u4e8c\u5341\u5929-\u5468\u56db-3-22 # \u5199\u5230\uff1a\u67b6\u6784 \u8fd9\u8f6f\u5de5\u7684\u80fd\u529b\u662f\u4e00\u5b9a\u8981\u57f9\u517b\u7684\u3002\u5177\u4f53\u600e\u4e48\u57f9\u517b\uff0c\u518d\u8bae\u3002 \u7b2c\u4e8c\u5341\u4e00\u5929-\u5468\u4e94-3-23 # \u5199\u5230\uff1a\u6587\u732e\u68c0\u7d22 \u53c8\u5f00\u59cb\u505a\u4e86\u4e00\u4ef6\u964c\u751f\u7684\u4e8b\u60c5\uff0c\u5e0c\u671b\u80fd\u6709\u70b9\u6210\u679c\u3002 \u7b2c\u4e8c\u5341\u4e8c\u5929-\u5468\u516d-3-24 # \u4e0eW\u541b\u901b\u5357\u5b8b\u5fa1\u8857\u548c\u6cb3\u574a\u8857\uff0c\u7545\u804a\u3002 \u7b2c\u4e8c\u5341\u4e09\u5929-\u5468\u65e5-3-25 # \u4ec0\u4e48\u4e5f\u6ca1\u5199 \u7b2c\u4e8c\u5341\u56db\u5929-\u5468\u4e00-3-26 # \u6d88\u5931\u7684\u4e00\u5929 \u7b2c\u4e8c\u5341\u4e94\u5929-\u5468\u4e8c-3-27 # \u5199\u5230\uff1a\u6700\u8fd1\u7684\u65e5\u5b50\u8fc7\u5f97\u592a\u5b89\u9038\uff0c\u53c8\u6709\u4e9b\u6625\u56f0\u3002\u7761\u89c9\u4e0d\u89e3\u4e4f\uff1b\u5e0c\u671b\u65e9\u70b9\u8d77\u5e8a\uff0c\u65e9\u70b9\u56de\u53bb\u3002 \u4eca\u5929\u5f00\u4f1a\u3002 \u7b2c\u4e8c\u5341\u516d\u5929-\u5468\u4e09-3-28 # \u4ec0\u4e48\u4e5f\u6ca1\u5199","title":"\u5728\u676d\u5dde\u7684100\u5929-\u7b2c\u5341\u5929"},{"location":"posts/2018-03-28-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E5%8D%81%E5%A4%A9/#100-","text":"","title":"\u5728\u676d\u5dde\u7684100\u5929-\u7b2c\u5341\u5929"},{"location":"posts/2018-03-28-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E5%8D%81%E5%A4%A9/#-3-11","text":"\u8fd9\u7bc7\u65e5\u8bb0\u81f3\u672c\u7bc7\u6587\u7ae0\u6b62\uff0c\u90fd\u662f\u56de\u5fc6\u6027\u8d28\u7684\u3002\u65e5\u8bb0\u65e5\u8bb0\uff0c\u603b\u8981\u575a\u6301\u8bb0\u5f55\u624d\u597d\u3002\u5929\u5929\u8bb0\u5f55\uff0c\u5c31\u8981\u5bf9\u7ec6\u8282\u4e4b\u4e8b\u591a\u8d39\u7b14\u58a8\uff1b\u9694\u5929\u8bb0\u5f55\uff0c\u5374\u53c8\u4e22\u5931\u4e86\u60c5\u666f\u3002\u5475\uff0c\u4e0d\u77e5\u8be5\u5982\u4f55\u6743\u8861\u3002\u6700\u8fd1\u65e5\u8bb0\u6ca1\u8ddf\u4e0a\u7684\u539f\u56e0\u5230\u4e0d\u662f\u524d\u9762\u8fd9\u4e2a\u77db\u76fe\uff0c\u800c\u662f\uff0c\u61d2\u5f97\u8bb0\u3002\u6211\u4e4b\u6240\u4ee5\u80fd\u56de\u5fc6\u8d7717\u5929\u524d\u7684\u4e8b\u60c5\uff0c\u5168\u9760\u81ea\u5df1\u65e5\u5e38\u6d82\u6d82\u753b\u753b\u7684\u7b14\u8bb0\u672c\u4e0a\u7684\u53ea\u8a00\u7247\u8bed\u3002 \u5199\u5230\uff1a\u7814\u7a76\u4e00\u4e0b\u7a7f\u8863\u670d\u3002 \u4eca\u5929\u4e70\u4e86\u4e00\u5957\u6625\u5bd2\u7a7f\u7684\u8863\u670d\uff0c\u8fd9\u4e9b\u5929\u51b7\u5f97\u5389\u5bb3\u3002\u672c\u60f3\u7740\u6765\u5230\u676d\u5dde\u5c31\u76f4\u63a5\u8fc7\u590f\u5929\u4e86\uff0c\u6ca1\u60f3\u5230\u6625\u5bd2\u6599\u5ced\uff0c\u6c14\u6e29\u7adf\u4f4e\u5f97\u53ef\u6015\u3002\u5317\u4eac\u8fd8\u5728\u4f9b\u6696\u671f\uff0c\u6211\u5b9e\u5728\u53d7\u4e0d\u4e86\u8fd9\u822c\u6ca1\u6709\u6696\u6c14\u7684\u6e7f\u51b7\u7684\u65e5\u5b50\u3002","title":"\u7b2c\u5341\u5929-\u5468\u65e5-3-11"},{"location":"posts/2018-03-28-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E5%8D%81%E5%A4%A9/#-3-12","text":"\u5199\u5230\uff1a\u4eca\u5929\u5565\u4e5f\u6ca1\u5e72 \u4eca\u5929\u4e5f\u4e0d\u662f\u4ec0\u4e48\u4e5f\u6ca1\u505a\uff0c\u53ea\u662f\u53c8\u63a5\u89e6\u4e86\u4e00\u4e2a\u65b0\u7684\u9886\u57df\u2014\u2014\u6570\u636e\u53ef\u89c6\u5316\uff0c\u81ea\u5df1\u6709\u4e9b\u675f\u624b\u65e0\u7b56\u7f62\u4e86\u3002\u5927\u6570\u636e\u3001\u6570\u636e\u6316\u6398\u3001data scientist\u4e4b\u7c7b\u7684\u540d\u5b57\uff0c\u6211\u8fd8\u662f\u5f88\u6a21\u7cca\u3002\u53bb\u5e74\u5e74\u4e2d\u521a\u521a\u53c2\u52a0\u9879\u76ee\u7ec4\u7684\u65f6\u5019\uff0c\u4fbf\u767e\u822c\u7684\u4e0d\u9002\u5e94\u2014\u2014AI\u3001\u673a\u5668\u5b66\u4e60\uff0c\u6df1\u5ea6\u5b66\u4e60\uff0c\u54ea\u4e00\u4e2a\u6211\u53c8\u719f\u6089\u5462\uff1f9\u4e2a\u6708\u8fc7\u53bb\u4e86\uff0c\u4f3c\u4e4e\u624d\u6709\u4e9b\u611f\u89c9\u3002\u6570\u636e\u4e91\u4e91\uff0c\u8fd8\u8fdc\u7740\u54e9\u3002\u9664\u4e86\u4e13\u4e1a\u65b9\u9762\u7684\u77e5\u8bc6\u4e4b\u5916\uff0c\u6211\u4e00\u76f4\u8ba4\u4e3a\u81ea\u5df1\u5e94\u8be5\u5728\u6570\u5b66\uff08\u73b0\u4ee3\u6570\u5b66\uff09\u3001\u7b97\u6cd5\uff08\u4f20\u7edf\u7b97\u6cd5\uff09\u548c\u82f1\u8bed\uff08\u8bf4\u3001\u5199\uff09\u4e0a\u591a\u82b1\u529f\u592b\u3002","title":"\u7b2c\u5341\u4e00\u5929-\u5468\u4e00-3-12"},{"location":"posts/2018-03-28-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E5%8D%81%E5%A4%A9/#-3-13","text":"\u5199\u5230\uff1a\u5f00\u4f1a\u3001\u770bandroid\u7684code\u3001\u665a\u4e0a\u804a\u6cd5\u8bed \u5b66\u4e60\u6cd5\u8bed\u7684\u52a8\u673a\u662f\u8fd9\u6837\u7684\u3002\u9ad8\u4e2d\u7684\u65f6\u5019\u6709\u5317\u5927\u7684\u8001\u5e08\u8fc7\u6765\u4ea4\u6d41\uff0c\u4ed6\u7740\u91cd\u8bb2\u4e86\u4ed6\u6c42\u5b66\u7684\u90a3\u4e00\u6bb5\u7ecf\u5386\u3002\u5728\u6e05\u534e\u7684\u65f6\u5019\uff0c\u4ed6\u53bb\u8e6d\u6cd5\u8bed\u8bfe\uff0c\u4e5f\u8ddf\u7740\u5927\u5bb6\u4ea4\u4f5c\u4e1a\uff0c\u4e00\u5802\u8bfe\u4e5f\u4e0d\u5dee\uff0c\u8001\u5e08\u4fbf\u8ba4\u8bc6\u4e86\u4ed6\u3002\u518d\u52a0\u4e0a\u4e86\uff0c\u81ea\u5df1\u673a\u654f\u597d\u5b66\uff0c\u7a0b\u5ea6\u8fd8\u597d\u3002\u7d27\u63a5\u7740\u6e05\u534e\u6709\u4e00\u4e2a\u53bb\u6cd5\u56fd\u7559\u5b66\u7684\u540d\u989d\uff0c\u9009\u62d4\u7684\u662f\u7406\u5de5\u79d1\u7684\u5b66\u751f\uff0c\u4ed6\u4fbf\u5f97\u4e86\u4e2a\u4fbf\u5b9c\uff0c\u8d74\u6cd5\u7559\u5b66\u53bb\u4e86\u3002\u6211\u5bf9\u6cd5\u8bed\u7684\u7b2c\u4e00\u5370\u8c61\u4fbf\u662f\u5982\u6b64\u3002\u6211\u81ea\u5df1\u5728\u5927\u4e8c\u7684\u65f6\u5019\uff0c\u5b66\u6821\u6709\u53bb\u6cd5\u8bfb\u5de5\u7a0b\u5e08\u7684\u9879\u76ee\u3002\u90a3\u65f6\u5019\u76d8\u7b97\u4e86\u5f88\u4e45\uff0c\u7701\u5403\u4fed\u75283\u5e7420\u4e07\u3002\u867d\u7136\u8fd9\u5bf9\u6211\u5bb6\u6765\u8bf4\u4e5f\u662f\u5f88\u5927\u4e00\u7b14\u5f00\u9500\uff0c\u4f46\u662f\u6211\u80fd\u65e9\u65e9\u6bd5\u4e1a\uff083+1+2\uff09\u8fd8\u6709\u53ef\u80fd\u4e89\u53d6\u5230\u5956\u5b66\u91d1\uff0c\u524d\u666f\u4e5f\u662f\u4e0d\u9519\u3002\u5948\u4f55\u5b66\u9662\u91cc\u6839\u672c\u4e0dcare\u8fd9\u4e2a\u9879\u76ee\uff0c\u4e5f\u6ca1\u6709\u8d44\u52a9\u7684\u610f\u5411\uff0c\u518d\u52a0\u4e0a\u5144\u957f\u4e70\u4e86\u623f\u5b50\uff0c\u5bb6\u91cc\u7ecf\u6d4e\u7d27\u5f20\uff0c\u6211\u8fd9\u51fa\u56fd\u7684\u6253\u7b97\u4fbf\u6210\u4e86\u6ce1\u5f71\u3002\u4e0d\u8fc7\uff0c\u8fd9\u6b21\u8ba9\u6211\u5bf9\u6cd5\u8bed\u672c\u8eab\u4ea7\u751f\u4e86\u5174\u8da3\u3002\u65e2\u7136\u53bb\u4e0d\u4e86\u6cd5\u56fd\uff0c\u90a3\u5c31\u5b66\u5b83\u4e00\u4e0b\uff01\u5927\u56db\u65f6\u5019\uff0c\u7ec8\u4e8e\u5f97\u51fa\u70b9\u65f6\u95f4\uff0c\u53c8\u627e\u5230\u8fd9\u4e2a\u9879\u76ee\u7684\u8d1f\u8d23\u8001\u5e08\uff0c\u7533\u8bf7\u53ea\u4e0a\u8bfe\u4e0d\u51fa\u56fd\u3002\u8fd9\u4e9b\u90fd\u53d1\u751f\u57282017\u5e746\u6708\uff0c\u90a3\u65f6\u5019\u4fdd\u7814\u590f\u4ee4\u8425\u5f55\u53d6\u5728\u5373\uff0c\u6211\u9700\u8981\u6743\u8861\u65f6\u95f4\uff0c\u590f\u4ee4\u8425\u5728\u6691\u5047\uff0c\u6cd5\u8bed\u8bfe\u4e5f\u5728\u6691\u5047\u3002\u90a3\u65f6\u5019\u56e0\u590f\u4ee4\u8425\u7533\u8bf7\u88ab\u62d2\uff0c\u5174\u5473\u7d22\u7136\u3002\u6211\u4fbf\u6beb\u4e0d\u72b9\u8c6b\u7684\u53bb\u62a5\u4e86\u540d\uff0c\u8d1f\u8d23\u7684\u8001\u5e08\u4eec\u4e5f\u540c\u610f\u6211\u8fd9\u6837\u53c2\u4e0e\u4ed6\u4eec\u7684\u9879\u76ee\u3002\u7d27\u63a5\u7740\u4fbf\u4e00\u76f4\u5b66\u4e60\u52302018\u5e741\u6708\u4efd\uff0c\u56e0\u81ea\u5df1\u7684\u539f\u56e0\u800c\u4e2d\u65ad\u4e86\u5b66\u4e60\u3002\u76ee\u524d\uff0c\u82f1\u8bed\u662f\u6211\u66f4\u8981\u5b66\u597d\u7684\u4e8b\u60c5\uff0c\u6211\u53ea\u80fd\u6bcf\u5929\u65e9\u4e0a\u542c\u7740\u6cd5\u8bed\u8bfe\u672c\u542c\u529b\uff0c\u4ece\u5bbf\u820d\u8d70\u5230\u98df\u5802\uff0c\u518d\u8d70\u5230\u5b9e\u9a8c\u5ba4\uff0c\u7ec3\u7740\u8033\u6735\uff0c\u751f\u6015\u505c\u4e0b\u4e00\u6bb5\u65f6\u95f4\u7684\u5b66\u4e60\uff0c\u5c31\u4f1a\u628a\u4ee5\u524d\u7684\u77e5\u8bc6\u90fd\u5fd8\u6389\u3002\u6211\u60f3\u57282020\u5e74\u4e4b\u524d\u53bb\u4e00\u8d9f\u6cd5\u56fd\u3002","title":"\u7b2c\u5341\u4e8c\u5929-\u5468\u4e8c-3-13"},{"location":"posts/2018-03-28-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E5%8D%81%E5%A4%A9/#-3-14","text":"\u5199\u5230\uff1a\u5b66\u82f1\u8bed\uff0c\u5e7f\u64ad \u6bcf\u5929\u508d\u665a5\u70b9\u5de6\u53f3\u7684\u65f6\u5019\uff0c\u6d59\u5927\u7389\u6cc9\u7684\u6821\u56ed\u91cc\u5c31\u4f1a\u54cd\u8d77\u5982\u82b1\u9999\u822c\u5f25\u6f2b\u4e8e\u7a7a\u6c14\u4e2d\u7684\u6e29\u99a8\u7684\u5e7f\u64ad\u3002\u7389\u6cc9\u8fd9\u91cc\u6811\u6797\u9634\u7ff3\u7684\u5730\u65b9\uff0c\u5e7f\u64ad\u4fbf\u5728\u5929\u4e0a\uff0c\u8fd9\u91cc\u6728\u77ee\u8349\u4e1b\u7684\u5730\u65b9\uff0c\u5e7f\u64ad\u4fbf\u5728\u5730\u4e0a\u3002\u5929\u4e0a\u5730\u4e0a\u90fd\u6709\u4e86\uff0c\u4e5f\u662f\u548c\u5408\u4e4b\u5883\u4e86\u2014\u2014\u4e0d\u540c\u7684\u89d2\u5ea6\u7684\u58f0\u97f3\u2014\u2014\u7a7a\u95f4\u7684\u8f6e\u8f6c\u3001\u5c42\u6b21\u7684\u5206\u660e\uff0c\u5728\u504c\u5927\u7684\u6821\u56ed\u91cc\u5f62\u6210\u4e86\u4e00\u79cd\u72ec\u7279\u7684\u4f53\u9a8c\u3002","title":"\u7b2c\u5341\u4e09\u5929-\u5468\u4e09-3-14"},{"location":"posts/2018-03-28-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E5%8D%81%E5%A4%A9/#-3-15","text":"\u5199\u5230\uff1a\u8ba8\u8bba\uff0c\u770b\u6587\u732e\uff0c\u8ba8\u8bba\uff0c\u6539android\uff0c\u901b\u8d85\u5e02\uff0c\u53bb\u7403\u573a\uff0c\u5496\u5561 \u6211\u4e4b\u6240\u4ee5\u559c\u6b22\u6253\u7fbd\u6bdb\u7403\u662f\u56e0\u4e3a\u8fd9\u662f\u4e00\u9879\u6ca1\u6709\u8eab\u4f53\u63a5\u89e6\u7684\u3001\u6bd4\u8f83\u6587\u660e\u7684\u8fd0\u52a8\u3002\u4e0d\u8fc7\u51e1\u662f\u8fd0\u52a8\u5c31\u4f1a\u6709\u7ade\u6280\u6027\uff0c\u6211\u52a0\u5165\u4e86\u8fd9\u8fb9\u7684\u7fbd\u534f\uff0c\u5e0c\u671b\u53ef\u4ee5\u4e92\u76f8\u5b66\u4e60\u3001\u5207\u78cb\u3002 \u6211\u4e4b\u6240\u4ee5\u559c\u6b22\u559d\u5496\u5561\u662f\u56e0\u4e3a\uff0c\u6211\u559d\u5496\u5561\u7626\u4e86\u3002\u7626\u4e86\uff0c\u6ca1\u9519\u3002\u53e6\u5916\u5c31\u662f\uff0c\u53ef\u4ee5\u8ddf\u670b\u53cb\u53bb\u5496\u5561\u9986\u804a\u5929\u3002\u6211\u6700\u957f\u7684\u8bb0\u5f55\u662f\u804a\u4e865\u4e2a\u5c0f\u65f6\uff08\u6216\u8005\u66f4\u957f\uff09\uff0c\u6211\u60f3\u53ef\u4ee5\u518d\u957f\u4e00\u4e9b\uff0c\u53ea\u662f\u5f53\u65f6\u592a\u665a\uff0c\u6015\u6ca1\u6709\u8f66\u3002\u804a\u5929\u603b\u662f\u4e00\u4ef6\u653e\u677e\u7684\u4e8b\u60c5\uff0c\u5c31\u8981\u53bb\u4e00\u4e2a\u653e\u677e\u7684\u5730\u65b9\u3002","title":"\u7b2c\u5341\u56db\u5929-\u5468\u56db-3-15"},{"location":"posts/2018-03-28-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E5%8D%81%E5%A4%A9/#-3-16","text":"\u5199\u5230\uff1a\u4eca\u65e9\u8d77\u665a\uff0c\u6ca1\u5403\u65e9\u996d\u3002\u6253\u7403\uff0csoul\uff0cQ\u541b \u8fd9\u8fb9\u98df\u5802\u662f\u5f88\u4fbf\u5b9c\u7684\uff0c\u53ef\u4ee5\u5403\u7684\u5f88\u6e05\u5355\u3002\u53c8\u5065\u5eb7\u53c8\u5b9e\u60e0\u3002\u4e0eQ\u541b\u5403\u996d\uff0c\u4ed6\u9a6c\u4e0a\u6bd5\u4e1a\u8d70\u4e86\u3002\u6211\u4e45\u4ef0Q\u541b\u5927\u540d\u5df2\u4e45\uff0c\u5982\u4eca\u89c1\u5230\u5e90\u5c71\u771f\u9762\u76ee\u7adf\u6709\u4e9b\u4e0d\u77e5\u8bf4\u4ec0\u4e48\u597d\u3002\u4ed6\u4ece\u5bb6\u91cc\u8003\u5165\u540d\u6821\uff0c\u521b\u9020\u4e86\u4e00\u4e9b\u201c\u8bb0\u5f55\u201d\u3002\u8bb0\u5f55\u603b\u662f\u8981\u88ab\u4eba\u6253\u7834\u7684\uff0c\u5e0c\u671b\u6211\u4e4b\u540e\u7684\u4eba\u80fd\u5728\u5b66\u4e1a\u4e0a\u518d\u63a5\u518d\u5389\u3002","title":"\u7b2c\u5341\u4e94\u5929-\u5468\u4e94-3-16"},{"location":"posts/2018-03-28-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E5%8D%81%E5%A4%A9/#-3-17","text":"\u5199\u5230\uff1a\u5e0c\u671b\u81ea\u5df1\u505a\u7684\u6bcf\u4e00\u4ef6\u4e8b\u90fd\u6709\u4e9b\u8fdb\u6b65\u610f\u4e49 \u8fd9\u5f53\u7136\u662f\u9650\u4e8e\u5de5\u4f5c\u4e2d\u3002\u6700\u8fd1\u505a\u4e8b\u60c5\u4f1a\u8003\u8651\u628a\u4e00\u4ef6\u4e8b\u505a\u597d\uff0c\u800c\u4e0d\u662f\u8d70\u9a6c\u89c2\u82b1\u3002\u5c24\u5176\u662f\u7b2c\u4e8c\u6b21\u505a\u8fd9\u4ef6\u4e8b\u6216\u7b2c\u4e09\u6b21\u505a\u8fd9\u4ef6\u4e8b\u7684\u65f6\u5019\u3002\u6311\u9009\u4e3b\u6d41\u7684\u5de5\u5177\u5f80\u5f80\u4e0d\u4f1a\u6709\u8fc7\u9519\uff0c\u8981\u628aword\u5b66\u597d\u3002\u5199\u6587\u6863\u6700\u91cd\u8981\u7684\u8fd8\u662f\u6e05\u6670\u8868\u8fbe\uff0c\u8fd9\u5f80\u5f80\u53ef\u4ee5\u901a\u8fc7\u4e00\u5b9a\u7684\u5f62\u5f0f\u6765\u8868\u73b0\u3002\u5f62\u5f0f\u8981\u4e3a\u5185\u5bb9\u670d\u52a1\uff0c\u5e0c\u671b\u5728\u4eca\u540e\u5199\u6587\u6863\u7684\u6e05\u6670\u8868\u8fbe\u4e0a\u80fd\u591a\u4e0b\u529f\u592b\u3002 \u4e0b\u5348\u901b\u897f\u6e56\uff0c\u508d\u665a\u53bb\u8868\u54e5\u5bb6","title":"\u7b2c\u5341\u516d\u5929-\u5468\u516d-3-17"},{"location":"posts/2018-03-28-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E5%8D%81%E5%A4%A9/#-3-18","text":"\u4ece\u8868\u54e5\u5bb6\u56de\u6765\uff0c\u91cd\u65b0\u7ed9\u7535\u8111\u5b89\u88c5\u4e86\u7cfb\u7edf","title":"\u7b2c\u5341\u516d\u5929-\u5468\u65e5-3-18"},{"location":"posts/2018-03-28-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E5%8D%81%E5%A4%A9/#-3-19","text":"\u4ec0\u4e48\u4e5f\u6ca1\u5199\uff0c\u51c6\u5907\u7b2c\u4e8c\u5929\u5f00\u4f1a","title":"\u7b2c\u5341\u4e03\u5929-\u5468\u4e00-3-19"},{"location":"posts/2018-03-28-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E5%8D%81%E5%A4%A9/#-3-20","text":"\u4ec0\u4e48\u4e5f\u6ca1\u5199\uff0c\u8fd9\u4e00\u5929\u5f00\u4f1a","title":"\u7b2c\u5341\u516b\u5929-\u5468\u4e8c-3-20"},{"location":"posts/2018-03-28-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E5%8D%81%E5%A4%A9/#-3-21","text":"\u5199\u5230\uff1a\u4e70\u4e86\u7535\u70ed\u6bef \u5bd2\u6f6e\u6765\u88ad\uff0c\u6c14\u6e29\u9aa4\u964d\u3002\u7ec8\u4e8e\u4e0b\u4e86\u51b3\u5fc3\u4e70\u4e86\u7535\u70ed\u6bef\u3002\u8fd9\u4e2a\u6708\u5b9e\u5728\u6709\u4e9b\u7834\u8d39\uff0c\u6bcf\u4e00\u5e74\u603b\u6709\u51e0\u4e2a\u6708\u662f\u7834\u8d39\u7684\u3002\u6ca1\u6709\u6536\u5165\uff0c\u53ea\u6709\u652f\u51fa\uff0c\u545c\u547c\uff01\u665a\u4e0a\u7761\u4e86\u4e2a\u6696\u548c\u89c9\u3002","title":"\u7b2c\u5341\u4e5d\u5929-\u5468\u4e09-3-21"},{"location":"posts/2018-03-28-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E5%8D%81%E5%A4%A9/#-3-22","text":"\u5199\u5230\uff1a\u67b6\u6784 \u8fd9\u8f6f\u5de5\u7684\u80fd\u529b\u662f\u4e00\u5b9a\u8981\u57f9\u517b\u7684\u3002\u5177\u4f53\u600e\u4e48\u57f9\u517b\uff0c\u518d\u8bae\u3002","title":"\u7b2c\u4e8c\u5341\u5929-\u5468\u56db-3-22"},{"location":"posts/2018-03-28-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E5%8D%81%E5%A4%A9/#-3-23","text":"\u5199\u5230\uff1a\u6587\u732e\u68c0\u7d22 \u53c8\u5f00\u59cb\u505a\u4e86\u4e00\u4ef6\u964c\u751f\u7684\u4e8b\u60c5\uff0c\u5e0c\u671b\u80fd\u6709\u70b9\u6210\u679c\u3002","title":"\u7b2c\u4e8c\u5341\u4e00\u5929-\u5468\u4e94-3-23"},{"location":"posts/2018-03-28-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E5%8D%81%E5%A4%A9/#-3-24","text":"\u4e0eW\u541b\u901b\u5357\u5b8b\u5fa1\u8857\u548c\u6cb3\u574a\u8857\uff0c\u7545\u804a\u3002","title":"\u7b2c\u4e8c\u5341\u4e8c\u5929-\u5468\u516d-3-24"},{"location":"posts/2018-03-28-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E5%8D%81%E5%A4%A9/#-3-25","text":"\u4ec0\u4e48\u4e5f\u6ca1\u5199","title":"\u7b2c\u4e8c\u5341\u4e09\u5929-\u5468\u65e5-3-25"},{"location":"posts/2018-03-28-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E5%8D%81%E5%A4%A9/#-3-26","text":"\u6d88\u5931\u7684\u4e00\u5929","title":"\u7b2c\u4e8c\u5341\u56db\u5929-\u5468\u4e00-3-26"},{"location":"posts/2018-03-28-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E5%8D%81%E5%A4%A9/#-3-27","text":"\u5199\u5230\uff1a\u6700\u8fd1\u7684\u65e5\u5b50\u8fc7\u5f97\u592a\u5b89\u9038\uff0c\u53c8\u6709\u4e9b\u6625\u56f0\u3002\u7761\u89c9\u4e0d\u89e3\u4e4f\uff1b\u5e0c\u671b\u65e9\u70b9\u8d77\u5e8a\uff0c\u65e9\u70b9\u56de\u53bb\u3002 \u4eca\u5929\u5f00\u4f1a\u3002","title":"\u7b2c\u4e8c\u5341\u4e94\u5929-\u5468\u4e8c-3-27"},{"location":"posts/2018-03-28-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E5%8D%81%E5%A4%A9/#-3-28","text":"\u4ec0\u4e48\u4e5f\u6ca1\u5199","title":"\u7b2c\u4e8c\u5341\u516d\u5929-\u5468\u4e09-3-28"},{"location":"posts/2018-04-07-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%83%E5%A4%A9/","text":"\u5728\u676d\u5dde\u7684100\u5929-\u7b2c\u4e8c\u5341\u4e03\u5929 # \u8fd9\u7bc7\u65e5\u8bb0\u81f3\u672c\u7bc7\u6587\u7ae0\u6b62\uff0c\u53c8\u90fd\u662f\u56de\u5fc6\u6027\u8d28\u7684\u3002\u8fd9\u8bf4\u660e\u8fd9\u4e00\u6bb5\u65f6\u95f4\u5de5\u4f5c\u5916\u7684\u601d\u7eea\u4fbf\u5c11\u4e86\uff0c\u6bd4\u8f83\u6295\u5165\u3002\u867d\u7136\u65e5\u8bb0\u6ca1\u6709\u5929\u5929\u8bb0\uff0c\u4f46\u662f\u8fd9\u5374\u5f88\u771f\u5b9e\u5730\u53cd\u6620\u6211\u7684\u751f\u6d3b\u72b6\u6001\uff0c\u8fd9\u6bb5\u65f6\u95f4\u751f\u6d3b\u5145\u5b9e\uff0c\u5fc3\u7eea\u4ea6\u5e73\u9759\u3002\u8fc7\u53bb\u90fd\u662f\u5199\u672a\u516c\u5f00\u7684\u65e5\u8bb0\uff0c\u5f00\u5fc3\u4e5f\u8bb0\uff0c\u4f24\u5fc3\u4e5f\u8bb0\uff0c\u8fd9\u6b21\u516c\u5f00\u65e5\u8bb0\u4e5f\u662f\u4e00\u6837\u7684\uff0c\u65e2\u7136\u65e0\u5927\u559c\u5927\u60b2\uff0c\u5c31\u4e5f\u6ca1\u4ec0\u4e48\u53ef\u8bb0\u5f55\u7684\u4e86\u3002 \u4e09\u6708\u672b\u56db\u6708\u521d\uff0c\u751f\u6d3b\u5728\u676d\u5dde\u8212\u670d\u5f97\u5f88\uff0c\u9633\u5149\u660e\u5a9a\u65f6\uff0c\u72b9\u5982\u5929\u964d\u6c90\u6d74\uff0c\u65e5\u8f89\u6d78\u5165\u808c\u80a4\uff0c\u50cf\u662f\u725b\u5976\u822c\u67d4\u6ed1\uff1b\u6216\u6709\u9634\u96e8\uff0c\u6c14\u6e29\u7565\u964d\uff0c\u665a\u4e0a\u5374\u4e5f\u51c9\u5f97\u60ec\u610f\uff0c\u547c\u5438\u6e05\u65b0\u5f97\u4f3c\u82b1\u9999\u822c\u6c81\u4eba\u5fc3\u813e\uff0c\u4e5f\u5fae\u51c9\u2014\u2014\u8212\u7545\u5f97\u50cf\u5904\u4e8e\u5c71\u91ce\u8349\u6797\u4e4b\u95f4\uff1b\u518d\u52a0\u4e0a\u5404\u5904\u5f00\u653e\u7684\u8349\u5730\u548c\u5b09\u7b11\u7684\u4eba\u7fa4\uff0c\u5fc3\u60c5\u597d\u6bd4\u5feb\u6d3b\u795e\u4ed9\u4e86\u3002 \u7b2c\u4e8c\u5341\u4e03\u5929-\u5468\u56db-3-29 # \u4eca\u5929\u53c8\u662f\u6d88\u5931\u7684\u4e00\u5929\uff0c\u4e0d\u77e5\u9053\u5728\u5e72\u4ec0\u4e48\uff0c\u7b14\u8bb0\u672c\u4e0a\u65e0\u4efb\u4f55\u75d5\u8ff9 \u7b2c\u4e8c\u5341\u516b\u5929-\u5468\u4e94-3-30 # \u770b\u7b14\u8bb0\u4eca\u5929\u8ddf\u5e08\u5144\u8ba8\u8bba\u4e86\u4e00\u4e0b\u8bfe\u9898 \u7b2c\u4e8c\u5341\u4e5d\u5929-\u5468\u516d-3-31 # \u5b9e\u9a8c\u5ba4\u7ec4\u7ec7\u722c\u8001\u548c\u5c71\u3002\u7531\u6d59\u5927\u6821\u533a\u897f\u4fa7\u8001\u548c\u5c71\u4e1c\u9e93\u800c\u4e0a\uff0c\u8fc7\u7f8e\u5973\u5c71\u3001\u5317\u9ad8\u5cf0\uff0c\u6cbf\u5c0f\u8def\u4e0b\u5c71\u5230\u6cd5\u559c\u5bfa\u3002\u540e\u5728\u7075\u9690\u516c\u4ea4\u7ad9\u9644\u8fd1\u5403\u996d\u3002\u4eca\u5929\u8d70\u4e862\u4e07\u591a\u6b65\uff0c\u4e0d\u8fc7\u8fd8\u662f\u6ca1\u6709\u62ff\u5230\u7b2c\u4e00\u540d\u3002 \u7b2c\u4e09\u5341\u5929-\u5468\u65e5-4-1 # \u8fd9\u8ba1\u7b97\u80fd\u529b\u56f0\u6270\u6211\u5f88\u4e45\uff0c\u4e3a\u4ec0\u4e48\u81ea\u5df1\u8fde\u4e00\u4e2a\u62d6\u5f0f\u90fd\u7b97\u4e0d\u660e\u767d\uff1f\u60f3\u60f3\u5927\u6982\u662f\u601d\u7ef4\u7684\u95ee\u9898\uff0c\u4e0d\u77e5\u9053\u4ec0\u4e48\u65f6\u5019\u81ea\u5df1\u5c31\u6709\u4e9b\u4e0d\u9002\u5408\u8003\u8651\u7ec6\u8282\uff0c\u800c\u662f\u559c\u6b22\u7ffb\u7ffb\u5730\u6982\u62ec\uff0c\u60f3\u5feb\u901f\u5b66\u4e60\u3002\u516c\u5f0f\u4e0d\u8981\u7528\u9519\u662f\u9996\u8981\u7684\uff0c\u5176\u6b21\u5c31\u662f\u6284\u5199\u548c\u8ba1\u7b97\u8981\u5206\u5f00\uff0c\u5426\u5219\u5f88\u96be\u987e\u53ca\u6240\u6709\u65b9\u9762\u3002\u4eca\u5929\u53c8\u91cd\u65b0\u5f00\u59cb\u5ba1\u89c6\u81ea\u5df1\u7684\u65e5\u7a0b\u8868\uff0c\u5e0c\u671b\u6bcf\u5929\u53ef\u4ee5\u770b\u4e00\u4e9b\u7b97\u6cd5\u548c\u6570\u5b66\u5efa\u6a21\uff1b\u4e5f\u5e0c\u671b\u6bcf\u5468\u6709\u4e00\u5b9a\u7684\u8fd0\u52a8\u548c\u4f11\u606f\u3002 \u7b2c\u4e09\u5341\u4e00\u5929-\u5468\u4e00-4-2 # \u5199\u62a5\u544a \u7b2c\u4e09\u5341\u4e8c\u5929-\u5468\u4e8c-4-3 # \u5f00\u4f1a\uff0c\u8ba4\u4e3a\u591a\u4eba\u534f\u4f5c\u5185\u5bb9\u5206\u6563\u4e0d\u96c6\u4e2d\uff0c\u8001\u5e08\u63d0\u4e86\u65b0\u7684\u8bfe\u9898\u3002 \u53bb\u9752\u4e4b\u575e\u5403\u9ebb\u8fa3\u70eb\uff0c\u4e0d\u591f\u8fa3\uff01\u4e0d\u8fc7\u5929\u6c14\u591f\u70ed\uff0c\u6c57\u6d41\u5939\u80cc\uff01 \u7b2c\u4e09\u5341\u4e09\u5929-\u5468\u4e09-4-4 # \u770b\u8bba\u6587\uff0c\u8ba8\u8bba \u7b2c\u4e09\u5341\u56db\u5929-\u5468\u56db-4-5 # \u770b\u8bba\u6587\uff0c\u8ba8\u8bba \u7b2c\u4e09\u5341\u4e94\u5929-\u5468\u4e94-4-6 # \u5b9e\u9a8c\u5ba4\u7ec4\u7ec7\u53bb\u897f\u6eaa\u6e7f\u5730\u82b1\u671d\u8282\uff0c\u6211\u4eec\u4fbf\u7528\u652f\u4ed8\u5b9d\u8bc6\u82b1\u7684\u529f\u80fd\u201c\u8d4f\u73a9\u201d\u4e86\u4e00\u8def\uff0c\u54c8\u54c8\uff0c\u4e0d\u4ea6\u4e50\u4e4e\u3002\u540e\u53bb\u897f\u6eaa\u535a\u7269\u9986\uff0c\u6bd5\uff0c\u51fa\u6765\u5403\u996d\u3002\u56de\uff0c\u547c\u547c\u5927\u776114\u5c0f\u65f6\uff0c\u79ef\u4e4f\u96be\u89e3\uff0c\u552f\u6709\u7761\u89c9\uff01 \u8bf4\u8d77\u8d4f\u82b1\uff0c\u81ea\u5df1\u8fd8\u662f\u4f24\u611f\u5f97\u591a\uff0c\u5c24\u5176\u662f\u6843\u82b1\u6597\u8273\u4e4b\u65f6\uff0c\u5f80\u4e8b\u4fbf\u6d8c\u4e0a\u5fc3\u5934 \u53bb\u5e74\u4eca\u65e5\u6b64\u95e8\u4e2d\uff0c\u4eba\u9762\u6843\u82b1\u76f8\u5e94\u7ea2 \u4eba\u9762\u4e0d\u77e5\u4f55\u5904\u53bb\uff0c\u6843\u82b1\u4f9d\u65e7\u7b11\u6625\u98ce \u5c31\u8ba9\u5f80\u4e8b\u968f\u98ce\u90fd\u53bb\u4e86\u5427\uff01 \u7b2c\u4e09\u5341\u516d\u5929-\u5468\u516d-4-7 # \u7b2c\u4e00\u6b21\u53c2\u52a0\u5b66\u672f\u4f1a\u8bae\uff01\u5168\u7a0b\u90fd\u8ddf\u4e86\u4e0b\u6765\uff0c\u867d\u7136\u6709\u9694\u884c\u5982\u9694\u5c71\u611f\u89c9\uff0c\u4f46\u662f\u4e5f\u662f\u5927\u5f00\u773c\u754c\uff01","title":"\u5728\u676d\u5dde\u7684100\u5929-\u7b2c\u4e8c\u5341\u4e03\u5929"},{"location":"posts/2018-04-07-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%83%E5%A4%A9/#100-","text":"\u8fd9\u7bc7\u65e5\u8bb0\u81f3\u672c\u7bc7\u6587\u7ae0\u6b62\uff0c\u53c8\u90fd\u662f\u56de\u5fc6\u6027\u8d28\u7684\u3002\u8fd9\u8bf4\u660e\u8fd9\u4e00\u6bb5\u65f6\u95f4\u5de5\u4f5c\u5916\u7684\u601d\u7eea\u4fbf\u5c11\u4e86\uff0c\u6bd4\u8f83\u6295\u5165\u3002\u867d\u7136\u65e5\u8bb0\u6ca1\u6709\u5929\u5929\u8bb0\uff0c\u4f46\u662f\u8fd9\u5374\u5f88\u771f\u5b9e\u5730\u53cd\u6620\u6211\u7684\u751f\u6d3b\u72b6\u6001\uff0c\u8fd9\u6bb5\u65f6\u95f4\u751f\u6d3b\u5145\u5b9e\uff0c\u5fc3\u7eea\u4ea6\u5e73\u9759\u3002\u8fc7\u53bb\u90fd\u662f\u5199\u672a\u516c\u5f00\u7684\u65e5\u8bb0\uff0c\u5f00\u5fc3\u4e5f\u8bb0\uff0c\u4f24\u5fc3\u4e5f\u8bb0\uff0c\u8fd9\u6b21\u516c\u5f00\u65e5\u8bb0\u4e5f\u662f\u4e00\u6837\u7684\uff0c\u65e2\u7136\u65e0\u5927\u559c\u5927\u60b2\uff0c\u5c31\u4e5f\u6ca1\u4ec0\u4e48\u53ef\u8bb0\u5f55\u7684\u4e86\u3002 \u4e09\u6708\u672b\u56db\u6708\u521d\uff0c\u751f\u6d3b\u5728\u676d\u5dde\u8212\u670d\u5f97\u5f88\uff0c\u9633\u5149\u660e\u5a9a\u65f6\uff0c\u72b9\u5982\u5929\u964d\u6c90\u6d74\uff0c\u65e5\u8f89\u6d78\u5165\u808c\u80a4\uff0c\u50cf\u662f\u725b\u5976\u822c\u67d4\u6ed1\uff1b\u6216\u6709\u9634\u96e8\uff0c\u6c14\u6e29\u7565\u964d\uff0c\u665a\u4e0a\u5374\u4e5f\u51c9\u5f97\u60ec\u610f\uff0c\u547c\u5438\u6e05\u65b0\u5f97\u4f3c\u82b1\u9999\u822c\u6c81\u4eba\u5fc3\u813e\uff0c\u4e5f\u5fae\u51c9\u2014\u2014\u8212\u7545\u5f97\u50cf\u5904\u4e8e\u5c71\u91ce\u8349\u6797\u4e4b\u95f4\uff1b\u518d\u52a0\u4e0a\u5404\u5904\u5f00\u653e\u7684\u8349\u5730\u548c\u5b09\u7b11\u7684\u4eba\u7fa4\uff0c\u5fc3\u60c5\u597d\u6bd4\u5feb\u6d3b\u795e\u4ed9\u4e86\u3002","title":"\u5728\u676d\u5dde\u7684100\u5929-\u7b2c\u4e8c\u5341\u4e03\u5929"},{"location":"posts/2018-04-07-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%83%E5%A4%A9/#-3-29","text":"\u4eca\u5929\u53c8\u662f\u6d88\u5931\u7684\u4e00\u5929\uff0c\u4e0d\u77e5\u9053\u5728\u5e72\u4ec0\u4e48\uff0c\u7b14\u8bb0\u672c\u4e0a\u65e0\u4efb\u4f55\u75d5\u8ff9","title":"\u7b2c\u4e8c\u5341\u4e03\u5929-\u5468\u56db-3-29"},{"location":"posts/2018-04-07-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%83%E5%A4%A9/#-3-30","text":"\u770b\u7b14\u8bb0\u4eca\u5929\u8ddf\u5e08\u5144\u8ba8\u8bba\u4e86\u4e00\u4e0b\u8bfe\u9898","title":"\u7b2c\u4e8c\u5341\u516b\u5929-\u5468\u4e94-3-30"},{"location":"posts/2018-04-07-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%83%E5%A4%A9/#-3-31","text":"\u5b9e\u9a8c\u5ba4\u7ec4\u7ec7\u722c\u8001\u548c\u5c71\u3002\u7531\u6d59\u5927\u6821\u533a\u897f\u4fa7\u8001\u548c\u5c71\u4e1c\u9e93\u800c\u4e0a\uff0c\u8fc7\u7f8e\u5973\u5c71\u3001\u5317\u9ad8\u5cf0\uff0c\u6cbf\u5c0f\u8def\u4e0b\u5c71\u5230\u6cd5\u559c\u5bfa\u3002\u540e\u5728\u7075\u9690\u516c\u4ea4\u7ad9\u9644\u8fd1\u5403\u996d\u3002\u4eca\u5929\u8d70\u4e862\u4e07\u591a\u6b65\uff0c\u4e0d\u8fc7\u8fd8\u662f\u6ca1\u6709\u62ff\u5230\u7b2c\u4e00\u540d\u3002","title":"\u7b2c\u4e8c\u5341\u4e5d\u5929-\u5468\u516d-3-31"},{"location":"posts/2018-04-07-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%83%E5%A4%A9/#-4-1","text":"\u8fd9\u8ba1\u7b97\u80fd\u529b\u56f0\u6270\u6211\u5f88\u4e45\uff0c\u4e3a\u4ec0\u4e48\u81ea\u5df1\u8fde\u4e00\u4e2a\u62d6\u5f0f\u90fd\u7b97\u4e0d\u660e\u767d\uff1f\u60f3\u60f3\u5927\u6982\u662f\u601d\u7ef4\u7684\u95ee\u9898\uff0c\u4e0d\u77e5\u9053\u4ec0\u4e48\u65f6\u5019\u81ea\u5df1\u5c31\u6709\u4e9b\u4e0d\u9002\u5408\u8003\u8651\u7ec6\u8282\uff0c\u800c\u662f\u559c\u6b22\u7ffb\u7ffb\u5730\u6982\u62ec\uff0c\u60f3\u5feb\u901f\u5b66\u4e60\u3002\u516c\u5f0f\u4e0d\u8981\u7528\u9519\u662f\u9996\u8981\u7684\uff0c\u5176\u6b21\u5c31\u662f\u6284\u5199\u548c\u8ba1\u7b97\u8981\u5206\u5f00\uff0c\u5426\u5219\u5f88\u96be\u987e\u53ca\u6240\u6709\u65b9\u9762\u3002\u4eca\u5929\u53c8\u91cd\u65b0\u5f00\u59cb\u5ba1\u89c6\u81ea\u5df1\u7684\u65e5\u7a0b\u8868\uff0c\u5e0c\u671b\u6bcf\u5929\u53ef\u4ee5\u770b\u4e00\u4e9b\u7b97\u6cd5\u548c\u6570\u5b66\u5efa\u6a21\uff1b\u4e5f\u5e0c\u671b\u6bcf\u5468\u6709\u4e00\u5b9a\u7684\u8fd0\u52a8\u548c\u4f11\u606f\u3002","title":"\u7b2c\u4e09\u5341\u5929-\u5468\u65e5-4-1"},{"location":"posts/2018-04-07-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%83%E5%A4%A9/#-4-2","text":"\u5199\u62a5\u544a","title":"\u7b2c\u4e09\u5341\u4e00\u5929-\u5468\u4e00-4-2"},{"location":"posts/2018-04-07-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%83%E5%A4%A9/#-4-3","text":"\u5f00\u4f1a\uff0c\u8ba4\u4e3a\u591a\u4eba\u534f\u4f5c\u5185\u5bb9\u5206\u6563\u4e0d\u96c6\u4e2d\uff0c\u8001\u5e08\u63d0\u4e86\u65b0\u7684\u8bfe\u9898\u3002 \u53bb\u9752\u4e4b\u575e\u5403\u9ebb\u8fa3\u70eb\uff0c\u4e0d\u591f\u8fa3\uff01\u4e0d\u8fc7\u5929\u6c14\u591f\u70ed\uff0c\u6c57\u6d41\u5939\u80cc\uff01","title":"\u7b2c\u4e09\u5341\u4e8c\u5929-\u5468\u4e8c-4-3"},{"location":"posts/2018-04-07-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%83%E5%A4%A9/#-4-4","text":"\u770b\u8bba\u6587\uff0c\u8ba8\u8bba","title":"\u7b2c\u4e09\u5341\u4e09\u5929-\u5468\u4e09-4-4"},{"location":"posts/2018-04-07-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%83%E5%A4%A9/#-4-5","text":"\u770b\u8bba\u6587\uff0c\u8ba8\u8bba","title":"\u7b2c\u4e09\u5341\u56db\u5929-\u5468\u56db-4-5"},{"location":"posts/2018-04-07-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%83%E5%A4%A9/#-4-6","text":"\u5b9e\u9a8c\u5ba4\u7ec4\u7ec7\u53bb\u897f\u6eaa\u6e7f\u5730\u82b1\u671d\u8282\uff0c\u6211\u4eec\u4fbf\u7528\u652f\u4ed8\u5b9d\u8bc6\u82b1\u7684\u529f\u80fd\u201c\u8d4f\u73a9\u201d\u4e86\u4e00\u8def\uff0c\u54c8\u54c8\uff0c\u4e0d\u4ea6\u4e50\u4e4e\u3002\u540e\u53bb\u897f\u6eaa\u535a\u7269\u9986\uff0c\u6bd5\uff0c\u51fa\u6765\u5403\u996d\u3002\u56de\uff0c\u547c\u547c\u5927\u776114\u5c0f\u65f6\uff0c\u79ef\u4e4f\u96be\u89e3\uff0c\u552f\u6709\u7761\u89c9\uff01 \u8bf4\u8d77\u8d4f\u82b1\uff0c\u81ea\u5df1\u8fd8\u662f\u4f24\u611f\u5f97\u591a\uff0c\u5c24\u5176\u662f\u6843\u82b1\u6597\u8273\u4e4b\u65f6\uff0c\u5f80\u4e8b\u4fbf\u6d8c\u4e0a\u5fc3\u5934 \u53bb\u5e74\u4eca\u65e5\u6b64\u95e8\u4e2d\uff0c\u4eba\u9762\u6843\u82b1\u76f8\u5e94\u7ea2 \u4eba\u9762\u4e0d\u77e5\u4f55\u5904\u53bb\uff0c\u6843\u82b1\u4f9d\u65e7\u7b11\u6625\u98ce \u5c31\u8ba9\u5f80\u4e8b\u968f\u98ce\u90fd\u53bb\u4e86\u5427\uff01","title":"\u7b2c\u4e09\u5341\u4e94\u5929-\u5468\u4e94-4-6"},{"location":"posts/2018-04-07-%E5%9C%A8%E6%9D%AD%E5%B7%9E%E7%9A%84100%E5%A4%A9-%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%83%E5%A4%A9/#-4-7","text":"\u7b2c\u4e00\u6b21\u53c2\u52a0\u5b66\u672f\u4f1a\u8bae\uff01\u5168\u7a0b\u90fd\u8ddf\u4e86\u4e0b\u6765\uff0c\u867d\u7136\u6709\u9694\u884c\u5982\u9694\u5c71\u611f\u89c9\uff0c\u4f46\u662f\u4e5f\u662f\u5927\u5f00\u773c\u754c\uff01","title":"\u7b2c\u4e09\u5341\u516d\u5929-\u5468\u516d-4-7"},{"location":"posts/2019-11-23-CCS-London-Summary/","text":"Summary of CCS'19 (London) # \u8ba1\u7b97\u673a\u548c\u901a\u4fe1\u5b89\u5168\u4f1a\u8bae (ACM Conference on Computer and Communications Security, CCS) \u662f\u5b89\u5168\u9886\u57df\u7684\u8001\u724c\u9876\u7ea7\u56fd\u9645\u4f1a\u8bae\uff0c\u5b83\u4e0eS&P\u3001Usenix Security\u548cNDSS\u5e76\u79f0\u4e3a\u5b89\u5168\u56db\u5927\u4f1a\u3002CCS\u662fSIGSAC\u548c\u7f8e\u56fd\u901a\u4fe1\u534f\u4f1a\u7ec4\u7ec7ACM\u4e3e\u529e\u7684\u5e74\u5ea6\u65d7\u8230\u4f1a\u8bae\uff0c\u5b83\u6c47\u96c6\u4e86\u6765\u81ea\u4e16\u754c\u5404\u5730\u7684\u4fe1\u606f\u5b89\u5168\u7814\u7a76\u4eba\u5458\u3001\u4ece\u4e1a\u4eba\u5458\u3001\u5f00\u53d1\u4eba\u5458\u548c\u7528\u6237, \u63a2\u7d22\u524d\u6cbf\u7684\u60f3\u6cd5\u548c\u7ed3\u679c\u3002CCS 2019\u6765\u5230\u4e86\u6cf0\u6664\u58eb\u6cb3\u7554\u53e4\u8001\u53c8\u73b0\u4ee3\u7684\u4f26\u6566\uff0c\u672c\u6b21CCS\u4f1a\u8bae\u5171\u63a5\u6536\u8bba\u6587149\u7bc7\uff0c\u6db5\u76d6\u4e86\u9690\u79c1\u6570\u636e\u5b89\u5168\u3001\u79fb\u52a8\u5b89\u5168\u3001\u4e91\u5b89\u5168\u3001\u673a\u5668\u5b66\u4e60\u5b89\u5168\u3001\u5bc6\u7801\u5b66\u3001\u53ef\u4fe1\u8ba1\u7b97\u548c\u533a\u5757\u94fe\u5b89\u5168\u7b49\u4e3b\u9898\u3002\u4e09\u5929\u7684main conference\u5171\u5b89\u6392\u4e8650\u4e2asession\u3002\u5176\u4e2d\u5b89\u5168\u8ba1\u7b97\uff08Secure Computation\uff09\u5b89\u6392\u4e865\u4e2asession\uff0c\u533a\u5757\u94fe\u5b89\u5168\uff08Blockchain\uff09\u5b89\u6392\u4e864\u4e2a\uff0c\u673a\u5668\u5b66\u4e60\u5b89\u5168\uff08ML Security\uff09\u548c\u5f62\u5f0f\u5316\u5206\u6790\uff08Formal Analysis\uff09\u5404\u5b89\u6392\u4e863\u4e2a\uff0c\u8fd9\u4e9bsession\u7684\u6570\u91cf\u80fd\u591f\u53cd\u6620\u51fa\u5f53\u4e0b\u8f83\u4e3a\u70ed\u95e8\u7684\u7814\u7a76\u65b9\u5411\u3002\u9664\u4e86main conference\u4e4b\u5916\uff0c\u4f1a\u8bae\u8fd8\u5b89\u6392\u4e86\u76f8\u5173workshop\u3001poster\u548cpanel discussion\u7b49\u73af\u8282\u4f9b\u7814\u7a76\u8005\u4ea4\u6d41\u5176\u4ed6\u7684\u524d\u6cbf\u7814\u7a76\u3002 \u53c2\u52a0\u9876\u4f1a\u8ba9\u6211\u53d7\u76ca\u826f\u591a\u3002\u4e3b\u8981\u5f52\u7ed3\u4e3a\u4e24\u4e2a\u95ee\u9898\uff0c\u7b2c\u4e00\u662f\u8bed\u8a00\u95ee\u9898\uff1b\u7b2c\u4e8c\u662f\u201c\u9876\u4f1a\u201d\u3001\u201c\u9876\u7ea7\u7814\u7a76\u201d\u3001\u201c\u9876\u7ea7\u7814\u7a76\u8005\u201d\u548c\u201c\u9876\u7ea7\u7814\u7a76\u673a\u6784\u201d\u51fa\u73b0\u5728\u6211\u9762\u524d\u65f6\u81ea\u5df1\u7684\u601d\u8003\u3002 \u4e2d\u56fd\u5b66\u751f\u7684\u82f1\u8bed\u5b66\u4e60\u5927\u81f4\u5206\u4e3a\u51e0\u4e2a\u9636\u6bb5\uff0c\u5e7c\u513f\u65f6\u7684\u6559\u80b2\u3001\u5c0f\u521d\u65f6\u7684\u6559\u80b2\u3001\u9ad8\u4e2d\u65f6\u7684\u6559\u80b2\u3001\u5927\u5b66\u65f6\u7684\u6559\u80b2\u4ee5\u53ca\u5de5\u4f5c\u4e2d\u7684\u81ea\u6211\u6559\u80b2\u3002\u8bed\u8a00\u5f53\u7136\u662f\u8d8a\u65e9\u5b66\u4e60\u8d8a\u597d\uff0c\u6709\u51e0\u4e2a\u5173\u952e\u7684\u8282\u70b9\u80fd\u8ba9\u4eba\u6709\u663e\u8457\u7684\u63d0\u9ad8\uff0c\u7b2c\u4e00\u662f\u9ad8\u8003\uff0c\u5176\u5bf9\u8bed\u6cd5\u7684\u8bad\u7ec3\u662f\u5173\u952e\u7684\uff0c\u9605\u8bfb\u80fd\u529b\u5df2\u7ecf\u5177\u5907\u3002\u7b2c\u4e8c\u662f\u5927\u5b66\uff0c\u5176\u5bf9\u8bcd\u6c47\u91cf\u7684\u63d0\u9ad8\u662f\u91cd\u8981\u7684\u3002\u5982\u679c\u5728\u5927\u5b66\u671f\u95f4\uff0c\u6709\u65f6\u95f4\u548c\u91d1\u94b1\u62a5\u8003\u96c5\u601d\u3001\u6258\u798f\u548cGRE\uff0c\u90a3\u5bf9\u82f1\u8bed\u7684\u542c\u8bf4\u8bfb\u5199\u4f1a\u6709\u4e00\u4e2a\u8d28\u7684\u63d0\u9ad8\u3002\u7b2c\u4e09\u662f\u5de5\u4f5c\u671f\u95f4\uff0c\u5728\u542c\u529b\u3001\u53e3\u8bed\u4ee5\u53ca\u5199\u4f5c\u4f1a\u6709\u8f83\u5927\u7684\u63d0\u5347\u3002\u4ee5\u4e0a\u7684\u8ba8\u8bba\u9650\u4e8e\u6b63\u5e38\u7684\u8303\u56f4\uff0c\u4e0d\u8003\u8651\u5b66\u751f\u53c2\u52a0\u8865\u4e60\u73ed\u3001\u5bb6\u957f\u662f\u53cc\u8bed\u8005\u6216\u8005\u5b66\u751f\u5728\u56fd\u9645\u5b66\u6821\u4e0a\u5b66\u3002\u5c31\u5b9e\u9645\u7ecf\u9a8c\u800c\u8a00\uff0c\u5728\u53c2\u52a0\u4f1a\u8bae\u8fc7\u7a0b\u4e2d\uff0c\u4e2d\u56fd\u4eba\u8bb2\u7684\u82f1\u8bed\u53ef\u4ee5\u542c\u61c2\uff0c\u82f1\u8bed\u6bcd\u8bed\u8005\u8bb2\u7684\u82f1\u8bed\u53ef\u4ee5\u5927\u81f4\u542c\u660e\u767d\uff0c\u82e5\u662f\u4e00\u4e9b\u53e3\u97f3\u4e25\u91cd\u5730\u533a\u7684\u4eba\u8bb2\u8bdd\uff0c\u6211\u53ef\u5c31\u4e0d\u77e5\u9053\u4ed6\u4eec\u5728\u8bf4\u4e9b\u4ec0\u4e48\u4e86\u3002\u7ed3\u5408\u8fc7\u53bb\u7684\u82f1\u8bed\u5b66\u4e60\u7ecf\u9a8c\uff0c\u548c\u672a\u6765\u7684\u82f1\u8bed\u5199\u4f5c\u9700\u6c42\uff0c\u5728\u7814\u7a76\u751f\u671f\u95f4\uff0c\u81ea\u5df1\u5bf9\u81ea\u5df1\u7684\u82f1\u8bed\u5b66\u4e60\u8fd8\u9700\u4e0a\u5fc3\u3002\u6211\u4eca\u540e\uff0c\u77ed\u671f\u7684\u8ba1\u5212\u4e0a\uff0c\u5e94\u8be5\u5bf9\u542c\u529b\u548c\u8bed\u6cd5\u5f3a\u52a0\u7ec3\u4e60\uff0c\u4ee5\u6ee1\u8db3\u542c\u529b\u548c\u5199\u4f5c\u7684\u9700\u6c42\u3002 \u4ec0\u4e48\u6837\u7684\u7814\u7a76\u673a\u6784\u79f0\u5f97\u4e0a\u9876\u7ea7\u7814\u7a76\u673a\u6784\uff1fCSRanking\u91c7\u7528\u8be5\u7814\u7a76\u673a\u6784\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u5404\u4e2a\u9886\u57df\u4e2d\u9876\u7ea7\u4f1a\u8bae\u4e0a\u51fa\u73b0\u7684\u6b63\u5f0f\u8bba\u6587\u62166\u9875\u4ee5\u4e0a\u77ed\u6587\u7684\u6570\u91cf\u6765\u786e\u5b9a\u8be5\u7814\u7a76\u673a\u6784\u7684\u6d3b\u8dc3\u6027\uff0c\u6392\u540d\u9760\u524d\u7684\u5219\u88ab\u6210\u4e3a\u9876\u7ea7\u7814\u7a76\u673a\u6784\u3002\u6b64\u8ba1\u7b97\u9690\u5f0f\u5730\u5f52\u4e00\u5316\u4e86\u5f15\u7528\u6570\u91cf\u548c\u9886\u57df\u5927\u5c0f\uff0c\u89c4\u907f\u4e86\u4eba\u4e3a\u5f15\u7528\u4f5c\u5f0a\u7684\u98ce\u9669\u3002\u6839\u636e2019\u5e74\u672b\u7684\u6700\u65b0\u7edf\u8ba1\u7ed3\u679c\uff0c\u6d59\u5927\u5728\u8ba1\u7b97\u673a\u5b89\u5168\u9886\u57df\u4e9a\u6d32\u7b2c\u4e8c\uff0c\u4e16\u754c\u7b2c40\u3002CSRanking\u4ee3\u7801\u5f00\u653e\uff0c\u6240\u6709\u4eba\u90fd\u53ef\u4ee5\u68c0\u9a8c\u5176\u7ed3\u679c\uff0c\u8f83\u4e3a\u516c\u5e73\u516c\u6b63\u3002 \u4ec0\u4e48\u6837\u7684\u7814\u7a76\u8005\u79f0\u5f97\u4e0a\u9876\u7ea7\u7814\u7a76\u8005\uff1f\u8fd9\u4e2a\u8981\u770b\u4e00\u4e2a\u7814\u7a76\u8005\u6b63\u5904\u4e8e\u4ec0\u4e48\u9636\u6bb5\u3002\u5982\u679c\u4ed6\u662f\u4e00\u4e2a\u535a\u58eb\u751f\uff0c\u5728\u535a\u58eb\u4e34\u8fd1\u6bd5\u4e1a\u7684\u65f6\u5019\uff0c\u8003\u5bdf\u4ed6\u7684\u7814\u7a76\u662f\u5426\u5177\u6709\u5f00\u521b\u65b0\u3001\u5176\u7814\u7a76\u6210\u679c\u662f\u5426\u4ee3\u8868\u4e86\u8fd9\u4e2a\u7814\u7a76\u9886\u57df\u7684\u6700\u65b0\u8fdb\u5c55\uff0c\u5982\u679c\u7b54\u6848\u90fd\u662f\u80af\u5b9a\u7684\uff0c\u5219\u5176\u79f0\u5f97\u4e0a\u662f\u9876\u7ea7\u7814\u7a76\u8005\u3002\u5728\u5de5\u4f5c\u4e2d\uff0c\u7ba1\u7406\u3001\u670d\u52a1\u548c\u6559\u5b66\u7684\u5de5\u4f5c\u589e\u591a\uff0c\u5982\u679c\u4ed6\u8fd8\u80fd\u4fdd\u8bc1\u5176\u56e2\u961f\u7684\u79d1\u7814\u8d28\u91cf\uff0c\u90a3\u4e48\u4ed6\u4ecd\u7136\u79f0\u5f97\u4e0a\u662f\u9876\u7ea7\u7684\u7814\u7a76\u8005\uff0c\u5426\u5219\u8981\u8003\u8651\u5176\u4ed6\u7684\u56e0\u7d20\u5e26\u6765\u7684\u5f71\u54cd\uff0c\u6216\u4e3a\u9876\u7ea7\u7684\u7ba1\u7406\u8005\u3001\u9876\u7ea7\u7684\u6559\u5e08\u7b49\uff0c\u4e0d\u80fd\u4e00\u76f4\u79f0\u4e4b\u4e3a\u9876\u7ea7\u7684\u7814\u7a76\u8005\u3002 \u4ec0\u4e48\u6837\u7684\u7814\u7a76\u79f0\u5f97\u4e0a\u4e3a\u9876\u7ea7\u7814\u7a76\uff1f\u4ece\u64cd\u4f5c\u4e0a\u770b\uff0c\u53d1\u5230\u9876\u4f1a\u4e0a\u7684\u7814\u7a76\u8ba4\u4e3a\u662f\u9876\u7ea7\u7814\u7a76\u3002\u53c2\u52a0\u8fc7\u9876\u4f1a\u4e4b\u540e\uff0c\u9876\u4f1a\u4e0a\u8bba\u6587\u8d8a\u6765\u8d8a\u591a\uff0c\u95e8\u7c7b\u8d8a\u6765\u8d8a\u591a\uff0c\u90a3\u4e48\u9876\u7ea7\u7684\u7814\u7a76\u8981\u4ece\u201c\u5c0f\u540c\u884c\u201d\u7684\u89d2\u5ea6\u8003\u8651\u3002\u6709\u4e00\u4e9b\u504f\u95e8\u7684\u7814\u7a76\uff0c\u9876\u4f1a\u6536\u4e86\uff0c\u4f46\u662f\u770b\u4e0d\u5230\u5176\u5bf9\u540e\u6765\u7684\u8bba\u6587\u7684\u5f71\u54cd\uff0c\u6216\u8bb8\u5c31\u4e0d\u597d\u8bc4\u4ef7\u5b83\uff0c\u518d\u6216\u8005\u5982\u679c\u5b66\u672f\u59d4\u5458\u4f1a\u4e13\u95e8\u5bf9\u5176\u8fdb\u884c\u8ba8\u8bba\uff0c\u5e76\u58f0\u660e\u5176\u4ef7\u503c\uff0c\u5012\u4e5f\u53ef\u4ee5\u8bf4\u5b83\u662f\u4e00\u4e2a\u9876\u7ea7\u7814\u7a76\u3002\u603b\u4e4b\uff0c\u5982\u679c\u8be5\u7814\u7a76\u5728\u9876\u4f1a\u4e0a\u53d1\u8868\uff0c\u5f00\u521b\u4e86\u65b0\u7684\u7814\u7a76\u65b9\u5411\uff0c\u6216\u5728\u65e2\u6709\u7684\u7814\u7a76\u65b9\u5411\u4e0a\u6709\u7406\u8bba\u3001\u65b9\u6cd5\u7684\u8d21\u732e\uff0c\u6216\u6709\u5168\u9762\u6df1\u523b\u7684\u603b\u7ed3\uff0c\u90fd\u53ef\u4ee5\u79f0\u4e4b\u4e3a\u9876\u7ea7\u7814\u7a76\u3002 \u4ec0\u4e48\u6837\u7684\u7814\u7a76\u79f0\u5f97\u4e0a\u4e3a\u9876\u7ea7\u4f1a\u8bae\uff0c\u8fd9\u4e2a\u95ee\u9898\u5df2\u7ecf\u88ab\u89e3\u51b3\uff0c\u8ba1\u7b97\u673a\u884c\u4e1a\u5df2\u7ecf\u6709\u81ea\u5df1\u7684\u540d\u4e49\u6807\u51c6\uff0c\u800c\u4e14\u653f\u7b56\u4e0a\u5b66\u6821\u4e5f\u4e0d\u4f1a\u963b\u788d\u5404\u4e2a\u5b9e\u9a8c\u5ba4\u7684\u5177\u4f53\u6bd5\u4e1a\u6761\u4ef6\u3002 \u8ba8\u8bba\u4e86\u8fd9\u4e48\u591a\uff0c\u53ef\u7528\u4e00\u53e5\u8bdd\u603b\u7ed3\uff1a\u9769\u547d\u5c1a\u672a\u6210\u529f\uff0c\u540c\u5fd7\u4ecd\u9700\u52aa\u529b\uff01","title":"Summary of CCS'19 (London)"},{"location":"posts/2019-11-23-CCS-London-Summary/#summary-of-ccs19-london","text":"\u8ba1\u7b97\u673a\u548c\u901a\u4fe1\u5b89\u5168\u4f1a\u8bae (ACM Conference on Computer and Communications Security, CCS) \u662f\u5b89\u5168\u9886\u57df\u7684\u8001\u724c\u9876\u7ea7\u56fd\u9645\u4f1a\u8bae\uff0c\u5b83\u4e0eS&P\u3001Usenix Security\u548cNDSS\u5e76\u79f0\u4e3a\u5b89\u5168\u56db\u5927\u4f1a\u3002CCS\u662fSIGSAC\u548c\u7f8e\u56fd\u901a\u4fe1\u534f\u4f1a\u7ec4\u7ec7ACM\u4e3e\u529e\u7684\u5e74\u5ea6\u65d7\u8230\u4f1a\u8bae\uff0c\u5b83\u6c47\u96c6\u4e86\u6765\u81ea\u4e16\u754c\u5404\u5730\u7684\u4fe1\u606f\u5b89\u5168\u7814\u7a76\u4eba\u5458\u3001\u4ece\u4e1a\u4eba\u5458\u3001\u5f00\u53d1\u4eba\u5458\u548c\u7528\u6237, \u63a2\u7d22\u524d\u6cbf\u7684\u60f3\u6cd5\u548c\u7ed3\u679c\u3002CCS 2019\u6765\u5230\u4e86\u6cf0\u6664\u58eb\u6cb3\u7554\u53e4\u8001\u53c8\u73b0\u4ee3\u7684\u4f26\u6566\uff0c\u672c\u6b21CCS\u4f1a\u8bae\u5171\u63a5\u6536\u8bba\u6587149\u7bc7\uff0c\u6db5\u76d6\u4e86\u9690\u79c1\u6570\u636e\u5b89\u5168\u3001\u79fb\u52a8\u5b89\u5168\u3001\u4e91\u5b89\u5168\u3001\u673a\u5668\u5b66\u4e60\u5b89\u5168\u3001\u5bc6\u7801\u5b66\u3001\u53ef\u4fe1\u8ba1\u7b97\u548c\u533a\u5757\u94fe\u5b89\u5168\u7b49\u4e3b\u9898\u3002\u4e09\u5929\u7684main conference\u5171\u5b89\u6392\u4e8650\u4e2asession\u3002\u5176\u4e2d\u5b89\u5168\u8ba1\u7b97\uff08Secure Computation\uff09\u5b89\u6392\u4e865\u4e2asession\uff0c\u533a\u5757\u94fe\u5b89\u5168\uff08Blockchain\uff09\u5b89\u6392\u4e864\u4e2a\uff0c\u673a\u5668\u5b66\u4e60\u5b89\u5168\uff08ML Security\uff09\u548c\u5f62\u5f0f\u5316\u5206\u6790\uff08Formal Analysis\uff09\u5404\u5b89\u6392\u4e863\u4e2a\uff0c\u8fd9\u4e9bsession\u7684\u6570\u91cf\u80fd\u591f\u53cd\u6620\u51fa\u5f53\u4e0b\u8f83\u4e3a\u70ed\u95e8\u7684\u7814\u7a76\u65b9\u5411\u3002\u9664\u4e86main conference\u4e4b\u5916\uff0c\u4f1a\u8bae\u8fd8\u5b89\u6392\u4e86\u76f8\u5173workshop\u3001poster\u548cpanel discussion\u7b49\u73af\u8282\u4f9b\u7814\u7a76\u8005\u4ea4\u6d41\u5176\u4ed6\u7684\u524d\u6cbf\u7814\u7a76\u3002 \u53c2\u52a0\u9876\u4f1a\u8ba9\u6211\u53d7\u76ca\u826f\u591a\u3002\u4e3b\u8981\u5f52\u7ed3\u4e3a\u4e24\u4e2a\u95ee\u9898\uff0c\u7b2c\u4e00\u662f\u8bed\u8a00\u95ee\u9898\uff1b\u7b2c\u4e8c\u662f\u201c\u9876\u4f1a\u201d\u3001\u201c\u9876\u7ea7\u7814\u7a76\u201d\u3001\u201c\u9876\u7ea7\u7814\u7a76\u8005\u201d\u548c\u201c\u9876\u7ea7\u7814\u7a76\u673a\u6784\u201d\u51fa\u73b0\u5728\u6211\u9762\u524d\u65f6\u81ea\u5df1\u7684\u601d\u8003\u3002 \u4e2d\u56fd\u5b66\u751f\u7684\u82f1\u8bed\u5b66\u4e60\u5927\u81f4\u5206\u4e3a\u51e0\u4e2a\u9636\u6bb5\uff0c\u5e7c\u513f\u65f6\u7684\u6559\u80b2\u3001\u5c0f\u521d\u65f6\u7684\u6559\u80b2\u3001\u9ad8\u4e2d\u65f6\u7684\u6559\u80b2\u3001\u5927\u5b66\u65f6\u7684\u6559\u80b2\u4ee5\u53ca\u5de5\u4f5c\u4e2d\u7684\u81ea\u6211\u6559\u80b2\u3002\u8bed\u8a00\u5f53\u7136\u662f\u8d8a\u65e9\u5b66\u4e60\u8d8a\u597d\uff0c\u6709\u51e0\u4e2a\u5173\u952e\u7684\u8282\u70b9\u80fd\u8ba9\u4eba\u6709\u663e\u8457\u7684\u63d0\u9ad8\uff0c\u7b2c\u4e00\u662f\u9ad8\u8003\uff0c\u5176\u5bf9\u8bed\u6cd5\u7684\u8bad\u7ec3\u662f\u5173\u952e\u7684\uff0c\u9605\u8bfb\u80fd\u529b\u5df2\u7ecf\u5177\u5907\u3002\u7b2c\u4e8c\u662f\u5927\u5b66\uff0c\u5176\u5bf9\u8bcd\u6c47\u91cf\u7684\u63d0\u9ad8\u662f\u91cd\u8981\u7684\u3002\u5982\u679c\u5728\u5927\u5b66\u671f\u95f4\uff0c\u6709\u65f6\u95f4\u548c\u91d1\u94b1\u62a5\u8003\u96c5\u601d\u3001\u6258\u798f\u548cGRE\uff0c\u90a3\u5bf9\u82f1\u8bed\u7684\u542c\u8bf4\u8bfb\u5199\u4f1a\u6709\u4e00\u4e2a\u8d28\u7684\u63d0\u9ad8\u3002\u7b2c\u4e09\u662f\u5de5\u4f5c\u671f\u95f4\uff0c\u5728\u542c\u529b\u3001\u53e3\u8bed\u4ee5\u53ca\u5199\u4f5c\u4f1a\u6709\u8f83\u5927\u7684\u63d0\u5347\u3002\u4ee5\u4e0a\u7684\u8ba8\u8bba\u9650\u4e8e\u6b63\u5e38\u7684\u8303\u56f4\uff0c\u4e0d\u8003\u8651\u5b66\u751f\u53c2\u52a0\u8865\u4e60\u73ed\u3001\u5bb6\u957f\u662f\u53cc\u8bed\u8005\u6216\u8005\u5b66\u751f\u5728\u56fd\u9645\u5b66\u6821\u4e0a\u5b66\u3002\u5c31\u5b9e\u9645\u7ecf\u9a8c\u800c\u8a00\uff0c\u5728\u53c2\u52a0\u4f1a\u8bae\u8fc7\u7a0b\u4e2d\uff0c\u4e2d\u56fd\u4eba\u8bb2\u7684\u82f1\u8bed\u53ef\u4ee5\u542c\u61c2\uff0c\u82f1\u8bed\u6bcd\u8bed\u8005\u8bb2\u7684\u82f1\u8bed\u53ef\u4ee5\u5927\u81f4\u542c\u660e\u767d\uff0c\u82e5\u662f\u4e00\u4e9b\u53e3\u97f3\u4e25\u91cd\u5730\u533a\u7684\u4eba\u8bb2\u8bdd\uff0c\u6211\u53ef\u5c31\u4e0d\u77e5\u9053\u4ed6\u4eec\u5728\u8bf4\u4e9b\u4ec0\u4e48\u4e86\u3002\u7ed3\u5408\u8fc7\u53bb\u7684\u82f1\u8bed\u5b66\u4e60\u7ecf\u9a8c\uff0c\u548c\u672a\u6765\u7684\u82f1\u8bed\u5199\u4f5c\u9700\u6c42\uff0c\u5728\u7814\u7a76\u751f\u671f\u95f4\uff0c\u81ea\u5df1\u5bf9\u81ea\u5df1\u7684\u82f1\u8bed\u5b66\u4e60\u8fd8\u9700\u4e0a\u5fc3\u3002\u6211\u4eca\u540e\uff0c\u77ed\u671f\u7684\u8ba1\u5212\u4e0a\uff0c\u5e94\u8be5\u5bf9\u542c\u529b\u548c\u8bed\u6cd5\u5f3a\u52a0\u7ec3\u4e60\uff0c\u4ee5\u6ee1\u8db3\u542c\u529b\u548c\u5199\u4f5c\u7684\u9700\u6c42\u3002 \u4ec0\u4e48\u6837\u7684\u7814\u7a76\u673a\u6784\u79f0\u5f97\u4e0a\u9876\u7ea7\u7814\u7a76\u673a\u6784\uff1fCSRanking\u91c7\u7528\u8be5\u7814\u7a76\u673a\u6784\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u5404\u4e2a\u9886\u57df\u4e2d\u9876\u7ea7\u4f1a\u8bae\u4e0a\u51fa\u73b0\u7684\u6b63\u5f0f\u8bba\u6587\u62166\u9875\u4ee5\u4e0a\u77ed\u6587\u7684\u6570\u91cf\u6765\u786e\u5b9a\u8be5\u7814\u7a76\u673a\u6784\u7684\u6d3b\u8dc3\u6027\uff0c\u6392\u540d\u9760\u524d\u7684\u5219\u88ab\u6210\u4e3a\u9876\u7ea7\u7814\u7a76\u673a\u6784\u3002\u6b64\u8ba1\u7b97\u9690\u5f0f\u5730\u5f52\u4e00\u5316\u4e86\u5f15\u7528\u6570\u91cf\u548c\u9886\u57df\u5927\u5c0f\uff0c\u89c4\u907f\u4e86\u4eba\u4e3a\u5f15\u7528\u4f5c\u5f0a\u7684\u98ce\u9669\u3002\u6839\u636e2019\u5e74\u672b\u7684\u6700\u65b0\u7edf\u8ba1\u7ed3\u679c\uff0c\u6d59\u5927\u5728\u8ba1\u7b97\u673a\u5b89\u5168\u9886\u57df\u4e9a\u6d32\u7b2c\u4e8c\uff0c\u4e16\u754c\u7b2c40\u3002CSRanking\u4ee3\u7801\u5f00\u653e\uff0c\u6240\u6709\u4eba\u90fd\u53ef\u4ee5\u68c0\u9a8c\u5176\u7ed3\u679c\uff0c\u8f83\u4e3a\u516c\u5e73\u516c\u6b63\u3002 \u4ec0\u4e48\u6837\u7684\u7814\u7a76\u8005\u79f0\u5f97\u4e0a\u9876\u7ea7\u7814\u7a76\u8005\uff1f\u8fd9\u4e2a\u8981\u770b\u4e00\u4e2a\u7814\u7a76\u8005\u6b63\u5904\u4e8e\u4ec0\u4e48\u9636\u6bb5\u3002\u5982\u679c\u4ed6\u662f\u4e00\u4e2a\u535a\u58eb\u751f\uff0c\u5728\u535a\u58eb\u4e34\u8fd1\u6bd5\u4e1a\u7684\u65f6\u5019\uff0c\u8003\u5bdf\u4ed6\u7684\u7814\u7a76\u662f\u5426\u5177\u6709\u5f00\u521b\u65b0\u3001\u5176\u7814\u7a76\u6210\u679c\u662f\u5426\u4ee3\u8868\u4e86\u8fd9\u4e2a\u7814\u7a76\u9886\u57df\u7684\u6700\u65b0\u8fdb\u5c55\uff0c\u5982\u679c\u7b54\u6848\u90fd\u662f\u80af\u5b9a\u7684\uff0c\u5219\u5176\u79f0\u5f97\u4e0a\u662f\u9876\u7ea7\u7814\u7a76\u8005\u3002\u5728\u5de5\u4f5c\u4e2d\uff0c\u7ba1\u7406\u3001\u670d\u52a1\u548c\u6559\u5b66\u7684\u5de5\u4f5c\u589e\u591a\uff0c\u5982\u679c\u4ed6\u8fd8\u80fd\u4fdd\u8bc1\u5176\u56e2\u961f\u7684\u79d1\u7814\u8d28\u91cf\uff0c\u90a3\u4e48\u4ed6\u4ecd\u7136\u79f0\u5f97\u4e0a\u662f\u9876\u7ea7\u7684\u7814\u7a76\u8005\uff0c\u5426\u5219\u8981\u8003\u8651\u5176\u4ed6\u7684\u56e0\u7d20\u5e26\u6765\u7684\u5f71\u54cd\uff0c\u6216\u4e3a\u9876\u7ea7\u7684\u7ba1\u7406\u8005\u3001\u9876\u7ea7\u7684\u6559\u5e08\u7b49\uff0c\u4e0d\u80fd\u4e00\u76f4\u79f0\u4e4b\u4e3a\u9876\u7ea7\u7684\u7814\u7a76\u8005\u3002 \u4ec0\u4e48\u6837\u7684\u7814\u7a76\u79f0\u5f97\u4e0a\u4e3a\u9876\u7ea7\u7814\u7a76\uff1f\u4ece\u64cd\u4f5c\u4e0a\u770b\uff0c\u53d1\u5230\u9876\u4f1a\u4e0a\u7684\u7814\u7a76\u8ba4\u4e3a\u662f\u9876\u7ea7\u7814\u7a76\u3002\u53c2\u52a0\u8fc7\u9876\u4f1a\u4e4b\u540e\uff0c\u9876\u4f1a\u4e0a\u8bba\u6587\u8d8a\u6765\u8d8a\u591a\uff0c\u95e8\u7c7b\u8d8a\u6765\u8d8a\u591a\uff0c\u90a3\u4e48\u9876\u7ea7\u7684\u7814\u7a76\u8981\u4ece\u201c\u5c0f\u540c\u884c\u201d\u7684\u89d2\u5ea6\u8003\u8651\u3002\u6709\u4e00\u4e9b\u504f\u95e8\u7684\u7814\u7a76\uff0c\u9876\u4f1a\u6536\u4e86\uff0c\u4f46\u662f\u770b\u4e0d\u5230\u5176\u5bf9\u540e\u6765\u7684\u8bba\u6587\u7684\u5f71\u54cd\uff0c\u6216\u8bb8\u5c31\u4e0d\u597d\u8bc4\u4ef7\u5b83\uff0c\u518d\u6216\u8005\u5982\u679c\u5b66\u672f\u59d4\u5458\u4f1a\u4e13\u95e8\u5bf9\u5176\u8fdb\u884c\u8ba8\u8bba\uff0c\u5e76\u58f0\u660e\u5176\u4ef7\u503c\uff0c\u5012\u4e5f\u53ef\u4ee5\u8bf4\u5b83\u662f\u4e00\u4e2a\u9876\u7ea7\u7814\u7a76\u3002\u603b\u4e4b\uff0c\u5982\u679c\u8be5\u7814\u7a76\u5728\u9876\u4f1a\u4e0a\u53d1\u8868\uff0c\u5f00\u521b\u4e86\u65b0\u7684\u7814\u7a76\u65b9\u5411\uff0c\u6216\u5728\u65e2\u6709\u7684\u7814\u7a76\u65b9\u5411\u4e0a\u6709\u7406\u8bba\u3001\u65b9\u6cd5\u7684\u8d21\u732e\uff0c\u6216\u6709\u5168\u9762\u6df1\u523b\u7684\u603b\u7ed3\uff0c\u90fd\u53ef\u4ee5\u79f0\u4e4b\u4e3a\u9876\u7ea7\u7814\u7a76\u3002 \u4ec0\u4e48\u6837\u7684\u7814\u7a76\u79f0\u5f97\u4e0a\u4e3a\u9876\u7ea7\u4f1a\u8bae\uff0c\u8fd9\u4e2a\u95ee\u9898\u5df2\u7ecf\u88ab\u89e3\u51b3\uff0c\u8ba1\u7b97\u673a\u884c\u4e1a\u5df2\u7ecf\u6709\u81ea\u5df1\u7684\u540d\u4e49\u6807\u51c6\uff0c\u800c\u4e14\u653f\u7b56\u4e0a\u5b66\u6821\u4e5f\u4e0d\u4f1a\u963b\u788d\u5404\u4e2a\u5b9e\u9a8c\u5ba4\u7684\u5177\u4f53\u6bd5\u4e1a\u6761\u4ef6\u3002 \u8ba8\u8bba\u4e86\u8fd9\u4e48\u591a\uff0c\u53ef\u7528\u4e00\u53e5\u8bdd\u603b\u7ed3\uff1a\u9769\u547d\u5c1a\u672a\u6210\u529f\uff0c\u540c\u5fd7\u4ecd\u9700\u52aa\u529b\uff01","title":"Summary of CCS'19 (London)"},{"location":"posts/2020-11-18-buildroot-qemu-x86_64/","text":"Buildroot, QEMU and Linux kernel for x86_64 # How to build a minimum Linux kernel with customized rootfs and run it with QEMU? Download Buildroot # Please go here to download the latest Buildroot package and decompress it. Add new external packages (user-space program and kernel module) (optional) # To write an external user space program or install an external kernel module to validate your idea, e.g., to reproducing a bug, I refer to this and this . I have created a repo with support of the external user space program and kernel module. Please git clone https://github.com/cyruscyliu/buildroot-external-packages.git . Compile Buildroot # The directory layout is like below. . \u251c\u2500\u2500 buildroot-2022.02.4 \u2514\u2500\u2500 buildroot-external-packages Go to buildroot If no external packages, just make qemu_x86_64_defconfig , otherwise, make BR2_EXTERNAL=\"$(pwd)/../buildroot-external-packages\" qemu_x86_64_defconfig . If there is an old config, make oldconfig or make BR2_EXTERNAL=\"$(pwd)/../buildroot-external-packages\" oldconfig . Before going on, we should update the C library and the TTY target by make menuconfig . Toolchain -> C library -> glibc System Configuration -> Run a getty (login prompt) after boot -> TTY port -> ttyS0 We can optionally enable lspci -v to show more information on PCI devices. Target Packages -> Hardware Handling -> pciutils We can optionally enable the external packages. External options -> check what you want make with -jN to accelerate your compilation. Launch all of them # qemu-system-x86_64 \\ -M pc \\ -kernel ./path/to/bzImage \\ -drive file=./path/to/rootfs.ext2,if=virtio,format=raw \\ -append \"root=/dev/vda console=ttyS0\" \\ -net user,hostfwd=tcp:127.0.0.1:3333-:22 \\ -net nic,model=virtio \\ -nographic If the external packages exist, please do as follows. $ modprobe hello hello: loading out-of-tree module taints kernel. hello init $ desg ... hello: loading out-of-tree module taints kernel. hello init $ userspace_program Hello World!","title":"Buildroot, QEMU and Linux kernel for x86_64"},{"location":"posts/2020-11-18-buildroot-qemu-x86_64/#buildroot-qemu-and-linux-kernel-for-x86_64","text":"How to build a minimum Linux kernel with customized rootfs and run it with QEMU?","title":"Buildroot, QEMU and Linux kernel for x86_64"},{"location":"posts/2020-11-18-buildroot-qemu-x86_64/#download-buildroot","text":"Please go here to download the latest Buildroot package and decompress it.","title":"Download Buildroot"},{"location":"posts/2020-11-18-buildroot-qemu-x86_64/#add-new-external-packages-user-space-program-and-kernel-module-optional","text":"To write an external user space program or install an external kernel module to validate your idea, e.g., to reproducing a bug, I refer to this and this . I have created a repo with support of the external user space program and kernel module. Please git clone https://github.com/cyruscyliu/buildroot-external-packages.git .","title":"Add new external packages (user-space program and kernel module) (optional)"},{"location":"posts/2020-11-18-buildroot-qemu-x86_64/#compile-buildroot","text":"The directory layout is like below. . \u251c\u2500\u2500 buildroot-2022.02.4 \u2514\u2500\u2500 buildroot-external-packages Go to buildroot If no external packages, just make qemu_x86_64_defconfig , otherwise, make BR2_EXTERNAL=\"$(pwd)/../buildroot-external-packages\" qemu_x86_64_defconfig . If there is an old config, make oldconfig or make BR2_EXTERNAL=\"$(pwd)/../buildroot-external-packages\" oldconfig . Before going on, we should update the C library and the TTY target by make menuconfig . Toolchain -> C library -> glibc System Configuration -> Run a getty (login prompt) after boot -> TTY port -> ttyS0 We can optionally enable lspci -v to show more information on PCI devices. Target Packages -> Hardware Handling -> pciutils We can optionally enable the external packages. External options -> check what you want make with -jN to accelerate your compilation.","title":"Compile Buildroot"},{"location":"posts/2020-11-18-buildroot-qemu-x86_64/#launch-all-of-them","text":"qemu-system-x86_64 \\ -M pc \\ -kernel ./path/to/bzImage \\ -drive file=./path/to/rootfs.ext2,if=virtio,format=raw \\ -append \"root=/dev/vda console=ttyS0\" \\ -net user,hostfwd=tcp:127.0.0.1:3333-:22 \\ -net nic,model=virtio \\ -nographic If the external packages exist, please do as follows. $ modprobe hello hello: loading out-of-tree module taints kernel. hello init $ desg ... hello: loading out-of-tree module taints kernel. hello init $ userspace_program Hello World!","title":"Launch all of them"},{"location":"posts/2020-11-30-wllvm-clang-qemu-x86_64/","text":"Clang, wllvm, passes, QEMU/Linux kernel for x86_64 # Building QEMU/Linux kernel with Clang enables running LLVM passes on these code and performing static analysis. One option is to run the passes during the compilation, the other is to run the passes (opt) on an generated LLVM bitcode file (wllvm). This blog is planning to show both, but with limited time bugdet, I will first explain how to run the passes on the generated bitcode files. Build QEMU with Clang # $ clang --version Ubuntu clang version 14.0.0-1ubuntu1.1 Target: x86_64-pc-linux-gnu Thread model: posix InstalledDir: /usr/bin $ cd qemu $ cat VERSION 8.2.50 $ ./configure --target-list=x86_64-softmmu --cc=clang $ make Build Linux kernel with Clang # Offical Documentation Build QEMU with wllvm # $ pip install wllvm $ export LLVM_COMPILER=clang $ # if no clang/clang++/llvm-link/llvm-ar executables $ # export LLVM_CC_NAME=clang-14 $ # export LLVM_CXX_NAME=clang++-14 $ # export LLVM_LINK_NAME=llvm-link-14 $ # export LLVM_AR_NAME=llvm-ar-14 $ cd qemu-4.0.0 $ ./configure --target-list=x86_64-softmmu --cc=wllvm $ make $ extract-bc build/qemu-system-x86_64 $ # You will find the bitcode file build/qemu-system-x86_64.bc I met one kind of warnings WARNING:Did not recognize the compiler flag \"-mcx16\" , but it seemed harmless. I will update more if any flaw caused by this warning. I met another error objcopy: src/xxx: failed to find link section for section xx . Please update your objcopy to 2.31 or upper. Build Linux kernel with wllvm # #!/bin/bash -x # python3 -m pip install wllvm # assume clang/llvm 14 LINUX_TAG=$1 if ! test -d linux-$LINUX_TAG ; then git clone --depth 1 --branch v$LINUX_TAG \\ git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git \\ linux-$LINUX_TAG fi export LLVM_COMPILER=clang export LLVM_CC_NAME=clang-14 export LLVM_CXX_NAME=clang-14 export LLVM_LINK_NAME=llvm-link-14 export LLVM_AR_NAME=llvm-ar-14 pushd linux-$LINUX_TAG make HOSTCC=wllvm CC=wllvm x86_64_defconfig make HOSTCC=wllvm CC=wllvm -j20 extract-bc vmlinux popd Run LLVM passes with opt # First, try a builtin pass on PLACEHOLDER.bc (either vmlinux.bc or qemu-system-x86_64.bc). LLVM has a new pass manager but the documentation of opt is outdated. Please check this for more information. opt-14 -passes='instcount' PLACEHOLDER.bc -o /dev/null 2>&1 -debug-pass-manager Second, develop your own LLVM pass and load it with opt. I usually use llvm-tutor to quickly develop external LLVM passes. $ # install llvm-17 $ export LLVM_DIR=/usr/lib/llvm-17 $ mkdir build $ cd build $ cmake -DLT_LLVM_INSTALL_DIR=$LLVM_DIR /path/to/llvm-tutor/HelloWorld/ $ make $ # run this LLVM pass $ $LLVM_DIR/bin/opt \\ -load-pass-plugin ./libHelloWorld.so -passes=hello-world -disable-output \\ PLACEHOLDER.bc Debug LLVM passes # https://releases.llvm.org/1.5/docs/WritingAnLLVMPass.html#debughints","title":"Clang, wllvm, passes, QEMU/Linux kernel for x86_64"},{"location":"posts/2020-11-30-wllvm-clang-qemu-x86_64/#clang-wllvm-passes-qemulinux-kernel-for-x86_64","text":"Building QEMU/Linux kernel with Clang enables running LLVM passes on these code and performing static analysis. One option is to run the passes during the compilation, the other is to run the passes (opt) on an generated LLVM bitcode file (wllvm). This blog is planning to show both, but with limited time bugdet, I will first explain how to run the passes on the generated bitcode files.","title":"Clang, wllvm, passes, QEMU/Linux kernel for x86_64"},{"location":"posts/2020-11-30-wllvm-clang-qemu-x86_64/#build-qemu-with-clang","text":"$ clang --version Ubuntu clang version 14.0.0-1ubuntu1.1 Target: x86_64-pc-linux-gnu Thread model: posix InstalledDir: /usr/bin $ cd qemu $ cat VERSION 8.2.50 $ ./configure --target-list=x86_64-softmmu --cc=clang $ make","title":"Build QEMU with Clang"},{"location":"posts/2020-11-30-wllvm-clang-qemu-x86_64/#build-linux-kernel-with-clang","text":"Offical Documentation","title":"Build Linux kernel with Clang"},{"location":"posts/2020-11-30-wllvm-clang-qemu-x86_64/#build-qemu-with-wllvm","text":"$ pip install wllvm $ export LLVM_COMPILER=clang $ # if no clang/clang++/llvm-link/llvm-ar executables $ # export LLVM_CC_NAME=clang-14 $ # export LLVM_CXX_NAME=clang++-14 $ # export LLVM_LINK_NAME=llvm-link-14 $ # export LLVM_AR_NAME=llvm-ar-14 $ cd qemu-4.0.0 $ ./configure --target-list=x86_64-softmmu --cc=wllvm $ make $ extract-bc build/qemu-system-x86_64 $ # You will find the bitcode file build/qemu-system-x86_64.bc I met one kind of warnings WARNING:Did not recognize the compiler flag \"-mcx16\" , but it seemed harmless. I will update more if any flaw caused by this warning. I met another error objcopy: src/xxx: failed to find link section for section xx . Please update your objcopy to 2.31 or upper.","title":"Build QEMU with wllvm"},{"location":"posts/2020-11-30-wllvm-clang-qemu-x86_64/#build-linux-kernel-with-wllvm","text":"#!/bin/bash -x # python3 -m pip install wllvm # assume clang/llvm 14 LINUX_TAG=$1 if ! test -d linux-$LINUX_TAG ; then git clone --depth 1 --branch v$LINUX_TAG \\ git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git \\ linux-$LINUX_TAG fi export LLVM_COMPILER=clang export LLVM_CC_NAME=clang-14 export LLVM_CXX_NAME=clang-14 export LLVM_LINK_NAME=llvm-link-14 export LLVM_AR_NAME=llvm-ar-14 pushd linux-$LINUX_TAG make HOSTCC=wllvm CC=wllvm x86_64_defconfig make HOSTCC=wllvm CC=wllvm -j20 extract-bc vmlinux popd","title":"Build Linux kernel with wllvm"},{"location":"posts/2020-11-30-wllvm-clang-qemu-x86_64/#run-llvm-passes-with-opt","text":"First, try a builtin pass on PLACEHOLDER.bc (either vmlinux.bc or qemu-system-x86_64.bc). LLVM has a new pass manager but the documentation of opt is outdated. Please check this for more information. opt-14 -passes='instcount' PLACEHOLDER.bc -o /dev/null 2>&1 -debug-pass-manager Second, develop your own LLVM pass and load it with opt. I usually use llvm-tutor to quickly develop external LLVM passes. $ # install llvm-17 $ export LLVM_DIR=/usr/lib/llvm-17 $ mkdir build $ cd build $ cmake -DLT_LLVM_INSTALL_DIR=$LLVM_DIR /path/to/llvm-tutor/HelloWorld/ $ make $ # run this LLVM pass $ $LLVM_DIR/bin/opt \\ -load-pass-plugin ./libHelloWorld.so -passes=hello-world -disable-output \\ PLACEHOLDER.bc","title":"Run LLVM passes with opt"},{"location":"posts/2020-11-30-wllvm-clang-qemu-x86_64/#debug-llvm-passes","text":"https://releases.llvm.org/1.5/docs/WritingAnLLVMPass.html#debughints","title":"Debug LLVM passes"},{"location":"posts/2021-08-18-Display-in-QEMU/","text":"Display in QEMU # Gerd Hoffmann has introduced graphics in QEMU here and there 1 , and in this article, I will do some basic introduction about QEMU displays and QEMU consoles with QEMU code (QEMU 6.1.0-rc3). QEMU Displays # QEMU displays are a set of display change listeners with the support of text or graphic tools on the host machine. QEMU Display options # As claimed here , we can send the QEMU display to sdl/curses/gtk/vnc/spice windows, or just do not display video output. Only curses supports text mode. \"Nothing is displayed when the graphics device is in graphical mode or if the graphics device does not support a text mode. Generally, only the VGA device models support text mode.\" To talk to the host, each display has a change listener with several callbacks that would call the relative APIs. For example, curses_update will call pnoutrefresh . static const DisplayChangeListenerOps dcl_ops = { .dpy_name = \"curses\", .dpy_text_update = curses_update, .dpy_text_resize = curses_resize, .dpy_refresh = curses_refresh, .dpy_text_cursor = curses_cursor_position, }; Here are all change listener callbacks. ui/curses.c:767:static const DisplayChangeListenerOps dcl_ops = { ui/sdl2.c:761:static const DisplayChangeListenerOps dcl_2d_ops = { ui/sdl2.c:772:static const DisplayChangeListenerOps dcl_gl_ops = { ui/spice-display.c:775:static const DisplayChangeListenerOps display_listener_ops = { ui/spice-display.c:1096:static const DisplayChangeListenerOps display_listener_gl_ops = { ui/egl-headless.c:154:static const DisplayChangeListenerOps egl_ops = { ui/cocoa.m:86:static const DisplayChangeListenerOps dcl_ops = { ui/gtk.c:607:static const DisplayChangeListenerOps dcl_ops = { ui/gtk.c:635:static const DisplayChangeListenerOps dcl_gl_area_ops = { ui/gtk.c:656:static const DisplayChangeListenerOps dcl_egl_ops = { ui/vnc.c:3337:static const DisplayChangeListenerOps dcl_ops = { In QEMU, the registration process is in the following. # First, qemu_display_register will register all QemuDisplay objects to dpys[DISPLAY_TYPE__MAX] . static QemuDisplay *dpys[DISPLAY_TYPE__MAX]; void qemu_display_register(QemuDisplay *ui) { assert(ui->type < DISPLAY_TYPE__MAX); dpys[ui->type] = ui; // S3 } static QemuDisplay qemu_display_curses = { .type = DISPLAY_TYPE_CURSES, .init = curses_display_init, }; static void register_curses(void) { qemu_display_register(&qemu_display_curses); // S2 } type_init(register_curses); // S1 Second, qemu_init_displays will first initialize a global DisplayState and initialize all text consoles if available. Then, qemu_init_displays will call qemu_display_init , and then call all .init registered if -display none is not set. static DisplayState *get_alloc_displaystate(void) { if (!display_state) { display_state = g_new0(DisplayState, 1); cursor_timer = timer_new_ms( QEMU_CLOCK_REALTIME, text_console_update_cursor, NULL); } return display_state; } DisplayState *init_displaystate(void) { gchar *name; QemuConsole *con; get_alloc_displaystate(); QTAILQ_FOREACH(con, &consoles, next) { if (con->console_type != GRAPHIC_CONSOLE && con->ds == NULL) { text_console_do_init(con->chr, display_state); } ... } return display_state; } void qemu_display_init(DisplayState *ds, DisplayOptions *opts) { if (opts->type == DISPLAY_TYPE_NONE) { return; } assert(dpys[opts->type] != NULL); dpys[opts->type]->init(ds, opts); } QEMU Console # QEMU consoles are the bridges between video devices and QEMU displays. QEMU consoles are defined as a list of QemuConsole . # static QTAILQ_HEAD(, QemuConsole) consoles = QTAILQ_HEAD_INITIALIZER(consoles); There is a for-each primitive to traverse each QemuConsole . QTAILQ_FOREACH(con, &consoles, next) { } There are several high-level primitives to access a QemuConsole as well. qemu_console_lookup_by_index(... index) qemu_console_lookup_by_device(... dev, ... head) qemu_console_lookup_by_device_name(... device_id, head) // device_id -> dev qemu_console_lookup_unused() QEMU consoles have three types. # typedef enum { GRAPHIC_CONSOLE, TEXT_CONSOLE, TEXT_CONSOLE_FIXED_SIZE } console_type_t; GRAPHIC_CONSOLE // e.g., ati-vga ati_vga_realize -> graphic_console_init -> new_console(..., GRAPHIC_CONSOLE, ...) Other examples are in the following. hw/display/pl110.c hw/display/g364fb.c hw/display/virtio-gpu-base.c hw/display/bochs-display.c hw/display/vga-pci.c hw/display/vmware_vga.c hw/display/xlnx_dp.c hw/display/vga-isa-mm.c hw/display/cirrus_vga.c hw/display/ramfb-standalone.c hw/display/exynos4210_fimd.c hw/display/macfb.c hw/display/bcm2835_fb.c hw/display/cg3.c hw/display/xenfb.c hw/display/cirrus_vga_isa.c hw/display/omap_lcdc.c hw/display/jazz_led.c hw/display/tc6393xb.c hw/display/milkymist-vgafb.c hw/display/vga-isa.c hw/display/next-fb.c hw/display/ssd0323.c hw/display/ati.c hw/display/artist.c hw/display/qxl.c hw/display/ssd0303.c hw/display/tcx.c hw/display/omap_dss.c hw/display/sm501.c hw/display/blizzard.c hw/display/pxa2xx_lcd.c TEXT_CONSOLE[_FIXED_SIZE] // e.g., chardev-vc vc_chr_open -> new_console(..., TEXT_CONSOLE[_FIXED_SIZE], ...) QEMU consoles are initialized by new_console . # First, new_console allocates an object and initializes some fields. obj = object_new(TYPE_QEMU_CONSOLE); s = QEMU_CONSOLE(obj); qemu_co_queue_init(&s->dump_queue); s->head = head; Then, if no console is activated, it will choose the first allocated console. However, a graphic console can override others. if (!active_console || ((active_console->console_type != GRAPHIC_CONSOLE) && (console_type == GRAPHIC_CONSOLE))) { active_console = s; } Next, still some fields. s->ds = ds; // with display change listeners s->console_type = console_type; s->window_id = -1; Last, new_console will insert the allocated object to the list consoles . If the list is empty, insert the object directly and then set the index to 0. If the object is not a graphic console and QEMU is in the phase of PHASE_MACHINE_READY , append the object and update its index. If the object is a graphic console, append the object to the last graphic console and keep the graphic consoles in front of the text consoles. If in this situation, the text consoles will be renumbered. QEMU consoles, QEMU video devices and QEMU displays # A typical example would be graphic_console_init . # First, by calling get_alloc_dispaly , it allocates or gets an allocated DisplayState that is bonded to a list of display change listeners. ds = get_alloc_displaystate(); Second, it finds an unused QEMU console by qemu_console_lookup_unused . A QEMU console is unused when it is at least not linked to a QEMU video device. If there is no console available, it will call new_console to allocate a graphic console with the allocated DisplayState . s = qemu_console_lookup_unused(); if (s) { if (s->surface) { width = surface_width(s->surface); height = surface_height(s->surface); } } else { s = new_console(ds, GRAPHIC_CONSOLE, head); s->ui_timer = timer_new_ms(QEMU_CLOCK_REALTIME, dpy_set_ui_info_timer, s); } Third, it links the console to the QEMU video device and registers relative callbacks. graphic_console_set_hwops(s, hw_ops, opaque); if (dev) { object_property_set_link(OBJECT(s), \"device\", OBJECT(dev), &error_abort); } Finally, create a surface and notify all QEMU displays through s->ds->listeners . surface = qemu_create_placeholder_surface(width, height, noinit); dpy_gfx_replace_surface(s, surface); Here is a summary. +------------------+ +------------+ +-------------+ +QEMU vidio devices+ <-hw_ops- +QEMU console+ -listeners-> +QEMU dispalys+ +------------------+ +------------+ +-------------+ When it comes to a text console, things are similar. # First, allocate a QEMU console. if (width == 0 || height == 0) { s = new_console(NULL, TEXT_CONSOLE, 0); } else { s = new_console(NULL, TEXT_CONSOLE_FIXED_SIZE, 0); s->surface = qemu_create_displaysurface(width, height); } Then, link the console with the ChardevVC , DisplayState if available and relative hardware operations. static void text_console_do_init(Chardev *chr, DisplayState *ds) { s->ds = ds ... s->hw_ops = &text_console_ops; s->hw = s; ... } Interactions through QEMU consoles # First of all, we will figure out when the hw_ops are called. # All hw_ops are defined in the following. typedef struct GraphicHwOps { int (*get_flags)(void *opaque); /* optional, default 0 */ void (*invalidate)(void *opaque); void (*gfx_update)(void *opaque); bool gfx_update_async; /* if true, calls graphic_hw_update_done() */ void (*text_update)(void *opaque, console_ch_t *text); void (*update_interval)(void *opaque, uint64_t interval); int (*ui_info)(void *opaque, uint32_t head, QemuUIInfo *info); void (*gl_block)(void *opaque, bool block); void (*gl_flushed)(void *opaque); } GraphicHwOps; We can group them according to their usage. Group 1: graphic_hw_xxx # Callbacks in this group will be called by QEMU displays. Graphic displays usually call graphic_hw_update , while text displays would call graphic_hw_text_udpate . A virtual device must tell the corresponding QEMU displays what should do by implementing these callbacks. graphic_hw_update (gfx_update) graphic_hw_text_update graphic_hw_invalidate graphic_hw_gl_block graphic_hw_gl_flushed Group 2: gui_update -> update_interval # When register_displaychangelistener is called by a QEMU display, it will set a timer to call phy_refresh periodically. A virtual device can implement update_interval to synchronize the interval of the timer. Group 3: dpy_compatible_with and dpy_set_ui_info_timer # The former checks whether a video device is compatible with a QEMU display by calling get_flags . The latter will be triggered when ui info should be told to the guest. Second, we will figure out how the display listener callbacks work. # An example of graphic QEMU display # static const DisplayChangeListenerOps dcl_ops = { .dpy_name = \"gtk\", .dpy_gfx_update = gd_update, .dpy_gfx_switch = gd_switch, .dpy_gfx_check_format = qemu_pixman_check_format, .dpy_refresh = gd_refresh, .dpy_mouse_set = gd_mouse_set, .dpy_cursor_define = gd_cursor_define, }; dpy_gfx_update , dpy_gfx_check_format , dpy_mouse_set , and dpy_cursor_define will be called from vedio devices. dpy_refresh is illustrated above. gpy_gfx_switch will be called in register_displaychangelistener or will be called by QEMU displays. What about together? # Let's review the history of graphic devices. 1st gen VGA Card: output images but leave all calculations to CPU 2nd gen Graphics Card: integrate image output and processing 3rd gen Video Card: take over the video coding-encoding from CPU 4th gen 3D Accelerator Card: take over the 3D Accelerator from a special 3D card 5th gen GPU: integrate more generic calculation tasks Basically, a video device will process and output images. In QEMU, periodically, graphic_hw_update will be called switching from QEMU displays to QEMU video devices. The devices will process the image and then call dpy_gfx_update to inform the changes to QEMU displays. Graphics in QEMU \u21a9","title":"Display in QEMU"},{"location":"posts/2021-08-18-Display-in-QEMU/#display-in-qemu","text":"Gerd Hoffmann has introduced graphics in QEMU here and there 1 , and in this article, I will do some basic introduction about QEMU displays and QEMU consoles with QEMU code (QEMU 6.1.0-rc3).","title":"Display in QEMU"},{"location":"posts/2021-08-18-Display-in-QEMU/#qemu-displays","text":"QEMU displays are a set of display change listeners with the support of text or graphic tools on the host machine.","title":"QEMU Displays"},{"location":"posts/2021-08-18-Display-in-QEMU/#qemu-display-options","text":"As claimed here , we can send the QEMU display to sdl/curses/gtk/vnc/spice windows, or just do not display video output. Only curses supports text mode. \"Nothing is displayed when the graphics device is in graphical mode or if the graphics device does not support a text mode. Generally, only the VGA device models support text mode.\" To talk to the host, each display has a change listener with several callbacks that would call the relative APIs. For example, curses_update will call pnoutrefresh . static const DisplayChangeListenerOps dcl_ops = { .dpy_name = \"curses\", .dpy_text_update = curses_update, .dpy_text_resize = curses_resize, .dpy_refresh = curses_refresh, .dpy_text_cursor = curses_cursor_position, }; Here are all change listener callbacks. ui/curses.c:767:static const DisplayChangeListenerOps dcl_ops = { ui/sdl2.c:761:static const DisplayChangeListenerOps dcl_2d_ops = { ui/sdl2.c:772:static const DisplayChangeListenerOps dcl_gl_ops = { ui/spice-display.c:775:static const DisplayChangeListenerOps display_listener_ops = { ui/spice-display.c:1096:static const DisplayChangeListenerOps display_listener_gl_ops = { ui/egl-headless.c:154:static const DisplayChangeListenerOps egl_ops = { ui/cocoa.m:86:static const DisplayChangeListenerOps dcl_ops = { ui/gtk.c:607:static const DisplayChangeListenerOps dcl_ops = { ui/gtk.c:635:static const DisplayChangeListenerOps dcl_gl_area_ops = { ui/gtk.c:656:static const DisplayChangeListenerOps dcl_egl_ops = { ui/vnc.c:3337:static const DisplayChangeListenerOps dcl_ops = {","title":"QEMU Display options"},{"location":"posts/2021-08-18-Display-in-QEMU/#in-qemu-the-registration-process-is-in-the-following","text":"First, qemu_display_register will register all QemuDisplay objects to dpys[DISPLAY_TYPE__MAX] . static QemuDisplay *dpys[DISPLAY_TYPE__MAX]; void qemu_display_register(QemuDisplay *ui) { assert(ui->type < DISPLAY_TYPE__MAX); dpys[ui->type] = ui; // S3 } static QemuDisplay qemu_display_curses = { .type = DISPLAY_TYPE_CURSES, .init = curses_display_init, }; static void register_curses(void) { qemu_display_register(&qemu_display_curses); // S2 } type_init(register_curses); // S1 Second, qemu_init_displays will first initialize a global DisplayState and initialize all text consoles if available. Then, qemu_init_displays will call qemu_display_init , and then call all .init registered if -display none is not set. static DisplayState *get_alloc_displaystate(void) { if (!display_state) { display_state = g_new0(DisplayState, 1); cursor_timer = timer_new_ms( QEMU_CLOCK_REALTIME, text_console_update_cursor, NULL); } return display_state; } DisplayState *init_displaystate(void) { gchar *name; QemuConsole *con; get_alloc_displaystate(); QTAILQ_FOREACH(con, &consoles, next) { if (con->console_type != GRAPHIC_CONSOLE && con->ds == NULL) { text_console_do_init(con->chr, display_state); } ... } return display_state; } void qemu_display_init(DisplayState *ds, DisplayOptions *opts) { if (opts->type == DISPLAY_TYPE_NONE) { return; } assert(dpys[opts->type] != NULL); dpys[opts->type]->init(ds, opts); }","title":"In QEMU, the registration process is in the following."},{"location":"posts/2021-08-18-Display-in-QEMU/#qemu-console","text":"QEMU consoles are the bridges between video devices and QEMU displays.","title":"QEMU Console"},{"location":"posts/2021-08-18-Display-in-QEMU/#qemu-consoles-are-defined-as-a-list-of-qemuconsole","text":"static QTAILQ_HEAD(, QemuConsole) consoles = QTAILQ_HEAD_INITIALIZER(consoles); There is a for-each primitive to traverse each QemuConsole . QTAILQ_FOREACH(con, &consoles, next) { } There are several high-level primitives to access a QemuConsole as well. qemu_console_lookup_by_index(... index) qemu_console_lookup_by_device(... dev, ... head) qemu_console_lookup_by_device_name(... device_id, head) // device_id -> dev qemu_console_lookup_unused()","title":"QEMU consoles are defined as a list of QemuConsole."},{"location":"posts/2021-08-18-Display-in-QEMU/#qemu-consoles-have-three-types","text":"typedef enum { GRAPHIC_CONSOLE, TEXT_CONSOLE, TEXT_CONSOLE_FIXED_SIZE } console_type_t; GRAPHIC_CONSOLE // e.g., ati-vga ati_vga_realize -> graphic_console_init -> new_console(..., GRAPHIC_CONSOLE, ...) Other examples are in the following. hw/display/pl110.c hw/display/g364fb.c hw/display/virtio-gpu-base.c hw/display/bochs-display.c hw/display/vga-pci.c hw/display/vmware_vga.c hw/display/xlnx_dp.c hw/display/vga-isa-mm.c hw/display/cirrus_vga.c hw/display/ramfb-standalone.c hw/display/exynos4210_fimd.c hw/display/macfb.c hw/display/bcm2835_fb.c hw/display/cg3.c hw/display/xenfb.c hw/display/cirrus_vga_isa.c hw/display/omap_lcdc.c hw/display/jazz_led.c hw/display/tc6393xb.c hw/display/milkymist-vgafb.c hw/display/vga-isa.c hw/display/next-fb.c hw/display/ssd0323.c hw/display/ati.c hw/display/artist.c hw/display/qxl.c hw/display/ssd0303.c hw/display/tcx.c hw/display/omap_dss.c hw/display/sm501.c hw/display/blizzard.c hw/display/pxa2xx_lcd.c TEXT_CONSOLE[_FIXED_SIZE] // e.g., chardev-vc vc_chr_open -> new_console(..., TEXT_CONSOLE[_FIXED_SIZE], ...)","title":"QEMU consoles have three types."},{"location":"posts/2021-08-18-Display-in-QEMU/#qemu-consoles-are-initialized-by-new_console","text":"First, new_console allocates an object and initializes some fields. obj = object_new(TYPE_QEMU_CONSOLE); s = QEMU_CONSOLE(obj); qemu_co_queue_init(&s->dump_queue); s->head = head; Then, if no console is activated, it will choose the first allocated console. However, a graphic console can override others. if (!active_console || ((active_console->console_type != GRAPHIC_CONSOLE) && (console_type == GRAPHIC_CONSOLE))) { active_console = s; } Next, still some fields. s->ds = ds; // with display change listeners s->console_type = console_type; s->window_id = -1; Last, new_console will insert the allocated object to the list consoles . If the list is empty, insert the object directly and then set the index to 0. If the object is not a graphic console and QEMU is in the phase of PHASE_MACHINE_READY , append the object and update its index. If the object is a graphic console, append the object to the last graphic console and keep the graphic consoles in front of the text consoles. If in this situation, the text consoles will be renumbered.","title":"QEMU consoles are initialized by new_console."},{"location":"posts/2021-08-18-Display-in-QEMU/#qemu-consoles-qemu-video-devices-and-qemu-displays","text":"","title":"QEMU consoles, QEMU video devices and QEMU displays"},{"location":"posts/2021-08-18-Display-in-QEMU/#a-typical-example-would-be-graphic_console_init","text":"First, by calling get_alloc_dispaly , it allocates or gets an allocated DisplayState that is bonded to a list of display change listeners. ds = get_alloc_displaystate(); Second, it finds an unused QEMU console by qemu_console_lookup_unused . A QEMU console is unused when it is at least not linked to a QEMU video device. If there is no console available, it will call new_console to allocate a graphic console with the allocated DisplayState . s = qemu_console_lookup_unused(); if (s) { if (s->surface) { width = surface_width(s->surface); height = surface_height(s->surface); } } else { s = new_console(ds, GRAPHIC_CONSOLE, head); s->ui_timer = timer_new_ms(QEMU_CLOCK_REALTIME, dpy_set_ui_info_timer, s); } Third, it links the console to the QEMU video device and registers relative callbacks. graphic_console_set_hwops(s, hw_ops, opaque); if (dev) { object_property_set_link(OBJECT(s), \"device\", OBJECT(dev), &error_abort); } Finally, create a surface and notify all QEMU displays through s->ds->listeners . surface = qemu_create_placeholder_surface(width, height, noinit); dpy_gfx_replace_surface(s, surface); Here is a summary. +------------------+ +------------+ +-------------+ +QEMU vidio devices+ <-hw_ops- +QEMU console+ -listeners-> +QEMU dispalys+ +------------------+ +------------+ +-------------+","title":"A typical example would be graphic_console_init."},{"location":"posts/2021-08-18-Display-in-QEMU/#when-it-comes-to-a-text-console-things-are-similar","text":"First, allocate a QEMU console. if (width == 0 || height == 0) { s = new_console(NULL, TEXT_CONSOLE, 0); } else { s = new_console(NULL, TEXT_CONSOLE_FIXED_SIZE, 0); s->surface = qemu_create_displaysurface(width, height); } Then, link the console with the ChardevVC , DisplayState if available and relative hardware operations. static void text_console_do_init(Chardev *chr, DisplayState *ds) { s->ds = ds ... s->hw_ops = &text_console_ops; s->hw = s; ... }","title":"When it comes to a text console, things are similar."},{"location":"posts/2021-08-18-Display-in-QEMU/#interactions-through-qemu-consoles","text":"","title":"Interactions through QEMU consoles"},{"location":"posts/2021-08-18-Display-in-QEMU/#first-of-all-we-will-figure-out-when-the-hw_ops-are-called","text":"All hw_ops are defined in the following. typedef struct GraphicHwOps { int (*get_flags)(void *opaque); /* optional, default 0 */ void (*invalidate)(void *opaque); void (*gfx_update)(void *opaque); bool gfx_update_async; /* if true, calls graphic_hw_update_done() */ void (*text_update)(void *opaque, console_ch_t *text); void (*update_interval)(void *opaque, uint64_t interval); int (*ui_info)(void *opaque, uint32_t head, QemuUIInfo *info); void (*gl_block)(void *opaque, bool block); void (*gl_flushed)(void *opaque); } GraphicHwOps; We can group them according to their usage.","title":"First of all, we will figure out when the hw_ops are called."},{"location":"posts/2021-08-18-Display-in-QEMU/#group-1-graphic_hw_xxx","text":"Callbacks in this group will be called by QEMU displays. Graphic displays usually call graphic_hw_update , while text displays would call graphic_hw_text_udpate . A virtual device must tell the corresponding QEMU displays what should do by implementing these callbacks. graphic_hw_update (gfx_update) graphic_hw_text_update graphic_hw_invalidate graphic_hw_gl_block graphic_hw_gl_flushed","title":"Group 1: graphic_hw_xxx"},{"location":"posts/2021-08-18-Display-in-QEMU/#group-2-gui_update-update_interval","text":"When register_displaychangelistener is called by a QEMU display, it will set a timer to call phy_refresh periodically. A virtual device can implement update_interval to synchronize the interval of the timer.","title":"Group 2: gui_update -&gt; update_interval"},{"location":"posts/2021-08-18-Display-in-QEMU/#group-3-dpy_compatible_with-and-dpy_set_ui_info_timer","text":"The former checks whether a video device is compatible with a QEMU display by calling get_flags . The latter will be triggered when ui info should be told to the guest.","title":"Group 3: dpy_compatible_with and dpy_set_ui_info_timer"},{"location":"posts/2021-08-18-Display-in-QEMU/#second-we-will-figure-out-how-the-display-listener-callbacks-work","text":"","title":"Second, we will figure out how the display listener callbacks work."},{"location":"posts/2021-08-18-Display-in-QEMU/#an-example-of-graphic-qemu-display","text":"static const DisplayChangeListenerOps dcl_ops = { .dpy_name = \"gtk\", .dpy_gfx_update = gd_update, .dpy_gfx_switch = gd_switch, .dpy_gfx_check_format = qemu_pixman_check_format, .dpy_refresh = gd_refresh, .dpy_mouse_set = gd_mouse_set, .dpy_cursor_define = gd_cursor_define, }; dpy_gfx_update , dpy_gfx_check_format , dpy_mouse_set , and dpy_cursor_define will be called from vedio devices. dpy_refresh is illustrated above. gpy_gfx_switch will be called in register_displaychangelistener or will be called by QEMU displays.","title":"An example of graphic QEMU display"},{"location":"posts/2021-08-18-Display-in-QEMU/#what-about-together","text":"Let's review the history of graphic devices. 1st gen VGA Card: output images but leave all calculations to CPU 2nd gen Graphics Card: integrate image output and processing 3rd gen Video Card: take over the video coding-encoding from CPU 4th gen 3D Accelerator Card: take over the 3D Accelerator from a special 3D card 5th gen GPU: integrate more generic calculation tasks Basically, a video device will process and output images. In QEMU, periodically, graphic_hw_update will be called switching from QEMU displays to QEMU video devices. The devices will process the image and then call dpy_gfx_update to inform the changes to QEMU displays. Graphics in QEMU \u21a9","title":"What about together?"},{"location":"posts/2021-08-27-research-presentation/","text":"Research Presentation # Making c lear, e ngaging, and p ursuasive oral representations is one of the keys to staying competitive, especially in front of people who (most likely) do not share your values. Requirements # clear: focus, support, coherence engaging: [situation, ]complextity, [question, ]resolution pursuasive: catchy, trusted, desiring, safe, reasonable, pushing, evaluating Audience and Requirements # The first step of knowing your audience is to assume an edge case that no one shares your values. All three requirements need to be satisfied. Second, adjust the strategies based on how much background that your audience knows and how much values that your audience shares with you. Duration, Content, and Requirements # Duration Content Requirements 1m elevator pitch (w/o slides) cep 1m weekly update (w/o slides) c 5m weekly update (w/ slides) c 15m conference talk (w/ slides) ce 45m invited talk (w/ slides) cep 45m job talk (w/ slides) cep 90m lecture (w/ slides) ce Steps # Design (see above). Make slides. Practice. Dry run, answer questions, and take feedback. Perform. Make slides # Susan McConnell (Stanford): Designing effective scientific presentations : We are good listeners and let's transfer the knowledge to make slides One slide, one topic sentence, 4-5 sentences, 1 minute Consider the attention curve https://ethos3.com/hacking-the-audience-attention-curve/ Split into parts and summary the key message for each part Write down the key messages and then fill up the rest Highlight the key messages with both text and soundtrack A simple style One font (Calibri) Large font size (24, 28, 36, 52) and less text Sentence in one line Built-in list Box for the key summary Backup slides Animation Too much text and show them one by one Practice # Per slide: start from the last sentence for the last slide All slides: control speed and remember everything Dry-run, prepare and answer questions, and take feedback # Have eye contact, be confident That's a good/interesting question/Let me rephrase your questions. Give a high level overview of your answer in the beginning and then give the remaining details of your answer.","title":"Research Presentation"},{"location":"posts/2021-08-27-research-presentation/#research-presentation","text":"Making c lear, e ngaging, and p ursuasive oral representations is one of the keys to staying competitive, especially in front of people who (most likely) do not share your values.","title":"Research Presentation"},{"location":"posts/2021-08-27-research-presentation/#requirements","text":"clear: focus, support, coherence engaging: [situation, ]complextity, [question, ]resolution pursuasive: catchy, trusted, desiring, safe, reasonable, pushing, evaluating","title":"Requirements"},{"location":"posts/2021-08-27-research-presentation/#audience-and-requirements","text":"The first step of knowing your audience is to assume an edge case that no one shares your values. All three requirements need to be satisfied. Second, adjust the strategies based on how much background that your audience knows and how much values that your audience shares with you.","title":"Audience and Requirements"},{"location":"posts/2021-08-27-research-presentation/#duration-content-and-requirements","text":"Duration Content Requirements 1m elevator pitch (w/o slides) cep 1m weekly update (w/o slides) c 5m weekly update (w/ slides) c 15m conference talk (w/ slides) ce 45m invited talk (w/ slides) cep 45m job talk (w/ slides) cep 90m lecture (w/ slides) ce","title":"Duration, Content, and Requirements"},{"location":"posts/2021-08-27-research-presentation/#steps","text":"Design (see above). Make slides. Practice. Dry run, answer questions, and take feedback. Perform.","title":"Steps"},{"location":"posts/2021-08-27-research-presentation/#make-slides","text":"Susan McConnell (Stanford): Designing effective scientific presentations : We are good listeners and let's transfer the knowledge to make slides One slide, one topic sentence, 4-5 sentences, 1 minute Consider the attention curve https://ethos3.com/hacking-the-audience-attention-curve/ Split into parts and summary the key message for each part Write down the key messages and then fill up the rest Highlight the key messages with both text and soundtrack A simple style One font (Calibri) Large font size (24, 28, 36, 52) and less text Sentence in one line Built-in list Box for the key summary Backup slides Animation Too much text and show them one by one","title":"Make slides"},{"location":"posts/2021-08-27-research-presentation/#practice","text":"Per slide: start from the last sentence for the last slide All slides: control speed and remember everything","title":"Practice"},{"location":"posts/2021-08-27-research-presentation/#dry-run-prepare-and-answer-questions-and-take-feedback","text":"Have eye contact, be confident That's a good/interesting question/Let me rephrase your questions. Give a high level overview of your answer in the beginning and then give the remaining details of your answer.","title":"Dry-run, prepare and answer questions, and take feedback"},{"location":"posts/2021-09-03-Summary-Research-SE/","text":"Coding for System Security Research # Solid implementation in limited time makes us competitive in research. Artifact evaluation is introduced to overcome the \"reproducibility issue\". The security community is third times than five years ago. System security research needs solid implementation. To pass the artifact evaluation, we would better spend more time to improve the usability. Quick and dirty implementation saves time but has lower usability and thus the time is not saved at all. Why not considered the usability in the beginning of the development? We are also encouraged to open source our tools, which requires a higher quality implementation with lower number of flaws in our tools. System security research takes time. We need to understand how an unfamiliar low-level software or hardware work, try it, re-understand, re-try, and so on. In half of our time, we are compiling things and during the rest of time, we are making mistakes. However, as the community has grown so much, we want to get our ideas implemented as soon as possible. I propose a two-step model. First, we build our toolbox and implement our idea in a quick and dirty way. This step is for senior students or junior professors to make sure their ideas work. Second, we follow an enough and quick coding philosophy, that is to say, to develop a tool with enough functionality quickly. In this way, we can pass the artifact evaluation without overengineering, open source our tool directly, and save time. Enough functionality # Think about the least set of functionalities, including not only the core functionalities but also the functionalities to make sure this tool easy to use, debug, and evaluate. Quick development # Software engineering has many best practices to save time. Design architecture then select framework # Design and implementation are different. Usually the design shows how to address a problem and we need to choose the most proper way to implement our design. Control time and risk # Avoid overengineering. Be aware that you/someone else is maintaining your project later. Use simple techniques and don't show off. Design pattern is what we can try but to address some issues that really exist. For any other uncertain staff, make backup plans. Add README # Use a version control tool # Use git or any other tools. Don't copy and paste or use suffix like xxx-v1.0. Follow reasonable patching process # Use issue/mailinglist/forum to discuss # Follow the same code style in one project # Add unit tests and enable debugging # This can avoid buggy implementation. Try to build the smallest SDK with limited but enough unit tests. Then build upper applications that are not stable. Keep in mind to move commonly used code in the applications to the SDK and don't code too much in rapidly changing applications. Be more automatic #","title":"Coding for System Security Research"},{"location":"posts/2021-09-03-Summary-Research-SE/#coding-for-system-security-research","text":"Solid implementation in limited time makes us competitive in research. Artifact evaluation is introduced to overcome the \"reproducibility issue\". The security community is third times than five years ago. System security research needs solid implementation. To pass the artifact evaluation, we would better spend more time to improve the usability. Quick and dirty implementation saves time but has lower usability and thus the time is not saved at all. Why not considered the usability in the beginning of the development? We are also encouraged to open source our tools, which requires a higher quality implementation with lower number of flaws in our tools. System security research takes time. We need to understand how an unfamiliar low-level software or hardware work, try it, re-understand, re-try, and so on. In half of our time, we are compiling things and during the rest of time, we are making mistakes. However, as the community has grown so much, we want to get our ideas implemented as soon as possible. I propose a two-step model. First, we build our toolbox and implement our idea in a quick and dirty way. This step is for senior students or junior professors to make sure their ideas work. Second, we follow an enough and quick coding philosophy, that is to say, to develop a tool with enough functionality quickly. In this way, we can pass the artifact evaluation without overengineering, open source our tool directly, and save time.","title":"Coding for System Security Research"},{"location":"posts/2021-09-03-Summary-Research-SE/#enough-functionality","text":"Think about the least set of functionalities, including not only the core functionalities but also the functionalities to make sure this tool easy to use, debug, and evaluate.","title":"Enough functionality"},{"location":"posts/2021-09-03-Summary-Research-SE/#quick-development","text":"Software engineering has many best practices to save time.","title":"Quick development"},{"location":"posts/2021-09-03-Summary-Research-SE/#design-architecture-then-select-framework","text":"Design and implementation are different. Usually the design shows how to address a problem and we need to choose the most proper way to implement our design.","title":"Design architecture then select framework"},{"location":"posts/2021-09-03-Summary-Research-SE/#control-time-and-risk","text":"Avoid overengineering. Be aware that you/someone else is maintaining your project later. Use simple techniques and don't show off. Design pattern is what we can try but to address some issues that really exist. For any other uncertain staff, make backup plans.","title":"Control time and risk"},{"location":"posts/2021-09-03-Summary-Research-SE/#add-readme","text":"","title":"Add README"},{"location":"posts/2021-09-03-Summary-Research-SE/#use-a-version-control-tool","text":"Use git or any other tools. Don't copy and paste or use suffix like xxx-v1.0.","title":"Use a version control tool"},{"location":"posts/2021-09-03-Summary-Research-SE/#follow-reasonable-patching-process","text":"","title":"Follow reasonable patching process"},{"location":"posts/2021-09-03-Summary-Research-SE/#use-issuemailinglistforum-to-discuss","text":"","title":"Use issue/mailinglist/forum to discuss"},{"location":"posts/2021-09-03-Summary-Research-SE/#follow-the-same-code-style-in-one-project","text":"","title":"Follow the same code style in one project"},{"location":"posts/2021-09-03-Summary-Research-SE/#add-unit-tests-and-enable-debugging","text":"This can avoid buggy implementation. Try to build the smallest SDK with limited but enough unit tests. Then build upper applications that are not stable. Keep in mind to move commonly used code in the applications to the SDK and don't code too much in rapidly changing applications.","title":"Add unit tests and enable debugging"},{"location":"posts/2021-09-03-Summary-Research-SE/#be-more-automatic","text":"","title":"Be more automatic"},{"location":"posts/2021-09-03-knowledge-for-research/","text":"Build the knowledge database # I'd like to build the knowledge database which can be accessed by any system security scholars, which will save a lot of their time. However, this knowledge database cannot offer creativity. We must at least know something, something important. Program = Data structure + Algorithm All problems in computer science can be solved by another level of indirection... Except ... too many layers of indirection. Programming Language and Tooling # Be familiar with C and Python. Write self-explainable code. Don't use rarely used advanced features of Python in one project Learn basic C++ and basic bash. Use ChatGPT for quick prototyping and enable linters, e.g., shellcheck, to remove stupid bugs. Learn Java for object-oriented programming. I suggest that even developing in Python/C++, apply the best practice of OOP just like coding in Java, which is simple and easy to understand. Learn how to develop Dockerfile to make your artifact deployable everywhere. Learn Docker's entrypoint/arguments/environment variables/volumns/capabilities and run your program in the Docker container all the time. Learn how to develop Json/Yaml to make your configs universal. To compile C/C++, learn how to use gcc/g++/clang/clang++, how to install and uninstall these compilers, and how to debug any warnings and errors. Learn update-alternatives to have multiple versions of the tooling. Have gdb-gef enabled. Learn what is and how to use cross-platform compilers. Enable ASAN or UBSAN to mitigate your C/C++ bugs, or learn Rust. (Linux) utilities # ls/mv/pwd/cat/echo/mkdir/rm/touch/hexdump cd/pushd/popd cp/rsync/dd vim git sudo/chmod/chown ps/kill/pkill find/grep tree/htop/df/du/timeout/watch/locate/head/tail/diff/ping/history/man tar/zip ssh/scp/rsync screen apt-get/apt-cache source/bash/hash/ldconfig/update-grub file/readelf nm/ldd/objcopy Data Structure and Algorithm # Textbook: Introduction to Algorithms (4th) Textbook: Hello Algo Training: Leetcode Top interview 150 Dynamic sets Operations: Search, Insert, Delete, Minimum, Maximum, Successor, Predecessor Data structures: Array (list), Stack (deque), Matrices, Queue (deque), Linked List , Rooted tree, Heap (heapq), Hash table Data structure: Binary search tree (Binary tree, Left <= Right, Fast lookup/addition/removal) Red-black tree (RB tree) Every node in a RB tree is either red or black, the children of a red node are both black, and every simple path from a node to a descendant leaf contains the same number of black nodes. RB trees are one of many search-tree schemes that are balanced in order to guarantee that basic dynamic-set operations take O(logn) time in the worst case. Rbtress in Linux kernel : RB trees are a type of self-balancing binary search tree, used for storing sortable key/value data pairs. This differs from radix trees (which are used to efficiently store sparse arrays and thus use long integer indexes to insert/access/delete nodes) and hash tables (which are not kept sorted to be easily traversed in order, and must be tuned for a specific size and hash function where rbtrees scale gracefully storing arbitrary keys). RB trees are similar to AVL trees, but provide faster real-time bounded worst case performance for insertion and deletion (at most two rotations and three rotations, respectively, to balance the tree), with slightly slower (but still O(log n)) lookup time. AVL tree An AVL tree is a binary search tree that is height balanced: for each node x, the heights of the left and right subtrees of x differ by at most 1. Graph Search, Topological sort, Strong connected components, Minimum spanning tree, Shortest paths, Maximum flow, Matching in bipartitie graphs Advanced data structures Augmented RB tree, B-trees, data structures for disjointed sets Sorting algorithms Insertion sort, Merge sort, Heapsort, Quick sort, Counting sort, Radix sort, Bucket sort Searching algorithms Linear search, Breadth-first search, Depth-first search, Binary search, Hash search, Tree search Algorithm design and analysis The halting problem over Turing machines Temporal and spatial complexity, Amortized analysis Simulation, Enumeration, Iterative algorithm (e.g., when handling linked lists), Divide and conquer (recursive, e.g., when handing binary trees), Backtracking algorithm (recursive), Dynamic programming, Greedy algorithms, Data structure augment Automata, Regular expression, Context-free grammar Architecture and Computation System # x86 shits segments segment selector: cs/ds/ss, es/fs/gs, indexing segment descriptor segment descriptor/cache segment descriptor: base, limit segment descriptor table gdt: all processes can access this ldt: a system can have one or multiple ldts; a process can exclusively use an LDT or use the ldt shared by multiple processes To quickly access GDT and LDT, gdtr and ldtr are leveraged To demystify gdt: array, gdtr stores where the gdt is ldt: array, ldtr stores where the ldt for the current process is logical address must exist (since x86 cannot disable segments) inside the program, a pointer stores the offset to a segment iirc, ldt is not enabled, gdt is transparent logical address -> linear address -> physical address logical address -> segment selector -> gdt/ldt -> linear address w/o paging, linear address = physical address w/ paging, linear address (virtual address) -> page table -> physical address four modes Real mode: linear address = physical address, 1MB Protect mode: the commonly used mode Virtual 8086 mode, provide a real mode on the protect mode (for compatibility) Be familiar with x86/x86, arm/aarch64, and riscv assembly. Learn ISA extension for security (PAC). Learn processor design and pipelines. Learn cache and cache coherence. Learn magnetic storage and solid-state drive (SSD). Learn PCI/USB/Wi-Fi/BE/BLE/BaseBand controllers. Learn hardware for virtualization (VT-x/VT-d/EPT/SMMU/IOMMU). Learn hardware for security (SGX/TrustZone/TDX/SEV/Realm/HSM/TPM). Operating System # Learn process management. Learn memory management. Learn file and filesystems Learn access control. Learn hardening techniques. Virtualization # VMX = Virtual Machine Extension Intel VT-x # Trap-and-emulation requires all sensitive instructions to be privilege instructions Challenges Not all sensitive instructions are privilege instructions Cannot trigger an exception to be compatible with existing software Add one more mode VMX Root Operation: when the VMM is running, compatible to existing software VMX Non-Root Operation: when the guest is running All sensitive instructions are re-designed VMM Operations are orthogonal to Ring 0 and 3 Specifically vmxon -> VMX Root Operation -> vmlaunch/vmresume -> VM-Entry -> VMX Non-Root Operation -> Some sensitive instructions/MMIO/EPT Violation -> VM-Exit -> VMX Root Operation -> vmxoff VM-Exit sysenter won't introduce a VM-Exit, even it is a sensitive instruction cpuid must introduce a VM-Exit The behaviors of some sensitive instructions are controlled by VMCS VMCS (Virtual-Machine Control Structure) VMCS is stored in memory, different from the guest memory VMCS and a physical CPU are 1-1 mapping vmptrld addr_of_vmcs/vmcleaer VMCS migration may be not implemented VMCS includes Guest-state area - registers VM-Exit -> save, VM-Entry -> restore Including LDTR Host-state area VM-Exit -> restore Not including LDTR, CS:RIP is where the VM-Exit is handled VM-Entry control field VMM can inject event (exception/external interrupts/NMI) into the guest vCPU, say when a DMA operation is completed. VM-Execution control field External-interrupt/Exception bitmap -> VM-Exit? HLT/INVLPG/WBINVD/RDPMC/RDTSC/... -> VM-Exit? Unconditional I/O exiting/Use I/O bigmaps/Use MSR bitmaps -> VM-Exit? VM-Exit control field (seems not interesting) VM-Exit information field Exit reason Exit qualification VM-Exit interrupt information/interrupt error code for external interrupts/exceptions, and NMI Guest linear address/instruction length/instruction information for the sensitive instruction that triggers the VM-Exit vmread/vmwrite to configure VMCS VT-x requires that the paging must be enabled in Non-Root operation EPT # GVA -> GPA -> HPA Challenges Shadow page table is very complicated and expensive Add one more hardware: EPT Specifically, given a GVA, 5 queries in total Guest CR3 (GPA) -> EPT TLB -> EPT page table (EPT MMU) -> HPA or EPT Violation (1) GVA + L4 GHA -> L3 GPA or page fault (no VM-Exit) -> HPA or EPT Violation (2) GVA + L3 GHA -> L2 GPA or page fault (no VM-Exit) -> HPA or EPT Violation (3) GVA + L2 GHA -> L1 GPA or page fault (no VM-Exit) -> HPA or EPT Violation (4) GVA + L1 GHA -> GPA or page fault (no VM-Exit) -> HPA or EPT Violation (5) Specifically EPT is configured (enabling and address) in VMCS's VM-Execution control field EPT Violation happens when GPA's address is large Guest is reading a not readable page Guest is writing a not writable page Guest is executing a not executable page Nested Virtualization # Slide 1 Paper 1 Computer Networking # Learn TCP/UDP programming. Database # Learn SQL Compiler # LLVM IR and passes Distributed Systems # Software Security # Other tools # Fuzzer: AFL++/libFuzzer/Syzkaller Symbolic execution: KLEE Compiler: LLVM Operating System: Linux Kernel Virtualization: QEMU/VirtualBox Think about some metrics # CPU utilization Cache optimization Memory consumption Disk consumption","title":"Build the knowledge database"},{"location":"posts/2021-09-03-knowledge-for-research/#build-the-knowledge-database","text":"I'd like to build the knowledge database which can be accessed by any system security scholars, which will save a lot of their time. However, this knowledge database cannot offer creativity. We must at least know something, something important. Program = Data structure + Algorithm All problems in computer science can be solved by another level of indirection... Except ... too many layers of indirection.","title":"Build the knowledge database"},{"location":"posts/2021-09-03-knowledge-for-research/#programming-language-and-tooling","text":"Be familiar with C and Python. Write self-explainable code. Don't use rarely used advanced features of Python in one project Learn basic C++ and basic bash. Use ChatGPT for quick prototyping and enable linters, e.g., shellcheck, to remove stupid bugs. Learn Java for object-oriented programming. I suggest that even developing in Python/C++, apply the best practice of OOP just like coding in Java, which is simple and easy to understand. Learn how to develop Dockerfile to make your artifact deployable everywhere. Learn Docker's entrypoint/arguments/environment variables/volumns/capabilities and run your program in the Docker container all the time. Learn how to develop Json/Yaml to make your configs universal. To compile C/C++, learn how to use gcc/g++/clang/clang++, how to install and uninstall these compilers, and how to debug any warnings and errors. Learn update-alternatives to have multiple versions of the tooling. Have gdb-gef enabled. Learn what is and how to use cross-platform compilers. Enable ASAN or UBSAN to mitigate your C/C++ bugs, or learn Rust.","title":"Programming Language and Tooling"},{"location":"posts/2021-09-03-knowledge-for-research/#linux-utilities","text":"ls/mv/pwd/cat/echo/mkdir/rm/touch/hexdump cd/pushd/popd cp/rsync/dd vim git sudo/chmod/chown ps/kill/pkill find/grep tree/htop/df/du/timeout/watch/locate/head/tail/diff/ping/history/man tar/zip ssh/scp/rsync screen apt-get/apt-cache source/bash/hash/ldconfig/update-grub file/readelf nm/ldd/objcopy","title":"(Linux) utilities"},{"location":"posts/2021-09-03-knowledge-for-research/#data-structure-and-algorithm","text":"Textbook: Introduction to Algorithms (4th) Textbook: Hello Algo Training: Leetcode Top interview 150 Dynamic sets Operations: Search, Insert, Delete, Minimum, Maximum, Successor, Predecessor Data structures: Array (list), Stack (deque), Matrices, Queue (deque), Linked List , Rooted tree, Heap (heapq), Hash table Data structure: Binary search tree (Binary tree, Left <= Right, Fast lookup/addition/removal) Red-black tree (RB tree) Every node in a RB tree is either red or black, the children of a red node are both black, and every simple path from a node to a descendant leaf contains the same number of black nodes. RB trees are one of many search-tree schemes that are balanced in order to guarantee that basic dynamic-set operations take O(logn) time in the worst case. Rbtress in Linux kernel : RB trees are a type of self-balancing binary search tree, used for storing sortable key/value data pairs. This differs from radix trees (which are used to efficiently store sparse arrays and thus use long integer indexes to insert/access/delete nodes) and hash tables (which are not kept sorted to be easily traversed in order, and must be tuned for a specific size and hash function where rbtrees scale gracefully storing arbitrary keys). RB trees are similar to AVL trees, but provide faster real-time bounded worst case performance for insertion and deletion (at most two rotations and three rotations, respectively, to balance the tree), with slightly slower (but still O(log n)) lookup time. AVL tree An AVL tree is a binary search tree that is height balanced: for each node x, the heights of the left and right subtrees of x differ by at most 1. Graph Search, Topological sort, Strong connected components, Minimum spanning tree, Shortest paths, Maximum flow, Matching in bipartitie graphs Advanced data structures Augmented RB tree, B-trees, data structures for disjointed sets Sorting algorithms Insertion sort, Merge sort, Heapsort, Quick sort, Counting sort, Radix sort, Bucket sort Searching algorithms Linear search, Breadth-first search, Depth-first search, Binary search, Hash search, Tree search Algorithm design and analysis The halting problem over Turing machines Temporal and spatial complexity, Amortized analysis Simulation, Enumeration, Iterative algorithm (e.g., when handling linked lists), Divide and conquer (recursive, e.g., when handing binary trees), Backtracking algorithm (recursive), Dynamic programming, Greedy algorithms, Data structure augment Automata, Regular expression, Context-free grammar","title":"Data Structure and Algorithm"},{"location":"posts/2021-09-03-knowledge-for-research/#architecture-and-computation-system","text":"x86 shits segments segment selector: cs/ds/ss, es/fs/gs, indexing segment descriptor segment descriptor/cache segment descriptor: base, limit segment descriptor table gdt: all processes can access this ldt: a system can have one or multiple ldts; a process can exclusively use an LDT or use the ldt shared by multiple processes To quickly access GDT and LDT, gdtr and ldtr are leveraged To demystify gdt: array, gdtr stores where the gdt is ldt: array, ldtr stores where the ldt for the current process is logical address must exist (since x86 cannot disable segments) inside the program, a pointer stores the offset to a segment iirc, ldt is not enabled, gdt is transparent logical address -> linear address -> physical address logical address -> segment selector -> gdt/ldt -> linear address w/o paging, linear address = physical address w/ paging, linear address (virtual address) -> page table -> physical address four modes Real mode: linear address = physical address, 1MB Protect mode: the commonly used mode Virtual 8086 mode, provide a real mode on the protect mode (for compatibility) Be familiar with x86/x86, arm/aarch64, and riscv assembly. Learn ISA extension for security (PAC). Learn processor design and pipelines. Learn cache and cache coherence. Learn magnetic storage and solid-state drive (SSD). Learn PCI/USB/Wi-Fi/BE/BLE/BaseBand controllers. Learn hardware for virtualization (VT-x/VT-d/EPT/SMMU/IOMMU). Learn hardware for security (SGX/TrustZone/TDX/SEV/Realm/HSM/TPM).","title":"Architecture and Computation System"},{"location":"posts/2021-09-03-knowledge-for-research/#operating-system","text":"Learn process management. Learn memory management. Learn file and filesystems Learn access control. Learn hardening techniques.","title":"Operating System"},{"location":"posts/2021-09-03-knowledge-for-research/#virtualization","text":"VMX = Virtual Machine Extension","title":"Virtualization"},{"location":"posts/2021-09-03-knowledge-for-research/#intel-vt-x","text":"Trap-and-emulation requires all sensitive instructions to be privilege instructions Challenges Not all sensitive instructions are privilege instructions Cannot trigger an exception to be compatible with existing software Add one more mode VMX Root Operation: when the VMM is running, compatible to existing software VMX Non-Root Operation: when the guest is running All sensitive instructions are re-designed VMM Operations are orthogonal to Ring 0 and 3 Specifically vmxon -> VMX Root Operation -> vmlaunch/vmresume -> VM-Entry -> VMX Non-Root Operation -> Some sensitive instructions/MMIO/EPT Violation -> VM-Exit -> VMX Root Operation -> vmxoff VM-Exit sysenter won't introduce a VM-Exit, even it is a sensitive instruction cpuid must introduce a VM-Exit The behaviors of some sensitive instructions are controlled by VMCS VMCS (Virtual-Machine Control Structure) VMCS is stored in memory, different from the guest memory VMCS and a physical CPU are 1-1 mapping vmptrld addr_of_vmcs/vmcleaer VMCS migration may be not implemented VMCS includes Guest-state area - registers VM-Exit -> save, VM-Entry -> restore Including LDTR Host-state area VM-Exit -> restore Not including LDTR, CS:RIP is where the VM-Exit is handled VM-Entry control field VMM can inject event (exception/external interrupts/NMI) into the guest vCPU, say when a DMA operation is completed. VM-Execution control field External-interrupt/Exception bitmap -> VM-Exit? HLT/INVLPG/WBINVD/RDPMC/RDTSC/... -> VM-Exit? Unconditional I/O exiting/Use I/O bigmaps/Use MSR bitmaps -> VM-Exit? VM-Exit control field (seems not interesting) VM-Exit information field Exit reason Exit qualification VM-Exit interrupt information/interrupt error code for external interrupts/exceptions, and NMI Guest linear address/instruction length/instruction information for the sensitive instruction that triggers the VM-Exit vmread/vmwrite to configure VMCS VT-x requires that the paging must be enabled in Non-Root operation","title":"Intel VT-x"},{"location":"posts/2021-09-03-knowledge-for-research/#ept","text":"GVA -> GPA -> HPA Challenges Shadow page table is very complicated and expensive Add one more hardware: EPT Specifically, given a GVA, 5 queries in total Guest CR3 (GPA) -> EPT TLB -> EPT page table (EPT MMU) -> HPA or EPT Violation (1) GVA + L4 GHA -> L3 GPA or page fault (no VM-Exit) -> HPA or EPT Violation (2) GVA + L3 GHA -> L2 GPA or page fault (no VM-Exit) -> HPA or EPT Violation (3) GVA + L2 GHA -> L1 GPA or page fault (no VM-Exit) -> HPA or EPT Violation (4) GVA + L1 GHA -> GPA or page fault (no VM-Exit) -> HPA or EPT Violation (5) Specifically EPT is configured (enabling and address) in VMCS's VM-Execution control field EPT Violation happens when GPA's address is large Guest is reading a not readable page Guest is writing a not writable page Guest is executing a not executable page","title":"EPT"},{"location":"posts/2021-09-03-knowledge-for-research/#nested-virtualization","text":"Slide 1 Paper 1","title":"Nested Virtualization"},{"location":"posts/2021-09-03-knowledge-for-research/#computer-networking","text":"Learn TCP/UDP programming.","title":"Computer Networking"},{"location":"posts/2021-09-03-knowledge-for-research/#database","text":"Learn SQL","title":"Database"},{"location":"posts/2021-09-03-knowledge-for-research/#compiler","text":"LLVM IR and passes","title":"Compiler"},{"location":"posts/2021-09-03-knowledge-for-research/#distributed-systems","text":"","title":"Distributed Systems"},{"location":"posts/2021-09-03-knowledge-for-research/#software-security","text":"","title":"Software Security"},{"location":"posts/2021-09-03-knowledge-for-research/#other-tools","text":"Fuzzer: AFL++/libFuzzer/Syzkaller Symbolic execution: KLEE Compiler: LLVM Operating System: Linux Kernel Virtualization: QEMU/VirtualBox","title":"Other tools"},{"location":"posts/2021-09-03-knowledge-for-research/#think-about-some-metrics","text":"CPU utilization Cache optimization Memory consumption Disk consumption","title":"Think about some metrics"},{"location":"posts/2021-09-07-Research-Philosophy/","text":"How to do system and software security research? # What is system and software security? # We in system and software security aims to break and protect the assets that leverage hardware and software to provide widely-used services, such as browsers, compilers/interpreters, network protocols, operating systems, hypervisors, trust execution environment, and processors, based on thread models that define who will be trusted or not. A group of people are also interested in sound and electromagnetic waves, leveraging a complete different field of knowledge -- signal processing. Their research is likely offensive. By definition, I think such research is a branch of system and software security. The biggest problem IMO is whether they can gain write primitives besides breaking the confidentiality and availability. Pure cryptography is mathematics. Applied cryptography has a small overlap with system and software security -- we apply very basic cryptography as a mechenism to provide confidentiality. System people build systems and consider security as one of the properties their systems should have. My gut feeling is that system people is used to taking coarse-grained threat models when considering security compared to security people. Additionally, security people also build systems to break and protect assets. Software engeering research is around software development lifecycle (SDLC). Similary, they also consider security as one of the properties they want to have in the SDLC. We security people emphasize vulnerabilities and exploitations. Privacy preserving computation focuses on the privacy problem during the computation, exchanging, and storage of data. It might needs system and software security techniques, but that's it. AI research is about data, models, and computing power. AI security aims to break and protect the high-dimensional function of the model. Importantly, AI infrastructure security has a overlap with system and software security, such as AI compiler security, GPU virtualization and isolation, and LLM prompt sandbox. Technically, blockchain is about consensus. In practice, blockchain has abundant applications in finance, which is impressive. Similary, blockchain infrastructure security has a overlap with system and software security, such as smart contract security. Where are the ideas from? # An idea consists of a problem and a solution. First, we can read and propose a new idea after reading a paper. However, there will be a delay. One the one hand, a research paper is published two years later than its authors came up with that idea. One the other hand, even though some PC members can check all interesting papers submitted to a conference, there is about half a year or one-year delay. Can we fill the gap? No, we cannot unless we are connecting or collaborating with these authors. Ideas can also come from users, which is so inefficient unless we are connecting or collaborating with industry people. In practice, the first idea comes from our advisors. Later, practical ideas come from our research activities, and we should be curious and critical thinkers about everything in our research activities all the time. Whenever we study, or find or hear of a thing, we should show our interests: What security problems are there? How to address them? Check this article to learn the patterns of research and other tips. There are too many ideas and how to decide? # The security research community has grown a lot. More PhD students generate more papers due to cheap resources (computing power, ChatGPT, etc.). Rat-race is going on and we have to fast forward our visibility by building our brand. In practice, we have to choose a topic where we can do resesarch for four to five years continously. Ask our advisors. In terms of a specific topic, we have to evaluate our ideas because not all of them are worthy of our effort. Principle 1: choose a good problem think about the problem first instead of having a solution first a new problem is always better the problem is easy to understand and has clear benefits choose a problem with large security impact if the novelty is little Principle 2: choose a solvable problem solving a easy problem does not need a paper take reasonable assumptions and come up with several solutions know the optimal: consider the computation theory and estimate what the best we can do choose a solution with large security impact if the novelty is little seperate design and implementation Principle 3: must read related work to see how far they have gone. Please pay attention to how many research papers and industry blogs exist. You want to lead the research (there are only 0-2 papers) instead of following others. Do not be ignorant and remember your personal experience is biased. Tips to do research # Budge our time # Mark the DDL two weeks in advance Spend 30 seconds more to save us from a 30-minute disaster Do not do many context switches, which wastes a lot of time Spend less than one day on a project we are not the first author Be busy when it is busy and have fun when it is not busy Take holidays and weekends after submissions What we are going to is what we are going to write # Review papers, run their systems, and summarize (RW) Identify challenges and evaluate solutions in theory (challenges, insights, solutions) Design system and evaluate design choices in theory (system design) Coding and write evaluation scripts (IMPL, evaluation) Write the paper at the same time and get feedback from others Set up servers # What architectures should we use? How many servers do we have? Are we in the sudo group? Save runtime/intermediate data on SSD and save results on HDD. Do we need to disable the hyper-threading? Buy more CPU, RAM, and storge. Do evaluation # All in Docker container Make it parallel Obtain quick results first, middle-long results for writing, then long time evaluation for submission Go for diversity first, then quantity Do not delete any data if we are sure. Just buy more storage! Do not make the hardware have a rest. Write a good paper # Tell a well-constructed story (information-flow, the pyramid principle) Conduct reader-centred writing: straightforward and clear Writing process drafting: everyone is good! revising: focus, support, coherence a paragraph should have one topic sentence multiple topic sentences should be logical support material must be specific logic should be clear editing: grammar, word choice, sentence skill pay attention to a/an/the, single/plural, could/should choose words for all levels of reviewers choose a word that has only one meaning use few metaphors don't have formal analysis proofreading: everyone is good! Minimize disadvantages Our solutions apply to other scenarios Our tools have good usability Necessity for reader-centred writing # Too many papers submitted but not enough reviewers Too many DDLs so that a reviewer at most up to 1 day (maybe half) to figure out what we did. Good-writing paper save reviewer's time. Otherwise, he will leave a message \"I couldn't figure out the contributions due the bad writting\".","title":"How to do system and software security research?"},{"location":"posts/2021-09-07-Research-Philosophy/#how-to-do-system-and-software-security-research","text":"","title":"How to do system and software security research?"},{"location":"posts/2021-09-07-Research-Philosophy/#what-is-system-and-software-security","text":"We in system and software security aims to break and protect the assets that leverage hardware and software to provide widely-used services, such as browsers, compilers/interpreters, network protocols, operating systems, hypervisors, trust execution environment, and processors, based on thread models that define who will be trusted or not. A group of people are also interested in sound and electromagnetic waves, leveraging a complete different field of knowledge -- signal processing. Their research is likely offensive. By definition, I think such research is a branch of system and software security. The biggest problem IMO is whether they can gain write primitives besides breaking the confidentiality and availability. Pure cryptography is mathematics. Applied cryptography has a small overlap with system and software security -- we apply very basic cryptography as a mechenism to provide confidentiality. System people build systems and consider security as one of the properties their systems should have. My gut feeling is that system people is used to taking coarse-grained threat models when considering security compared to security people. Additionally, security people also build systems to break and protect assets. Software engeering research is around software development lifecycle (SDLC). Similary, they also consider security as one of the properties they want to have in the SDLC. We security people emphasize vulnerabilities and exploitations. Privacy preserving computation focuses on the privacy problem during the computation, exchanging, and storage of data. It might needs system and software security techniques, but that's it. AI research is about data, models, and computing power. AI security aims to break and protect the high-dimensional function of the model. Importantly, AI infrastructure security has a overlap with system and software security, such as AI compiler security, GPU virtualization and isolation, and LLM prompt sandbox. Technically, blockchain is about consensus. In practice, blockchain has abundant applications in finance, which is impressive. Similary, blockchain infrastructure security has a overlap with system and software security, such as smart contract security.","title":"What is system and software security?"},{"location":"posts/2021-09-07-Research-Philosophy/#where-are-the-ideas-from","text":"An idea consists of a problem and a solution. First, we can read and propose a new idea after reading a paper. However, there will be a delay. One the one hand, a research paper is published two years later than its authors came up with that idea. One the other hand, even though some PC members can check all interesting papers submitted to a conference, there is about half a year or one-year delay. Can we fill the gap? No, we cannot unless we are connecting or collaborating with these authors. Ideas can also come from users, which is so inefficient unless we are connecting or collaborating with industry people. In practice, the first idea comes from our advisors. Later, practical ideas come from our research activities, and we should be curious and critical thinkers about everything in our research activities all the time. Whenever we study, or find or hear of a thing, we should show our interests: What security problems are there? How to address them? Check this article to learn the patterns of research and other tips.","title":"Where are the ideas from?"},{"location":"posts/2021-09-07-Research-Philosophy/#there-are-too-many-ideas-and-how-to-decide","text":"The security research community has grown a lot. More PhD students generate more papers due to cheap resources (computing power, ChatGPT, etc.). Rat-race is going on and we have to fast forward our visibility by building our brand. In practice, we have to choose a topic where we can do resesarch for four to five years continously. Ask our advisors. In terms of a specific topic, we have to evaluate our ideas because not all of them are worthy of our effort. Principle 1: choose a good problem think about the problem first instead of having a solution first a new problem is always better the problem is easy to understand and has clear benefits choose a problem with large security impact if the novelty is little Principle 2: choose a solvable problem solving a easy problem does not need a paper take reasonable assumptions and come up with several solutions know the optimal: consider the computation theory and estimate what the best we can do choose a solution with large security impact if the novelty is little seperate design and implementation Principle 3: must read related work to see how far they have gone. Please pay attention to how many research papers and industry blogs exist. You want to lead the research (there are only 0-2 papers) instead of following others. Do not be ignorant and remember your personal experience is biased.","title":"There are too many ideas and how to decide?"},{"location":"posts/2021-09-07-Research-Philosophy/#tips-to-do-research","text":"","title":"Tips to do research"},{"location":"posts/2021-09-07-Research-Philosophy/#budge-our-time","text":"Mark the DDL two weeks in advance Spend 30 seconds more to save us from a 30-minute disaster Do not do many context switches, which wastes a lot of time Spend less than one day on a project we are not the first author Be busy when it is busy and have fun when it is not busy Take holidays and weekends after submissions","title":"Budge our time"},{"location":"posts/2021-09-07-Research-Philosophy/#what-we-are-going-to-is-what-we-are-going-to-write","text":"Review papers, run their systems, and summarize (RW) Identify challenges and evaluate solutions in theory (challenges, insights, solutions) Design system and evaluate design choices in theory (system design) Coding and write evaluation scripts (IMPL, evaluation) Write the paper at the same time and get feedback from others","title":"What we are going to is what we are going to write"},{"location":"posts/2021-09-07-Research-Philosophy/#set-up-servers","text":"What architectures should we use? How many servers do we have? Are we in the sudo group? Save runtime/intermediate data on SSD and save results on HDD. Do we need to disable the hyper-threading? Buy more CPU, RAM, and storge.","title":"Set up servers"},{"location":"posts/2021-09-07-Research-Philosophy/#do-evaluation","text":"All in Docker container Make it parallel Obtain quick results first, middle-long results for writing, then long time evaluation for submission Go for diversity first, then quantity Do not delete any data if we are sure. Just buy more storage! Do not make the hardware have a rest.","title":"Do evaluation"},{"location":"posts/2021-09-07-Research-Philosophy/#write-a-good-paper","text":"Tell a well-constructed story (information-flow, the pyramid principle) Conduct reader-centred writing: straightforward and clear Writing process drafting: everyone is good! revising: focus, support, coherence a paragraph should have one topic sentence multiple topic sentences should be logical support material must be specific logic should be clear editing: grammar, word choice, sentence skill pay attention to a/an/the, single/plural, could/should choose words for all levels of reviewers choose a word that has only one meaning use few metaphors don't have formal analysis proofreading: everyone is good! Minimize disadvantages Our solutions apply to other scenarios Our tools have good usability","title":"Write a good paper"},{"location":"posts/2021-09-07-Research-Philosophy/#necessity-for-reader-centred-writing","text":"Too many papers submitted but not enough reviewers Too many DDLs so that a reviewer at most up to 1 day (maybe half) to figure out what we did. Good-writing paper save reviewer's time. Otherwise, he will leave a message \"I couldn't figure out the contributions due the bad writting\".","title":"Necessity for reader-centred writing"},{"location":"posts/2021-10-22-fuzzing-presentation/","text":"CS-725 Presentation - Fuzz Testing # This is the text of my speech in CS-725. This text is about fuzz testing, its terminologies, a generic model fuzzer with different design choices, and some discussion about the future work. This text is mainly based on one survey 1 and take some content from another review article 2 . Text (25 min: ~2800 words) and Slides # Hello every. I'm going to present some slides on fuzzing, or fuzz testing, based on one survey paper (reading its name on Slide~1) that was accepted by TSE'19 and one review article (reading its name on Slide~1) written by Patrice Godefroid, working at Microsoft Research, a pioneer of white-box fuzzing. Mostly, slides are from the first survey paper because it's a journal paper through peer reviews. Some slides are from the second review article and I will let you know by an asterisk (*) symbol. (90/170, 40 s) (skipped) Let's start. Let's think about how we mine vulnerabilities in general. As Patrice said in its review paper, we could first apply static program analysis. We can do static program analysis when compiling a binary. As we all know, both GCC and Clang have many checkers. For instance, Clang has checks of insecure APIs, float loop counters, in its current implementation. Compared to run-time solutions, these checkers are fast and good at shallow bugs. However, they suffer from false alarms will miss deeper bugs. Second, we could manually review the code. Apparently, it is flexible and applicable because we do not need much tooling to start if we have the source code or any disassembly. With manual inspection, we can even find deep coding errors and even design flaws. However, this approach is labor-intensive, expensive, and not scalable to lot of software at the same time. The third major approach is fuzzing or fuzz testing, which is also the topic of this presentation. Patrice suggests using fuzzing because they can always find bugs when they fuzz projects in Microsoft, showing the effectiveness of fuzzing. Meanwhile, fuzzing doesn't report false alarms mostly. Fuzzing has its drawbacks. Fuzzing requires test automation and requires each test to run fast and the application state to be reset after each iteration. It is difficult to set up and expensive. Fuzzing can miss bugs as well. In practice, fuzzing is so effective that has been widely deployed by attackers, security competitions, and companies like Microsoft and Google. The fuzzing community is very vibrant. GitHub itself hosts over a thousand public repositories related to fuzzing and as counted in the survey paper, from 2008 to 2019, the big-4 security conferences and three major software engineering conferences have witnessed more than 110 fuzzers. Recently, the number of fuzzing-related papers is 78. Are there any problems? First, the description of fuzzers doesn't go much beyond their source code and manual page. It is easy to lose track of the design decisions and potentially important tweaks (or improvements) in these fuzzers over time. Furthermore, various fuzzers do not always use the same terminologies. AFL uses \"test case minimization\" to refer to a technique that reduces the size of a crashing input. The same technique in funfuzz is called \"test case reduction\". This kind of hinders our communication and the progress of knowledge. According to the above two problems, we need to consolidate the distill a large amount of progress in fuzzing, and hopefully improve it. (160/568, 1 min) Here is the outline of this presentation. First, I will introduce a serial of terminologies in fuzz testing and then introduce a unified fuzzing model that covers different stages when we do fuzzing, such as preprocessing and input evaluation. The major and final part of this presentation is to introduce the design choices in each stage and trade-offs we can and should make. (60/634, 30 s) Let's review some terminologies in fuzzing. Before some definitions, let's see what is a PUT: A PUT is a program under test, which I think is from the software engineering aspect. So, what is fuzzing? Fuzzing is the execution of the PUT using input(s) sampled from an input space that protrudes the expected input space of the PUT. The key word here is protruding, reflecting the meaning that an unexpected input makes a PUT performs incorrectly and unintended. The fuzz testing is then the use of fuzzing to test if a PUT violates a correctness policy; the fuzzer is then a program that performs fuzz testing on a PUT; the fuzzing campaign, namely, is a specific execution of a fuzzer on a PUT with a specific correctness policy. The next important definition is \"bug oracle\", which defines how a fuzzing campaign violates a correctness policy. The correctness policy reflects the bug oracle rather than, say, performance issues. Fuzzing itself can be applied in other non-security scenarios by altering the corresponding policy. A fuzzer requires not only the PUT but also some extensive information, e.g., coverage information, that is, fuzz configuration. These are parameter values that control the fuzz algorithm. A seed pool is another kind of fuzz configuration. (210/842, 2 min) Here is the model fuzzer, the algorithm in the figure. This algorithm is generic enough to accommodate existing fuzzing techniques, including black-, grey-, and white-box fuzzing. Let's check this algorithm. It has two inputs, a set of fuzz configurations and a timeout. Its output is a set of bugs. The algorithm has two parts. The first part is to preprocess the fuzz configurations, such as PUT instrumentation. The second part goes into a loop. In this loop, the model fuzzer will schedule the fuzz configurations, generate an input, evaluation the input, and update the configuration set. I will explain them one by one in the following. Before going on, I'd like to introduce three groups of fuzzers that would be used in the following presentation. Based on the granularity of semantics fuzzers can obverse, they have three groups. The black-box fuzzer doesn't see the internals of the PUT, that is, it can only observe the input/out behaviors of the PUT. At the other extreme, white-box fuzzing generates test cases by analyzing the internals of the PUT and gathering the information when executing the PUT with symbolic execution or taint analysis. What in the middle is the grey-box fuzzer. They may perform lightweight static analysis on the PUT and/or gather dynamic information about its execution, such as code coverage. The distinction is not always clear. Sometimes, it needs human's judgment. (230/1077, 2 mins) Some fuzzers have to preprocess the set of configurations. They usually instrument the PUT, select seeds, trim seeds, and sometimes use a driver application to dispatch seed when it is hard to directly fuzz the PUT. The survey paper didn't say much about the driver application, such that I'd like put it shortly in advance. The driver application is usually manually constructed, which is a one-time effort. Recently, several papers tried to automatically construct the driver application, e.g., FuzzGen, WINNE, APICraft. The driver application is diverse in implementation, which depends on the PUT you'd like to fuzz. (100/1171, 40 s) Let's check the design decisions in instrumentation. Program instrumentation can be either static or dynamic. The former happens before the PUT runs. It can operate source code, IR, or binary. The latter happens while the PUT is running. The static instrumentation generally imposes less run-time overhead. The dynamic instrumentation is good at handling libraries. What are the usage scenarios of the instrumentation? First, instrumentation can be used to collect execution feedback. AFL, libFuzzer, and its descendants compute the branch coverage and store the coverage in a compact bit vector. It is straightforward but has path collisions. Second, instrumentation can be used to schedule threads to trigger different non-deterministic program behaviors. In practice, random scheduling works effectively to discover race condition bugs. The final one is in-memory fuzzing. Sometimes, we want to test a portion of a large PUT to save the time of initialization or startup. Two popular techniques are snapshot and fork server. The former usually has one process, and the latter creates new processes. Next, what if we don't restore the state of the PUT after each iteration, which is named in-memory API fuzzing. A particular example is AFL persistent mode. This technique has side effects: bugs (or crashes) may not be reproducible. In ViDeZZo, we take this technique to accelerate the fuzzing campaign. If the bug or crash cannot be reproducible, we will save all test cases in order, and use delta-debugging to find all necessary test cases. (250/1420, 2 mins) The second and third parts of preprocessing are seed selection and seed trimming. We don't want all the seeds when the number of seeds is large and each of them doesn't equally contribute. The common approach is minset, which tries to find a minimal set of seeds that maximizes a coverage metric. What can be the coverage metric? AFL's minset is based on branch coverage with a logarithmic counter. The rationale behind this is to consider branch counts as different only when they differ in their orders of magnitude. Honggfuzz computes coverage based on the number of executed instructions, executed branches, and unique basic blocks. This metric allows the fuzzer to add longer executions to the minset. When it comes to seed trimming, the goal is to make seeds smaller because they are likely to consume less memory and entail higher throughput. Different tools have different intuitions. AFL reduces the size of a seed by the code coverage. A USec'14 paper shows that the seed with a smaller size might be better. MoonShines tells us we should keep the dependent syscalls. BTW, both of them can be performed in the fuzzing loop, in UpdateConf, after the input evaluation. (200/1621, 2 mins) Fuzzing scheduling means selecting a fuzz configuration for the next fuzz iteration. For more and more advanced fuzzers, a major factor to their success lies in their innovative scheduling algorithms. They usually optimize for the number of bugs or code coverage. They select a better seed entailing more bugs and coverage. From the aspect of game theory, there is a scheduling problem. Fundamentally, every scheduling algorithm confronts the same exploration v.s. exploitation conflict - time can either be spent on gathering more accurate information on each configuration to inform future decisions or on fuzzing the configurations that are currently believed to lead to more favorable outcomes. In the model fuzzer, the schedule function accepts three inputs: the current configuration C with new information gathered in preprocessing or conf updating, the current time, and the total time budget. For black-box fuzzers, the only information is the fuzz outcomes, the number of crashes and bugs and the amount of time spent on it so far. For grey-box fuzzers, they can obtain richer information about each configuration, e.g., the code coverage. AFL, the pioneer, is based on an evolutionary algorithm. Intuitively, an EA maintains a population of configurations, each with some values of fitnesses. Fitness defines how better a test case is. (230/1850, 2 min) The input generation is the most influential design decision in a fuzzer because the content of the input directly triggers a bug. In general, the input generation can be model-based or model-less, which is also named generation- or mutation-based. Model-based or generation-based input generation uses a given model that describes the inputs that the PUT may accept. The model can be predefined. The model can be tool-specific, or grammar, or protocol, or system call templates, or file formats. It depends on the type of input of your PUT. Predefined models are reasonable when the number of models is limited. Patrice said in his review article that how to xxx is another challenge. The model inference can happen in either preprocessing or conf updating. In reprocessing, the model can be inferred from the binary itself, from seeds, or from API logs. In configuration updating, the model can be from kinds of dynamic behaviors. Another type of model is the encoder model. What is an encoder? Many file formats have their decoders and corresponding encoders. The idea behind this is if we can mutate the encoder, we can generate semantic-aware inputs. This design choice can be implemented with program slicing. The model-less input generation, or mutation-based input generation, is a part of the evolutionary algorithm. It can perform bit-flipping. As shown in previous papers, each PUT has a specific mutation ratio. It can perform arithmetic mutation. The mutation first cast 4 bytes to an integer and then does plus or minus operation. It can also perform block-based mutation. Namely, a block is several bytes. The mutation can add, append, delete, replace, shuffle, or crossover these blocks. It can also use the dictionary. The dictionary has a set of strings or bytes that are difficult to guess but helpful to breakthrough some checks. (300/2151, 3 mins) What about the white-box fuzzers? White-box fuzzers generate test cases via dynamic symbolic execution. It is expensive. As said in the review article written by Patrice, how to. In practice, we can specify uninterested parts of a PUT or alternate between concolic testing and grey-box fuzzing. The concolic testing is on-demand when the fuzzer needs it to solve some constraints. Some fuzzers leverage static or dynamic program analysis to boost the fuzzing effectiveness. They usually have two steps. Step 1: heavy program analysis; step 2: test case generation. For example, some fuzzers use taint analysis to identify hot bytes in an input. The hots bytes flow to target APIs or syscalls. Some fuzzers extract the control or data flow features of the PUT and guide the input generation. Another interesting direction is to change the PUT and recover it when reproducing. For example, we can remove the checksum checks in the PUT and add them when reproducing a crash. We can also remove the non-critical checks to boost the fuzzing outcomes. (200/2352, 2 mins) After the input generation, the fuzzer executes the PUT on the input and decides what to do the resulting execution. This process is called input evaluation. Here, we have bug oracles, execution optimization, and triage in the next slide. At the very beginning, fuzz testing considers every PUT terminates by a fatal signal. This policy is simple and easy to enforce. However, it cannot detect memory bugs. As mitigation, researchers have proposed a variety of efficient program transformations to detect unsafe or unwanted program behaviors and abort the program. These are often called sanitizers. Memory safety errors can be spatial and temporal. AddressSanitizer is useful to detect many memory safety errors. Besides, CFI enforcement is another class of memory safety protection. For other undefined behaviors, uninitialized memory, etc., can be detected by MSAN and UBSAN. In addition to sanitizers, fuzzers can validate input by manually specific patterns or differential testing. As we talked about in the instrumentation, to optimize the execution, fuzzers can use fork-server or in-memory fuzzing to avoid wasting the time of initialization or PUT reset. (150/2489, 1 min) The final part is to triage. It has three steps: deduplication, prioritization, and minimization. Deduplication is the process to remove the test case in the output that causes the same bug. Three are three techniques. First, stack backtrace hashing. It is widely used but \"some xxx\", which means that some test cases are not going to be removed. Second, coverage-based deduplication. The crash covered a previously unseen edge is a new test case that should be kept. Third, semantic-aware deduplication. This technique tries to find the root cause of a bug then remove the duplicated test cases. Next, how to prioritize the test cases due to the conflict of the number of bugs found and limited human resources. The prioritization is usually based on exploitability. This is fair, but we have to decide whether the bug can be exploited, which is another challenging problem. The final is to minimize the test cases. We mentioned test case minimization and trimming in preprocessing. The difference is that test case minimization here can leverage the bug oracle. This design choice can be implemented via delta-debugging or some other specific approaches, like C-Reduced. (200/2680, 2 min) Finally, we come to the configuration updating. Mostly black-box fuzzer don't update configuration because they are not aware of any execution information. White-box fuzzers generate a configuration for each generated test case. For an evolutionary algorithm, one of the most important parts is to add a new test case in the seed pool. Each test case has a fitness. The common approach is to check whether this test case contributes node or branch coverage. The fitness function is usually refined in many ways. For instance, AFL takes the number of token branches into consideration. VUzzer considers the weights of each BB. To avoid creating too many configurations, the fuzzer should maintain a minset. There are many variants here. We can either remove the configurations that not in the minset or mark them in-favorable. (130/2817, 1 min) All in all, the survey paper introduced rich taxonomy, a general-purpose model fuzzer, and design decision in each stage. Hopefully, it can bring more uniformity, particularly in the terminology and presentation of fuzzing algorithms. (30/2854, 30 s) Some selected comments # CFI here is shitty for fuzzing, which should not be listed here. The initial set is under-valued. In this presentation, the initial set is part of the configuration. However, when we provide a good set of initial seeds, the fuzzer can only focus on exploitability. Pay attention to what are the problems in this field, what are solved, and what are not solved. Do you think this paper is useful for terminology uniformity? Answer: Yes, but I do not think we have the agreement in practice. Scholars create their own terminologies all the time. The Art, Science, and Engineering of Fuzzing: A Survey \u21a9 Fuzzing: Hack, Art, and Science \u21a9","title":"CS-725 Presentation - Fuzz Testing"},{"location":"posts/2021-10-22-fuzzing-presentation/#cs-725-presentation-fuzz-testing","text":"This is the text of my speech in CS-725. This text is about fuzz testing, its terminologies, a generic model fuzzer with different design choices, and some discussion about the future work. This text is mainly based on one survey 1 and take some content from another review article 2 .","title":"CS-725 Presentation - Fuzz Testing"},{"location":"posts/2021-10-22-fuzzing-presentation/#text-25-min-2800-words-and-slides","text":"Hello every. I'm going to present some slides on fuzzing, or fuzz testing, based on one survey paper (reading its name on Slide~1) that was accepted by TSE'19 and one review article (reading its name on Slide~1) written by Patrice Godefroid, working at Microsoft Research, a pioneer of white-box fuzzing. Mostly, slides are from the first survey paper because it's a journal paper through peer reviews. Some slides are from the second review article and I will let you know by an asterisk (*) symbol. (90/170, 40 s) (skipped) Let's start. Let's think about how we mine vulnerabilities in general. As Patrice said in its review paper, we could first apply static program analysis. We can do static program analysis when compiling a binary. As we all know, both GCC and Clang have many checkers. For instance, Clang has checks of insecure APIs, float loop counters, in its current implementation. Compared to run-time solutions, these checkers are fast and good at shallow bugs. However, they suffer from false alarms will miss deeper bugs. Second, we could manually review the code. Apparently, it is flexible and applicable because we do not need much tooling to start if we have the source code or any disassembly. With manual inspection, we can even find deep coding errors and even design flaws. However, this approach is labor-intensive, expensive, and not scalable to lot of software at the same time. The third major approach is fuzzing or fuzz testing, which is also the topic of this presentation. Patrice suggests using fuzzing because they can always find bugs when they fuzz projects in Microsoft, showing the effectiveness of fuzzing. Meanwhile, fuzzing doesn't report false alarms mostly. Fuzzing has its drawbacks. Fuzzing requires test automation and requires each test to run fast and the application state to be reset after each iteration. It is difficult to set up and expensive. Fuzzing can miss bugs as well. In practice, fuzzing is so effective that has been widely deployed by attackers, security competitions, and companies like Microsoft and Google. The fuzzing community is very vibrant. GitHub itself hosts over a thousand public repositories related to fuzzing and as counted in the survey paper, from 2008 to 2019, the big-4 security conferences and three major software engineering conferences have witnessed more than 110 fuzzers. Recently, the number of fuzzing-related papers is 78. Are there any problems? First, the description of fuzzers doesn't go much beyond their source code and manual page. It is easy to lose track of the design decisions and potentially important tweaks (or improvements) in these fuzzers over time. Furthermore, various fuzzers do not always use the same terminologies. AFL uses \"test case minimization\" to refer to a technique that reduces the size of a crashing input. The same technique in funfuzz is called \"test case reduction\". This kind of hinders our communication and the progress of knowledge. According to the above two problems, we need to consolidate the distill a large amount of progress in fuzzing, and hopefully improve it. (160/568, 1 min) Here is the outline of this presentation. First, I will introduce a serial of terminologies in fuzz testing and then introduce a unified fuzzing model that covers different stages when we do fuzzing, such as preprocessing and input evaluation. The major and final part of this presentation is to introduce the design choices in each stage and trade-offs we can and should make. (60/634, 30 s) Let's review some terminologies in fuzzing. Before some definitions, let's see what is a PUT: A PUT is a program under test, which I think is from the software engineering aspect. So, what is fuzzing? Fuzzing is the execution of the PUT using input(s) sampled from an input space that protrudes the expected input space of the PUT. The key word here is protruding, reflecting the meaning that an unexpected input makes a PUT performs incorrectly and unintended. The fuzz testing is then the use of fuzzing to test if a PUT violates a correctness policy; the fuzzer is then a program that performs fuzz testing on a PUT; the fuzzing campaign, namely, is a specific execution of a fuzzer on a PUT with a specific correctness policy. The next important definition is \"bug oracle\", which defines how a fuzzing campaign violates a correctness policy. The correctness policy reflects the bug oracle rather than, say, performance issues. Fuzzing itself can be applied in other non-security scenarios by altering the corresponding policy. A fuzzer requires not only the PUT but also some extensive information, e.g., coverage information, that is, fuzz configuration. These are parameter values that control the fuzz algorithm. A seed pool is another kind of fuzz configuration. (210/842, 2 min) Here is the model fuzzer, the algorithm in the figure. This algorithm is generic enough to accommodate existing fuzzing techniques, including black-, grey-, and white-box fuzzing. Let's check this algorithm. It has two inputs, a set of fuzz configurations and a timeout. Its output is a set of bugs. The algorithm has two parts. The first part is to preprocess the fuzz configurations, such as PUT instrumentation. The second part goes into a loop. In this loop, the model fuzzer will schedule the fuzz configurations, generate an input, evaluation the input, and update the configuration set. I will explain them one by one in the following. Before going on, I'd like to introduce three groups of fuzzers that would be used in the following presentation. Based on the granularity of semantics fuzzers can obverse, they have three groups. The black-box fuzzer doesn't see the internals of the PUT, that is, it can only observe the input/out behaviors of the PUT. At the other extreme, white-box fuzzing generates test cases by analyzing the internals of the PUT and gathering the information when executing the PUT with symbolic execution or taint analysis. What in the middle is the grey-box fuzzer. They may perform lightweight static analysis on the PUT and/or gather dynamic information about its execution, such as code coverage. The distinction is not always clear. Sometimes, it needs human's judgment. (230/1077, 2 mins) Some fuzzers have to preprocess the set of configurations. They usually instrument the PUT, select seeds, trim seeds, and sometimes use a driver application to dispatch seed when it is hard to directly fuzz the PUT. The survey paper didn't say much about the driver application, such that I'd like put it shortly in advance. The driver application is usually manually constructed, which is a one-time effort. Recently, several papers tried to automatically construct the driver application, e.g., FuzzGen, WINNE, APICraft. The driver application is diverse in implementation, which depends on the PUT you'd like to fuzz. (100/1171, 40 s) Let's check the design decisions in instrumentation. Program instrumentation can be either static or dynamic. The former happens before the PUT runs. It can operate source code, IR, or binary. The latter happens while the PUT is running. The static instrumentation generally imposes less run-time overhead. The dynamic instrumentation is good at handling libraries. What are the usage scenarios of the instrumentation? First, instrumentation can be used to collect execution feedback. AFL, libFuzzer, and its descendants compute the branch coverage and store the coverage in a compact bit vector. It is straightforward but has path collisions. Second, instrumentation can be used to schedule threads to trigger different non-deterministic program behaviors. In practice, random scheduling works effectively to discover race condition bugs. The final one is in-memory fuzzing. Sometimes, we want to test a portion of a large PUT to save the time of initialization or startup. Two popular techniques are snapshot and fork server. The former usually has one process, and the latter creates new processes. Next, what if we don't restore the state of the PUT after each iteration, which is named in-memory API fuzzing. A particular example is AFL persistent mode. This technique has side effects: bugs (or crashes) may not be reproducible. In ViDeZZo, we take this technique to accelerate the fuzzing campaign. If the bug or crash cannot be reproducible, we will save all test cases in order, and use delta-debugging to find all necessary test cases. (250/1420, 2 mins) The second and third parts of preprocessing are seed selection and seed trimming. We don't want all the seeds when the number of seeds is large and each of them doesn't equally contribute. The common approach is minset, which tries to find a minimal set of seeds that maximizes a coverage metric. What can be the coverage metric? AFL's minset is based on branch coverage with a logarithmic counter. The rationale behind this is to consider branch counts as different only when they differ in their orders of magnitude. Honggfuzz computes coverage based on the number of executed instructions, executed branches, and unique basic blocks. This metric allows the fuzzer to add longer executions to the minset. When it comes to seed trimming, the goal is to make seeds smaller because they are likely to consume less memory and entail higher throughput. Different tools have different intuitions. AFL reduces the size of a seed by the code coverage. A USec'14 paper shows that the seed with a smaller size might be better. MoonShines tells us we should keep the dependent syscalls. BTW, both of them can be performed in the fuzzing loop, in UpdateConf, after the input evaluation. (200/1621, 2 mins) Fuzzing scheduling means selecting a fuzz configuration for the next fuzz iteration. For more and more advanced fuzzers, a major factor to their success lies in their innovative scheduling algorithms. They usually optimize for the number of bugs or code coverage. They select a better seed entailing more bugs and coverage. From the aspect of game theory, there is a scheduling problem. Fundamentally, every scheduling algorithm confronts the same exploration v.s. exploitation conflict - time can either be spent on gathering more accurate information on each configuration to inform future decisions or on fuzzing the configurations that are currently believed to lead to more favorable outcomes. In the model fuzzer, the schedule function accepts three inputs: the current configuration C with new information gathered in preprocessing or conf updating, the current time, and the total time budget. For black-box fuzzers, the only information is the fuzz outcomes, the number of crashes and bugs and the amount of time spent on it so far. For grey-box fuzzers, they can obtain richer information about each configuration, e.g., the code coverage. AFL, the pioneer, is based on an evolutionary algorithm. Intuitively, an EA maintains a population of configurations, each with some values of fitnesses. Fitness defines how better a test case is. (230/1850, 2 min) The input generation is the most influential design decision in a fuzzer because the content of the input directly triggers a bug. In general, the input generation can be model-based or model-less, which is also named generation- or mutation-based. Model-based or generation-based input generation uses a given model that describes the inputs that the PUT may accept. The model can be predefined. The model can be tool-specific, or grammar, or protocol, or system call templates, or file formats. It depends on the type of input of your PUT. Predefined models are reasonable when the number of models is limited. Patrice said in his review article that how to xxx is another challenge. The model inference can happen in either preprocessing or conf updating. In reprocessing, the model can be inferred from the binary itself, from seeds, or from API logs. In configuration updating, the model can be from kinds of dynamic behaviors. Another type of model is the encoder model. What is an encoder? Many file formats have their decoders and corresponding encoders. The idea behind this is if we can mutate the encoder, we can generate semantic-aware inputs. This design choice can be implemented with program slicing. The model-less input generation, or mutation-based input generation, is a part of the evolutionary algorithm. It can perform bit-flipping. As shown in previous papers, each PUT has a specific mutation ratio. It can perform arithmetic mutation. The mutation first cast 4 bytes to an integer and then does plus or minus operation. It can also perform block-based mutation. Namely, a block is several bytes. The mutation can add, append, delete, replace, shuffle, or crossover these blocks. It can also use the dictionary. The dictionary has a set of strings or bytes that are difficult to guess but helpful to breakthrough some checks. (300/2151, 3 mins) What about the white-box fuzzers? White-box fuzzers generate test cases via dynamic symbolic execution. It is expensive. As said in the review article written by Patrice, how to. In practice, we can specify uninterested parts of a PUT or alternate between concolic testing and grey-box fuzzing. The concolic testing is on-demand when the fuzzer needs it to solve some constraints. Some fuzzers leverage static or dynamic program analysis to boost the fuzzing effectiveness. They usually have two steps. Step 1: heavy program analysis; step 2: test case generation. For example, some fuzzers use taint analysis to identify hot bytes in an input. The hots bytes flow to target APIs or syscalls. Some fuzzers extract the control or data flow features of the PUT and guide the input generation. Another interesting direction is to change the PUT and recover it when reproducing. For example, we can remove the checksum checks in the PUT and add them when reproducing a crash. We can also remove the non-critical checks to boost the fuzzing outcomes. (200/2352, 2 mins) After the input generation, the fuzzer executes the PUT on the input and decides what to do the resulting execution. This process is called input evaluation. Here, we have bug oracles, execution optimization, and triage in the next slide. At the very beginning, fuzz testing considers every PUT terminates by a fatal signal. This policy is simple and easy to enforce. However, it cannot detect memory bugs. As mitigation, researchers have proposed a variety of efficient program transformations to detect unsafe or unwanted program behaviors and abort the program. These are often called sanitizers. Memory safety errors can be spatial and temporal. AddressSanitizer is useful to detect many memory safety errors. Besides, CFI enforcement is another class of memory safety protection. For other undefined behaviors, uninitialized memory, etc., can be detected by MSAN and UBSAN. In addition to sanitizers, fuzzers can validate input by manually specific patterns or differential testing. As we talked about in the instrumentation, to optimize the execution, fuzzers can use fork-server or in-memory fuzzing to avoid wasting the time of initialization or PUT reset. (150/2489, 1 min) The final part is to triage. It has three steps: deduplication, prioritization, and minimization. Deduplication is the process to remove the test case in the output that causes the same bug. Three are three techniques. First, stack backtrace hashing. It is widely used but \"some xxx\", which means that some test cases are not going to be removed. Second, coverage-based deduplication. The crash covered a previously unseen edge is a new test case that should be kept. Third, semantic-aware deduplication. This technique tries to find the root cause of a bug then remove the duplicated test cases. Next, how to prioritize the test cases due to the conflict of the number of bugs found and limited human resources. The prioritization is usually based on exploitability. This is fair, but we have to decide whether the bug can be exploited, which is another challenging problem. The final is to minimize the test cases. We mentioned test case minimization and trimming in preprocessing. The difference is that test case minimization here can leverage the bug oracle. This design choice can be implemented via delta-debugging or some other specific approaches, like C-Reduced. (200/2680, 2 min) Finally, we come to the configuration updating. Mostly black-box fuzzer don't update configuration because they are not aware of any execution information. White-box fuzzers generate a configuration for each generated test case. For an evolutionary algorithm, one of the most important parts is to add a new test case in the seed pool. Each test case has a fitness. The common approach is to check whether this test case contributes node or branch coverage. The fitness function is usually refined in many ways. For instance, AFL takes the number of token branches into consideration. VUzzer considers the weights of each BB. To avoid creating too many configurations, the fuzzer should maintain a minset. There are many variants here. We can either remove the configurations that not in the minset or mark them in-favorable. (130/2817, 1 min) All in all, the survey paper introduced rich taxonomy, a general-purpose model fuzzer, and design decision in each stage. Hopefully, it can bring more uniformity, particularly in the terminology and presentation of fuzzing algorithms. (30/2854, 30 s)","title":"Text (25 min: ~2800 words) and Slides"},{"location":"posts/2021-10-22-fuzzing-presentation/#some-selected-comments","text":"CFI here is shitty for fuzzing, which should not be listed here. The initial set is under-valued. In this presentation, the initial set is part of the configuration. However, when we provide a good set of initial seeds, the fuzzer can only focus on exploitability. Pay attention to what are the problems in this field, what are solved, and what are not solved. Do you think this paper is useful for terminology uniformity? Answer: Yes, but I do not think we have the agreement in practice. Scholars create their own terminologies all the time. The Art, Science, and Engineering of Fuzzing: A Survey \u21a9 Fuzzing: Hack, Art, and Science \u21a9","title":"Some selected comments"},{"location":"posts/2021-10-27-introduction-to-bhyve/","text":"Introduction to Bhyve # In this short article, I'm going to introduce what is Bhyve, how it works, and how to modify it. What is Bhyve? 1 2 3 # Bhyve, pronounced \"beehive\", is a hypervisor for FreeBSD. Bhyve runs on x86_64 host and supports i386 and x86_64 guests. Bhyve requires VT-x/EPT CPU support (core i*). Bhyve consists of a kernel module: vmm.ko , a library libvmmapi , and some utilities bhyve , bhyveload , and bhyvectl . Yes, it works as a kernel model like KVM . The source code is in the FreeBSD SVN source repository: sys/amd64/vmm/, usr.sbin/bhyve/, usr.sbin/bhyveload/, usr.sbin/bhyvectl/, and lib/libvmmapi/ Variants: xhyve 4 , Pluribus Netvisor , bhyve in Illumos-based distributions . Components 5 # component functionality vmm.ko VT-x, local APCI, VT-d for PCI pass-thru, guest phymem mgmt, user-space cdev-interface bhyveload user-space bootloader, userboot lib + bhyve API, creates VM, lays out kernel + metadata, sets up initial VM register state bhyve user-space run loop, PCI bus/device emulation, device backends, threads for vCPU, i/o devs, kqueue loop bhyvectl dump/modify VM state, dump VM stats, delete VMs libvmmapi userland API Dismistafication # vhyveload only supports FreeBSD, grub2-bhyve can load Linux and OpenBSD each /dev/vmm/${vmname} contains each VM instance state VMX-root: hypervisor, VMX-non-root: VM VMX (VMCS-maintenace) instructions # VMPTRLD \u2014 It makes the referenced VMCS active and current. VMPTRST \u2014 The current-VMCS pointer is stored into the destination operand. VMCLEAR \u2014 The instruction sets the launch state of the VMCS referenced by the operand to \u201cclear\u201d, renders that VMCS inactive, and ensures that data for the VMCS have been written to the VMCS-data area in the referenced VMCS region. If the operand is the same as the current-VMCS pointer, that pointer is made invalid. VMREAD \u2014 This instruction reads a component from a VMCS. VMWRITE \u2014 This instruction writes a component to a VMCS. VMLAUNCH \u2014 This instruction launches a virtual machine managed by the VMCS. A VM entry occurs, transferring control to the VM. VMRESUME \u2014 This instruction resumes a virtual machine managed by the VMCS. A VM entry occurs, transferring control to the VM. VMXOFF \u2014 This instruction causes the processor to leave VMX operation. VMXON \u2014 It causes a logical processor to enter VMX root operation. (vmm_init -> vm_init -> vm_enable -> vmxon) INVEPT \u2014 This instruction invalidates entries in the TLBs and paging-structure caches that were derived from extended page tables (EPT). INVVPID \u2014 This instruction invalidates entries in the TLBs and paging-structure caches based on a VirtualProcessor Identifier (VPID). VMCALL \u2014 This instruction allows software in VMX non-root operation to call the VMM for service. A VM exit occurs, transferring control to the VMM. VMFUNC \u2014 This instruction allows software in VMX non-root operation to invoke a VM function (processor functionality enabled and configured by software in VMX root operation) without a VM exit. Some data structs # #define VM_MAXCPU 8 struct vm_exit { enum vm_exitcode exitcode; int inst_length; /* 0 means unknown */ uint64_t rip; union { struct {} inout; // direction, how many bytes, port number, eax for out struct {} paging; struct {} vmx; struct {} msr; } u; }; struct vm_exit vmexit[VM_MAXCPU]; The above code defines exit information for each virtual cpu. BHyve VMExit code # code handler description next VM_EXITCODE_INOUT vmexit_inout in and out instructions VMEXIT_CONTINUE or VMEXIT_ABORT VM_EXITCODE_VMX vmexit_vmx vm exit VMEXIT_ABORT VM_EXITCODE_BOGUS vmexit_bogus VMEXIT_RESTART or VMEXIT_SWITCH VM_EXITCODE_RDMSR vmexit_rdmsr Local APIC VMEXIT_ABORT VM_EXITCODE_WRMSR vmexit_wrmsr -> emulate_wrmsr Local APIC VMEXIT_CONTINUE or VMEXIT_SWITCH VM_EXITCODE_MTRAP vmexit_mtrap VMEXIT_RESTART VM_EXITCODE_PAGING vmexit_paging -> emulate_instruction VMEXIT_CONTINUE or VMEXIT_ABORT Example: vmexit_inout # static int vmexit_inout(struct vmctx *ctx, struct vm_exit *vme, int *pvcpu) { // ignore ins/outs if (vme->u.inout.string || vme->u.inout.rep) return (VMEXIT_ABORT); // reset: out 0x64, 0xFE -> vmexit_catch_reset -> VMEXIT_RESET if (out && port == 0x64 && (uint8_t)eax == 0xFE) return (vmexit_catch_reset()); // host notification: out 0x488, {0, 1, 5} -> VMEXIT_CONTINUE if (out && port == GUEST_NIO_PORT) return (vmexit_handle_notify(ctx, vme, pvcpu, eax)); // handle other in/out error = emulate_inout(ctx, vcpu, in, port, bytes, &eax, strictio); if (error == 0 && in) error = vm_set_register(ctx, vcpu, VM_REG_GUEST_RAX, eax); if (error == 0) return (VMEXIT_CONTINUE); else { return (vmexit_catch_inout()); // VMEXIT_ABORT } } Some data structs # #define SET_DECLARE(set, ptype) \\ extern ptype *__CONCAT(__start_set_,set); \\ extern ptype *__CONCAT(__stop_set_,set) #define SET_BEGIN(set) \\ (&__CONCAT(__start_set_,set)) #define SET_LIMIT(set) \\ (&__CONCAT(__stop_set_,set)) #define SET_FOREACH(pvar, set) \\ for (pvar = SET_BEGIN(set); pvar < SET_LIMIT(set); pvar++) #define SET_ITEM(set, i) \\ ((SET_BEGIN(set))[i]) #define SET_COUNT(set) \\ (SET_LIMIT(set) - SET_BEGIN(set)) SET_DECLARE(pci_devemu_set, struct pci_devemu); struct pci_devemu { char *pe_emu; /* Name of device emulation */ /* instance creation */ int (*pe_init)(struct vmctx *, struct pci_devinst *, char *opts); /* config space read/write callbacks */ int (*pe_cfgwrite)(...) int (*pe_cfgread)(...) /* I/O space read/write callbacks */ void (*pe_iow)(...) uint32_t (*pe_ior)(...) }; #ifdef __GNUCLIKE___SECTION #define __MAKE_SET(set, sym) \\ __GLOBL(__CONCAT(__start_set_,set)); \\ __GLOBL(__CONCAT(__stop_set_,set)); \\ static void const * const __set_##set##_sym_##sym \\ __section(\"set_\" #set) __used = &sym #else /* !__GNUCLIKE___SECTION */ #ifndef lint #error this file needs to be ported to your compiler #endif /* lint */ #define __MAKE_SET(set, sym) extern void const * const (__set_##set##_sym_##sym) #endif /* __GNUCLIKE___SECTION */ #define TEXT_SET(set, sym) __MAKE_SET(set, sym) #define DATA_SET(set, sym) __MAKE_SET(set, sym) #define BSS_SET(set, sym) __MAKE_SET(set, sym) #define ABS_SET(set, sym) __MAKE_SET(set, sym) #define SET_ENTRY(set, sym) __MAKE_SET(set, sym) PCI_EMUL_SET(pci_xxx); The above code defines name and callbacks of each PCI devices. Virtual devices (dummy means very low fidelity) (Old BHyve) # peripheral file description atpic usr.sbin/bhyve/atpic.c dummy console usr.sbin/bhyve/consport.c ttyread|ttywrite gdbport usr.sbin/bhyve/dbgport.c bind, listen, accept, read|write elcr usr.sbin/bhyve/dbgport.c dummy pit 8254 usr.sbin/bhyve/pit_8254.c pit_8254_handler post usr.sbin/bhyve/post.c dummy rtc usr.sbin/bhyve/rtc.c rtc_addr_handler|rtc_data_handler uart usr.sbin/bhyve/uart.c dummy pci-dummy usr.sbin/bhyve/pci_emul.c pci_emul_dinit|pci_emul_diow|pci_emul_dior pci-hostbridge usr.sbin/bhyve/pci_hostbridge.c pci_hostbridge_init pci-passthru usr.sbin/bhyve/pci_passthru.c /dev/pci, /dev/io pci-uart usr.sbin/bhyve/pci_uart.c pci_uart_init|pci_uart_write|pci_uart_read pci-virtio-blk usr.sbin/bhyve/pci_virtio_block.c pci_vtblk_init|pci_vtblk_write|pci_vtblk_read pci-virtio-net usr.sbin/bhyve/pci_virtio_net.c pci_vtnet_init|pci_vtnet_write|pci_vtnet_read Virtual device initialization # while (c = getopt()) switch (c) case 's': pci_parse_slot(optarg, 0); // not legacy break; case 'S': pci_parse_slot(optarg, 1); // legacy break; // ------------------------------ // pci_parse_slot // ------------------------------ // snum is from 0 to 31 // 0,hostbridge // 1,virtio-net,tap0 // pci_slotinfo[snum].si_name = emul; // hostbridge, virtio-net // pci_slotinfo[snum].si_param = config; // null, tap0 // pci_slotinfo[snum].si_legacy = legacy; // 0, 1 init_inout install handler for each port: atpic, console, gdbport, elcr, pci_emu, pit 8254, post, rtc, and uart. init_pci // it depends on opts pde = pci_emul_finddev(si->si_name); if (pde != NULL) { pci_emul_init(ctx, pde, i, si->si_param); // invoke ->init Extend BTest (like QTest) to BHyve # The idea of BTest is to implement the same primitives as QTest. We can leverage the PCI interfaces because we are doing in-memory fuzzing rather than doing traps. Homepage of Bhyve \u21a9 Wikipedia of Bhyve \u21a9 Q&A of Byyve \u21a9 xhyve \u21a9 Extending bhyve beyond FreeBD guests \u21a9","title":"Introduction to Bhyve"},{"location":"posts/2021-10-27-introduction-to-bhyve/#introduction-to-bhyve","text":"In this short article, I'm going to introduce what is Bhyve, how it works, and how to modify it.","title":"Introduction to Bhyve"},{"location":"posts/2021-10-27-introduction-to-bhyve/#what-is-bhyve123","text":"Bhyve, pronounced \"beehive\", is a hypervisor for FreeBSD. Bhyve runs on x86_64 host and supports i386 and x86_64 guests. Bhyve requires VT-x/EPT CPU support (core i*). Bhyve consists of a kernel module: vmm.ko , a library libvmmapi , and some utilities bhyve , bhyveload , and bhyvectl . Yes, it works as a kernel model like KVM . The source code is in the FreeBSD SVN source repository: sys/amd64/vmm/, usr.sbin/bhyve/, usr.sbin/bhyveload/, usr.sbin/bhyvectl/, and lib/libvmmapi/ Variants: xhyve 4 , Pluribus Netvisor , bhyve in Illumos-based distributions .","title":"What is Bhyve?123"},{"location":"posts/2021-10-27-introduction-to-bhyve/#components5","text":"component functionality vmm.ko VT-x, local APCI, VT-d for PCI pass-thru, guest phymem mgmt, user-space cdev-interface bhyveload user-space bootloader, userboot lib + bhyve API, creates VM, lays out kernel + metadata, sets up initial VM register state bhyve user-space run loop, PCI bus/device emulation, device backends, threads for vCPU, i/o devs, kqueue loop bhyvectl dump/modify VM state, dump VM stats, delete VMs libvmmapi userland API","title":"Components5"},{"location":"posts/2021-10-27-introduction-to-bhyve/#dismistafication","text":"vhyveload only supports FreeBSD, grub2-bhyve can load Linux and OpenBSD each /dev/vmm/${vmname} contains each VM instance state VMX-root: hypervisor, VMX-non-root: VM","title":"Dismistafication"},{"location":"posts/2021-10-27-introduction-to-bhyve/#vmx-vmcs-maintenace-instructions","text":"VMPTRLD \u2014 It makes the referenced VMCS active and current. VMPTRST \u2014 The current-VMCS pointer is stored into the destination operand. VMCLEAR \u2014 The instruction sets the launch state of the VMCS referenced by the operand to \u201cclear\u201d, renders that VMCS inactive, and ensures that data for the VMCS have been written to the VMCS-data area in the referenced VMCS region. If the operand is the same as the current-VMCS pointer, that pointer is made invalid. VMREAD \u2014 This instruction reads a component from a VMCS. VMWRITE \u2014 This instruction writes a component to a VMCS. VMLAUNCH \u2014 This instruction launches a virtual machine managed by the VMCS. A VM entry occurs, transferring control to the VM. VMRESUME \u2014 This instruction resumes a virtual machine managed by the VMCS. A VM entry occurs, transferring control to the VM. VMXOFF \u2014 This instruction causes the processor to leave VMX operation. VMXON \u2014 It causes a logical processor to enter VMX root operation. (vmm_init -> vm_init -> vm_enable -> vmxon) INVEPT \u2014 This instruction invalidates entries in the TLBs and paging-structure caches that were derived from extended page tables (EPT). INVVPID \u2014 This instruction invalidates entries in the TLBs and paging-structure caches based on a VirtualProcessor Identifier (VPID). VMCALL \u2014 This instruction allows software in VMX non-root operation to call the VMM for service. A VM exit occurs, transferring control to the VMM. VMFUNC \u2014 This instruction allows software in VMX non-root operation to invoke a VM function (processor functionality enabled and configured by software in VMX root operation) without a VM exit.","title":"VMX (VMCS-maintenace) instructions"},{"location":"posts/2021-10-27-introduction-to-bhyve/#some-data-structs","text":"#define VM_MAXCPU 8 struct vm_exit { enum vm_exitcode exitcode; int inst_length; /* 0 means unknown */ uint64_t rip; union { struct {} inout; // direction, how many bytes, port number, eax for out struct {} paging; struct {} vmx; struct {} msr; } u; }; struct vm_exit vmexit[VM_MAXCPU]; The above code defines exit information for each virtual cpu.","title":"Some data structs"},{"location":"posts/2021-10-27-introduction-to-bhyve/#bhyve-vmexit-code","text":"code handler description next VM_EXITCODE_INOUT vmexit_inout in and out instructions VMEXIT_CONTINUE or VMEXIT_ABORT VM_EXITCODE_VMX vmexit_vmx vm exit VMEXIT_ABORT VM_EXITCODE_BOGUS vmexit_bogus VMEXIT_RESTART or VMEXIT_SWITCH VM_EXITCODE_RDMSR vmexit_rdmsr Local APIC VMEXIT_ABORT VM_EXITCODE_WRMSR vmexit_wrmsr -> emulate_wrmsr Local APIC VMEXIT_CONTINUE or VMEXIT_SWITCH VM_EXITCODE_MTRAP vmexit_mtrap VMEXIT_RESTART VM_EXITCODE_PAGING vmexit_paging -> emulate_instruction VMEXIT_CONTINUE or VMEXIT_ABORT","title":"BHyve VMExit code"},{"location":"posts/2021-10-27-introduction-to-bhyve/#example-vmexit_inout","text":"static int vmexit_inout(struct vmctx *ctx, struct vm_exit *vme, int *pvcpu) { // ignore ins/outs if (vme->u.inout.string || vme->u.inout.rep) return (VMEXIT_ABORT); // reset: out 0x64, 0xFE -> vmexit_catch_reset -> VMEXIT_RESET if (out && port == 0x64 && (uint8_t)eax == 0xFE) return (vmexit_catch_reset()); // host notification: out 0x488, {0, 1, 5} -> VMEXIT_CONTINUE if (out && port == GUEST_NIO_PORT) return (vmexit_handle_notify(ctx, vme, pvcpu, eax)); // handle other in/out error = emulate_inout(ctx, vcpu, in, port, bytes, &eax, strictio); if (error == 0 && in) error = vm_set_register(ctx, vcpu, VM_REG_GUEST_RAX, eax); if (error == 0) return (VMEXIT_CONTINUE); else { return (vmexit_catch_inout()); // VMEXIT_ABORT } }","title":"Example: vmexit_inout"},{"location":"posts/2021-10-27-introduction-to-bhyve/#some-data-structs_1","text":"#define SET_DECLARE(set, ptype) \\ extern ptype *__CONCAT(__start_set_,set); \\ extern ptype *__CONCAT(__stop_set_,set) #define SET_BEGIN(set) \\ (&__CONCAT(__start_set_,set)) #define SET_LIMIT(set) \\ (&__CONCAT(__stop_set_,set)) #define SET_FOREACH(pvar, set) \\ for (pvar = SET_BEGIN(set); pvar < SET_LIMIT(set); pvar++) #define SET_ITEM(set, i) \\ ((SET_BEGIN(set))[i]) #define SET_COUNT(set) \\ (SET_LIMIT(set) - SET_BEGIN(set)) SET_DECLARE(pci_devemu_set, struct pci_devemu); struct pci_devemu { char *pe_emu; /* Name of device emulation */ /* instance creation */ int (*pe_init)(struct vmctx *, struct pci_devinst *, char *opts); /* config space read/write callbacks */ int (*pe_cfgwrite)(...) int (*pe_cfgread)(...) /* I/O space read/write callbacks */ void (*pe_iow)(...) uint32_t (*pe_ior)(...) }; #ifdef __GNUCLIKE___SECTION #define __MAKE_SET(set, sym) \\ __GLOBL(__CONCAT(__start_set_,set)); \\ __GLOBL(__CONCAT(__stop_set_,set)); \\ static void const * const __set_##set##_sym_##sym \\ __section(\"set_\" #set) __used = &sym #else /* !__GNUCLIKE___SECTION */ #ifndef lint #error this file needs to be ported to your compiler #endif /* lint */ #define __MAKE_SET(set, sym) extern void const * const (__set_##set##_sym_##sym) #endif /* __GNUCLIKE___SECTION */ #define TEXT_SET(set, sym) __MAKE_SET(set, sym) #define DATA_SET(set, sym) __MAKE_SET(set, sym) #define BSS_SET(set, sym) __MAKE_SET(set, sym) #define ABS_SET(set, sym) __MAKE_SET(set, sym) #define SET_ENTRY(set, sym) __MAKE_SET(set, sym) PCI_EMUL_SET(pci_xxx); The above code defines name and callbacks of each PCI devices.","title":"Some data structs"},{"location":"posts/2021-10-27-introduction-to-bhyve/#virtual-devices-dummy-means-very-low-fidelity-old-bhyve","text":"peripheral file description atpic usr.sbin/bhyve/atpic.c dummy console usr.sbin/bhyve/consport.c ttyread|ttywrite gdbport usr.sbin/bhyve/dbgport.c bind, listen, accept, read|write elcr usr.sbin/bhyve/dbgport.c dummy pit 8254 usr.sbin/bhyve/pit_8254.c pit_8254_handler post usr.sbin/bhyve/post.c dummy rtc usr.sbin/bhyve/rtc.c rtc_addr_handler|rtc_data_handler uart usr.sbin/bhyve/uart.c dummy pci-dummy usr.sbin/bhyve/pci_emul.c pci_emul_dinit|pci_emul_diow|pci_emul_dior pci-hostbridge usr.sbin/bhyve/pci_hostbridge.c pci_hostbridge_init pci-passthru usr.sbin/bhyve/pci_passthru.c /dev/pci, /dev/io pci-uart usr.sbin/bhyve/pci_uart.c pci_uart_init|pci_uart_write|pci_uart_read pci-virtio-blk usr.sbin/bhyve/pci_virtio_block.c pci_vtblk_init|pci_vtblk_write|pci_vtblk_read pci-virtio-net usr.sbin/bhyve/pci_virtio_net.c pci_vtnet_init|pci_vtnet_write|pci_vtnet_read","title":"Virtual devices (dummy means very low fidelity) (Old BHyve)"},{"location":"posts/2021-10-27-introduction-to-bhyve/#virtual-device-initialization","text":"while (c = getopt()) switch (c) case 's': pci_parse_slot(optarg, 0); // not legacy break; case 'S': pci_parse_slot(optarg, 1); // legacy break; // ------------------------------ // pci_parse_slot // ------------------------------ // snum is from 0 to 31 // 0,hostbridge // 1,virtio-net,tap0 // pci_slotinfo[snum].si_name = emul; // hostbridge, virtio-net // pci_slotinfo[snum].si_param = config; // null, tap0 // pci_slotinfo[snum].si_legacy = legacy; // 0, 1 init_inout install handler for each port: atpic, console, gdbport, elcr, pci_emu, pit 8254, post, rtc, and uart. init_pci // it depends on opts pde = pci_emul_finddev(si->si_name); if (pde != NULL) { pci_emul_init(ctx, pde, i, si->si_param); // invoke ->init","title":"Virtual device initialization"},{"location":"posts/2021-10-27-introduction-to-bhyve/#extend-btest-like-qtest-to-bhyve","text":"The idea of BTest is to implement the same primitives as QTest. We can leverage the PCI interfaces because we are doing in-memory fuzzing rather than doing traps. Homepage of Bhyve \u21a9 Wikipedia of Bhyve \u21a9 Q&A of Byyve \u21a9 xhyve \u21a9 Extending bhyve beyond FreeBD guests \u21a9","title":"Extend BTest (like QTest) to BHyve"},{"location":"posts/2021-11-02-libFuzzer-cov-control/","text":"Coverage Control in libFuzzer # This article reveals how to control the coverage collection in libFuzzer. How to use libFuzzer? # To use libFuzzer, it is necessary to develop a fuzz target. Please refer to this and this to check how to develop a fuzz target and how to compile it with Clang. How to compiler LLVM project? # Download llvm-project and compile like below. Please also refer to this and this . git clone https://github.com/llvm/llvm-project.git --depth=1 mkdir build; cd build cmake -G Ninja -DLLVM_USE_LINKER=gold -DLLVM_ENABLE_PROJECTS=\"clang;compiler-rt\" -DLLVM_TARGETS_TO_BUILD=X86 -DLLVM_OPTIMIZED_TABLEGEN=ON ../llvm/ ninja clang compiler-rt export PATH=$PWD/bin:$PATH Details beneath -fsanitize=fuzzer # As we all know, when compiling a program, a compiler will automatically expand its compiler flags. If -v is enable, the compiler will show all flags. Considering a very simple example: clang -o foo -fsanitize=fuzzer foo.c , the full flags related to -fsanitize are in the following. # SIMPLIFIED \"$LLVM/bin/clang-13\" -cc1 \\ -triple x86_64-unknown-linux-gnu \\ -emit-obj \\ -target-cpu x86-64 -v \\ -fsanitize-coverage-type=1 -fsanitize-coverage-type=3 \\ -fsanitize-coverage-indirect-calls \\ -fsanitize-coverage-trace-cmp \\ -fsanitize-coverage-inline-8bit-counters \\ -fsanitize-coverage-pc-table \\ -fsanitize-coverage-stack-depth \\ -fsanitize-coverage-trace-state \\ -fsanitize=fuzzer,fuzzer-no-link \\ -o /tmp/main-d501e8.o -x c main.c # SIMPLIFIED \"/usr/local/bin/ld\" -z relro \\ --hash-style=gnu --eh-frame-hdr \\ -m elf_x86_64 \\ -dynamic-linker /lib64/ld-linux-x86-64.so.2 \\ -o main \\ $LLVM/lib/clang/13.0.0/lib/linux/libclang_rt.fuzzer-x86_64.a \\ $LLVM/lib/clang/13.0.0/lib/linux/libclang_rt.fuzzer_interceptors-x86_64.a \\ $LLVM/lib/clang/13.0.0/lib/linux/libclang_rt.ubsan_standalone-x86_64.a \\ --dynamic-list=$LLVM/lib/clang/13.0.0/lib/linux/libclang_rt.ubsan_standalone-x86_64.a.syms \\ /tmp/main-d501e8.o It's SanitizerArgs() that parses SanCov and sanitizers flags. The path to it is in the following. [#0] clang::driver::SanitizerArgs::SanitizerArgs() [#1] clang::driver::ToolChain::getSanitizerArgs() const() [#2] clang::driver::toolchains::Linux::isPIEDefault() const() [#3] clang::driver::tools::ParsePICArgs() [#4] clang::driver::tools::Clang::ConstructJob() [#5] clang::driver::Driver::BuildJobsForActionNoCache() [#6] clang::driver::Driver::BuildJobsForAction() [#7] clang::driver::Driver::BuildJobsForActionNoCache() [#8] clang::driver::Driver::BuildJobsForAction() [#9] clang::driver::Driver::BuildJobs() [#10] clang::driver::Driver::BuildCompilation() [#11] main() In SanitizerArgs() , parseArgValues will parse six sanitizer related flags. parseArgValues will invoke parseSanitizerValue defined in clang/lib/Basic/Sanitizers.cpp to parse sanitizers defined clang/include/clang/Basic/Sanitizers.def . // clang/include/clang/Basic/Sanitizers.def // libFuzzer SANITIZER(\"fuzzer\", Fuzzer) // libFuzzer-required instrumentation, no linking. SANITIZER(\"fuzzer-no-link\", FuzzerNoLink) In SanitizerArgs() , parseCoverageFeatures will parse two flags: -fsanitize-coverage=<value> and -fno-sanitize-coverage=<value> to control what kind of coverage information for sanitizers. Try clang --help | grep coverage to see more related flags. int parseCoverageFeatures(const Driver &D, const llvm::opt::Arg *A) { assert(A->getOption().matches(options::OPT_fsanitize_coverage) || A->getOption().matches(options::OPT_fno_sanitize_coverage)); int Features = 0; for (int i = 0, n = A->getNumValues(); i != n; ++i) { const char *Value = A->getValue(i); int F = llvm::StringSwitch<int>(Value) .Case(\"func\", CoverageFunc) .Case(\"bb\", CoverageBB) .Case(\"edge\", CoverageEdge) .Case(\"indirect-calls\", CoverageIndirCall) .Case(\"trace-bb\", CoverageTraceBB) .Case(\"trace-cmp\", CoverageTraceCmp) .Case(\"trace-div\", CoverageTraceDiv) .Case(\"trace-gep\", CoverageTraceGep) .Case(\"8bit-counters\", Coverage8bitCounters) .Case(\"trace-pc\", CoverageTracePC) .Case(\"trace-pc-guard\", CoverageTracePCGuard) .Case(\"no-prune\", CoverageNoPrune) .Case(\"inline-8bit-counters\", CoverageInline8bitCounters) .Case(\"inline-bool-flag\", CoverageInlineBoolFlag) .Case(\"pc-table\", CoveragePCTable) .Case(\"stack-depth\", CoverageStackDepth) .Default(0); if (F == 0) D.Diag(clang::diag::err_drv_unsupported_option_argument) << A->getOption().getName() << Value; Features |= F; } return Features; } parseCoverageFeatures clearly show what kind of coverage we can control. In the following are several tips to enable and disable these coverage flags. + func , bb , and edge are mutually exclusive + trace-bb is deprecated, use trace-pc-guard instead + 8bit-counter is deprecated, use trace-pc-guard instead + if use one of func , bb , and edge , trace-pc-guard or trace-pc must be enabled + if one of trace-pc , trace-pc-guard , inline-8bit-counter , and inline-bool-flag is enabled without any func , bb , or edge , then edge is added by default + stack-depth needs func Returning from SanitizerArgs() , ConstructJob will invoke addArgs to append flags to the command line clang -o foo -fsanitize=fuzzer foo.c . [#0] 0x55555a470fa2 \u2192 clang::driver::SanitizerArgs::addArgs() [#1] 0x55555a3c6572 \u2192 clang::driver::tools::Clang::ConstructJob() [#2] 0x55555a345a9a \u2192 clang::driver::Driver::BuildJobsForActionNoCache() [#3] 0x55555a343f99 \u2192 clang::driver::Driver::BuildJobsForAction() [#4] 0x55555a344bad \u2192 clang::driver::Driver::BuildJobsForActionNoCache() [#5] 0x55555a343f99 \u2192 clang::driver::Driver::BuildJobsForAction() [#6] 0x55555a34280e \u2192 clang::driver::Driver::BuildJobs() [#7] 0x55555a3345c4 \u2192 clang::driver::Driver::BuildCompilation() addArgs will add corresponding flags according to the table below. std::pair<int, const char *> CoverageFlags[] = { std::make_pair(CoverageFunc, \"-fsanitize-coverage-type=1\"), std::make_pair(CoverageBB, \"-fsanitize-coverage-type=2\"), std::make_pair(CoverageEdge, \"-fsanitize-coverage-type=3\"), std::make_pair(CoverageIndirCall, \"-fsanitize-coverage-indirect-calls\"), std::make_pair(CoverageTraceBB, \"-fsanitize-coverage-trace-bb\"), std::make_pair(CoverageTraceCmp, \"-fsanitize-coverage-trace-cmp\"), std::make_pair(CoverageTraceDiv, \"-fsanitize-coverage-trace-div\"), std::make_pair(CoverageTraceGep, \"-fsanitize-coverage-trace-gep\"), std::make_pair(Coverage8bitCounters, \"-fsanitize-coverage-8bit-counters\"), std::make_pair(CoverageTracePC, \"-fsanitize-coverage-trace-pc\"), std::make_pair(CoverageTracePCGuard, \"-fsanitize-coverage-trace-pc-guard\"), std::make_pair(CoverageInline8bitCounters, \"-fsanitize-coverage-inline-8bit-counters\"), std::make_pair(CoverageInlineBoolFlag, \"-fsanitize-coverage-inline-bool-flag\"), std::make_pair(CoveragePCTable, \"-fsanitize-coverage-pc-table\"), std::make_pair(CoverageNoPrune, \"-fsanitize-coverage-no-prune\"), std::make_pair(CoverageStackDepth, \"-fsanitize-coverage-stack-depth\"), std::make_pair(CoverageTraceState, \"-fsanitize-coverage-trace-state\")}; Returning from Clang::contructJob , addSanitizerRuntimes will expand linker flags. [#0] 0x55555a3dcbe2 \u2192 clang::driver::tools::addSanitizerRuntimes() [#1] 0x55555a40cac0 \u2192 clang::driver::tools::gnutools::Linker::ConstructJob() [#2] 0x55555a345a9a \u2192 clang::driver::Driver::BuildJobsForActionNoCache() [#3] 0x55555a343f99 \u2192 clang::driver::Driver::BuildJobsForAction() [#4] 0x55555a34280e \u2192 clang::driver::Driver::BuildJobs() [#5] 0x55555a3345c4 \u2192 clang::driver::Driver::BuildCompilation() [#6] 0x555557ddf8f7 \u2192 main() In addSanitizerRuntimes , collectSanitizerRuntimes will collect libraries for sanitizers. + Use -shared-libsan (by default) or -static-libsan to collect dynamic or static libraries + use -fsanitize-link-runtime\" (by default) or -fno-sanitize-link-runtime to switch on or off linking To use ASAN, assign -fsanitize=address . If only -fsanitize=fuzzer , then UBSAN will be enabled. bool SanitizerArgs::needsUbsanRt() const { // All of these include ubsan. if (needsAsanRt() || needsMsanRt() || needsHwasanRt() || needsTsanRt() || needsDfsanRt() || needsLsanRt() || needsCfiDiagRt() || (needsScudoRt() && !requiresMinimalRuntime())) return false; return (Sanitizers.Mask & NeedsUbsanRt & ~TrapSanitizers.Mask) || CoverageFeatures; } Shortly, if no other sanitizers is enabled, and if any coverage is enabled, UBSAN will be enabled. After collectSanitizerRuntimes , addSanitizerRuntimes will update runtimes regarding to -fsanitizer=fuzzer . bool SanitizerArgs::needsFuzzerInterceptors() const { return needsFuzzer() && !needsAsanRt() && !needsTsanRt() && !needsMsanRt(); } bool tools::addSanitizerRuntimes(...) { ... addSanitizerRuntime(TC, Args, CmdArgs, \"fuzzer\", false, true); if (SanArgs.needsFuzzerInterceptors()) addSanitizerRuntime(TC, Args, CmdArgs, \"fuzzer_interceptors\", false, true); } BTW, fuzz_interceptors will be appended if no ASAN, TSAN, MSAN runtime is enabled. Finally, to narrow down the coverage collection, we can construct a command in the following. clang -o foo -fsanitize=fuzzer \\ -fno-sanitize-coverage=indirect-calls,trace-cmp,stack-depth,pc-table \\ foo.c In this way, only edge and inline-8bit-counters are enabled. Flow of instrumentations # The module pass SanitizerCoverage (llvm/lib/Transforms/Instrumentation/SanitizerCoverage.cpp) will instrument coverage flag to each module. In the first state, SanitizerCoverage will construct the IR of stubs to be instrumented. A classic pattern is in the following. const char SanCovTracePCIndirName[] = \"__sanitizer_cov_trace_pc_indir\"; SanCovTracePCIndir = M.getOrInsertFunction(SanCovTracePCIndirName, VoidTy, IntptrTy); In the second state, SanitizerCoverage will traverse all IR code and do instrumentation at the proper position. IRB.CreateCall(SanCovTracePCIndir, IRB.CreatePointerCast(Callee, IntptrTy)); The overall flow of SanitizerCoverage is in the following. instrumentModule - stage 1 - for (auto &F : M) { instrumentFunction(F); } instrumentFunction - split edges if edge coverage[^1] - for (auto &BB : F) { BlocksToInstrument.push_back(&BB); for (auto &Inst: BB) { /* simplified */ if (IndirectCalls && xxx) IndirCalls.push_back(&Inst) if (TraceCmp && xxx) CmpTraceTargets.push_back(&Inst) if (TraceCmp && xxx) SwitchTraceTargets.push_back(&Inst) if (TraceDiv && xxx) DivTraceTargets.push_back(BO) if (TraceGep && xxx) GepTraceTargets.push_back(BO) if (TraceStackDepth && xxx) IsLeafFunc = false; } } - stage 2 InjectCoverage(F, BlocksToInstrument, IsLeafFunc); InjectCoverageForIndirectCalls(F, IndirCalls); InjectTraceForCmp(F, CmpTraceTargets); InjectTraceForSwitch(F, SwitchTraceTargets); InjectTraceForDiv(F, DivTraceTargets); InjectTraceForGep(F, GepTraceTargets); The key function in stage 2 is InjectCoverage . InjectCoverage first create FunctionGuardArray, Function8bitCounterArray, FunctionBoolArray, or FunctionPCsArray in CreateFunctionLocalArrays , then invoke InjectCoverageAtBlock to handle each basic blocks. InjectCoverageAtBlock will instrument SanCovTracePC , SanCovTracePCGuard , Inline8BitCounters , or InlineBoolFlag , or update the lowest stack frame, for each basic block. Details of stubs # Please also refer to this . __sanitizer_cov_indir_call # This will be in front of an indirect call. It requires at least one of trace-pc , trace-pc-guard , inline-8bit-counters , and inline-bool-flag . It accepts one parameter, the callee address. The address of the caller is passed implicitly via caller PC. Importantly, if the callee is inline assembly, the indirect call will not be instrumented. Its implementation in libFuzzer is in the following. In the end, new information will be updated into the value profile. #define GET_CALLER_PC() __builtin_return_address(0) void TracePC::HandleCallerCallee(uintptr_t Caller, uintptr_t Callee) { const uintptr_t kBits = 12; const uintptr_t kMask = (1 << kBits) - 1; uintptr_t Idx = (Caller & kMask) | ((Callee & kMask) << kBits); ValueProfileMap.AddValueModPrime(Idx); } void __sanitizer_cov_trace_pc_indir(uintptr_t Callee) { uintptr_t PC = reinterpret_cast<uintptr_t>(GET_CALLER_PC()); fuzzer::TPC.HandleCallerCallee(PC, Callee); } __sanitizer_cov_trace_[const_]cmp[1|2|4|8] # These will be in front of a cmp instruction with const operand or not. They accept both operands to be compared. The address of the caller is passed implicitly via caller PC. One of its implementation in libFuzzer is in the following. In the end, new information will be updated into the value profile. #define GET_CALLER_PC() __builtin_return_address(0) template <class T> void TracePC::HandleCmp(uintptr_t PC, T Arg1, T Arg2) { uint64_t ArgXor = Arg1 ^ Arg2; if (sizeof(T) == 4) TORC4.Insert(ArgXor, Arg1, Arg2); else if (sizeof(T) == 8) TORC8.Insert(ArgXor, Arg1, Arg2); uint64_t HammingDistance = Popcountll(ArgXor); // [0,64] uint64_t AbsoluteDistance = (Arg1 == Arg2 ? 0 : Clzll(Arg1 - Arg2) + 1); ValueProfileMap.AddValue(PC * 128 + HammingDistance); ValueProfileMap.AddValue(PC * 128 + 64 + AbsoluteDistance); } void __sanitizer_cov_trace_cmp1(uint8_t Arg1, uint8_t Arg2) { uintptr_t PC = reinterpret_cast<uintptr_t>(GET_CALLER_PC()); fuzzer::TPC.HandleCmp(PC, Arg1, Arg2); } Similarly stubs are __sanitizer_cov_trace_switch , __sanitizer_cov_trace_div[4|8] , and __sanitizer_cov_trace_gep . They all invoke HandleCmp at the end to update new information into the value profile. __sanitizer_cov_trace_pc # This will be at the entry of each basic block. The address of the caller is passed implicitly via caller PC. This is deprecated. __sanitizer_cov_trace_pc_guard[_init] # __sanitizer_cov_trace_pc_guard will be at the entry of each basic block after __sanitier_cov_trace_pc . The address of the caller is passed implicitly via caller PC. They are deprecated. Each function would have a function guard array int32_t FunctionGuardArray[] whose size is the number of the basic blocks. This array is associated with sancov_guards section. __sanitizer_cov_trace_pc_guard accepts FunctionGuardArray[IdxofBB] as the guard. If any function guard array, SanCov will create a section named sancov.module_ctor_trace_pc_guard to invoke __sanitizer_cov_trace_pc_guard_init to initialize sancov_guards for each module. [NOT SURE] In the end, after linking, there will be one sancov_guards and one sancov.module_ctor_trace_pc_guard . __sanitizer_cov_8biPCTableEntryIdxpc_guard`. # Each function would have a function 8bit counter array int8_t Function8BitArray[] whose size is the number of the basic blocks. This array is associated with sancov_cntrs section. If a basic block is visited, then the corresponding byte in the array will be increased by 1. If any function 8bit array, SanCov will create a section named sancov.module_ctor_8bit_counters to invoke __sanitizer_cov_8bit_counters_init to initialize sancov_cntrs for each module. [NOT SURE] In the end, after linking, there will be one sancov_cntrs and one sancov.module_ctor_8bit_counters . __sanitizer_cov_8bit_counters_init is defined in the following. It shows the counter information flows to Modules in the libFuzzer. In short, Modules records the start and the stop address of the sancov_cntrs divided by page ( Region ). void TracePC::HandleInline8bitCountersInit(uint8_t *Start, uint8_t *Stop) { if (Start == Stop) return; if (NumModules && Modules[NumModules - 1].Start() == Start) return; assert(NumModules < sizeof(Modules) / sizeof(Modules[0])); auto &M = Modules[NumModules++]; uint8_t *AlignedStart = RoundUpByPage(Start); uint8_t *AlignedStop = RoundDownByPage(Stop); size_t NumFullPages = AlignedStop > AlignedStart ? (AlignedStop - AlignedStart) / PageSize() : 0; bool NeedFirst = Start < AlignedStart || !NumFullPages; bool NeedLast = Stop > AlignedStop && AlignedStop >= AlignedStart; M.NumRegions = NumFullPages + NeedFirst + NeedLast;; assert(M.NumRegions > 0); M.Regions = new Module::Region[M.NumRegions]; assert(M.Regions); size_t R = 0; if (NeedFirst) M.Regions[R++] = {Start, std::min(Stop, AlignedStart), true, false}; for (uint8_t *P = AlignedStart; P < AlignedStop; P += PageSize()) M.Regions[R++] = {P, P + PageSize(), true, true}; if (NeedLast) M.Regions[R++] = {AlignedStop, Stop, true, false}; assert(R == M.NumRegions); assert(M.Size() == (size_t)(Stop - Start)); assert(M.Stop() == Stop); assert(M.Start() == Start); NumInline8bitCounters += M.Size(); } void __sanitizer_cov_8bit_counters_init(uint8_t *Start, uint8_t *Stop) { fuzzer::TPC.HandleInline8bitCountersInit(Start, Stop); } __sanitizer_cov_bool_flag_init # The inline bool flag will be at the entry of each basic block after the inline 8bit counters. Each function would have a function 1 bit array int1_t FunctionBoolArray[] whose size is the number of the basic blocks. This array is associated with sancov_bools section. If a basic block is visited, then the corresponding bit in the array will be true. If any function bool array, SanCov will create a section named sancov.module_ctor_bool_flag to invoke __sanitizer_cov_bool_flag_init to initilize sancov_bools for each module. [NOT SURE] In the end, after linking, there will be one sancov_bools and one sancov.module_ctor_bool_flag . __sanitizer_cov_bool_flag_init is not defined in the libFuzzer. __sanitizer_cov_pcs_init # For each function, SanCov creates a PC array associated with sancov_pcs to store {PC, PCFlags} pairs. PC is the address of the corresponding basic block, and a PCFlags describes the basic block is the function entry block (1) or not (0). If one of the trace-pc-guard , inline-8bit-counters , and inline-bool-flag , and any function PC array, SanCov will invoke __sanitizer_cov_pcs_init to initilize sancov_pcs for each module in one of the section: sancov.xxx . [NOT SURE] In the end, after linking, there will be one sancov_pcs . __sanitizer_cov_pcs_init is defined in the following. In short, the information flows to ModulePCTable in libFuzzer. void TracePC::HandlePCsInit(const uintptr_t *Start, const uintptr_t *Stop) { const PCTableEntry *B = reinterpret_cast<const PCTableEntry *>(Start); const PCTableEntry *E = reinterpret_cast<const PCTableEntry *>(Stop); if (NumPCTables && ModulePCTable[NumPCTables - 1].Start == B) return; assert(NumPCTables < sizeof(ModulePCTable) / sizeof(ModulePCTable[0])); ModulePCTable[NumPCTables++] = {B, E}; NumPCsInPCTables += E - B; } void __sanitizer_cov_pcs_init(const uintptr_t *pcs_beg, const uintptr_t *pcs_end) { fuzzer::TPC.HandlePCsInit(pcs_beg, pcs_end); } A brief list of (flag, stubs, and information sink in libFuzzer) # Flag Stubs Information Sink trace-pc,indirect-calls __sanitizer_cov_trace_pc_indirect ValueProfileMap trace-pc-guard,indirect-calls __sanitizer_cov_trace_pc_indirect ValueProfileMap inline-8bit-counters,indirect-calls __sanitizer_cov_trace_pc_indirect ValueProfileMap inline-bool-flag,indirect-calls __sanitizer_cov_trace_pc_indirect ValueProfileMap trace-cmp __sanitizer_cov_trace_[const_]cmp[1|2|4|8] ValuleProfileMap trace-switch __sanitizer_cov_trace_switch ValuleProfileMap trace-div __sanitizer_cov_trace_div[4|8] ValuleProfileMap trace-gep __sanitizer_cov_trace_gep ValuleProfileMap trace-pc __sanitizer_cov_trace_pc deprecated trace-pc-guard __sanitizer_cov_trace_pc_guard[_init] deprecated inline-8bit-counters __sanitizer_cov_8bit_counters_init Modules inline-bool-flag __sanitizer_cov_bool_flag_init not supported trace-pc-guard,pc-table __sanitizer_cov_pcs_init ModulePCTable inline-8bit-guard,pc-table __sanitizer_cov_pcs_init ModulePCTable inline-bool-flag,pc-table __sanitizer_cov_pcs_init ModulePCTable Details of coverage collection algorithm and implementation # Recalling that several stubs are instrumented to the target program. The implementation of these stubs are implemented in libFuzzer by default or can be replaced by developers. Most of them are defined in compiler-rt/lib/fuzzer/FuzzerTracePC.cpp. After testing an input, these stubs will update corresponding information. LibFuzzer will then calculate the coverage with the information. A detailed flow is in the following. ExecuteCallback - TPC.ResetMaps(); - CB(DataCopy, Size); TPC.CollectFeatures(); if (NumNewFeatures || ForceAddToCorpus) { TPC.UpdateObservedPCs(); } ResetMaps # template <class Callback> void IterateCounterRegions(Callback CB) { for (size_t m = 0; m < NumModules; m++) for (size_t r = 0; r < Modules[m].NumRegions; r++) CB(Modules[m].Regions[r]); } void TracePC::ClearInlineCounters() { IterateCounterRegions([](const Module::Region &R){ if (R.Enabled) memset(R.Start, 0, R.Stop - R.Start); }); } void ResetMaps() { ValueProfileMap.Reset(); ClearExtraCounters(); ClearInlineCounters(); } TPC.ResetMaps reset 1) ValueProfileMap, a bit map for data flow value, 2) ExtraCounters, 3) InlineCouters, the area for inline-8bit-counters . CollectFeatures # size_t NumUpdatesBefore = Corpus.NumFeatureUpdates(); TPC.CollectFeatures([&](size_t Feature) { if (Corpus.AddFeature(Feature, Size, Options.Shrink)) // * }); TPC.CollectFeatures accepts a HandleFeature function pointer. In the HandleFeature, it accepts a Feature that is calculated from all the coverage information (Information Sink), and then adds the feature to the corpus. AddFeature is part of the HandleFeature function to log features. libFuzzer will map a feature to the size of the corresponding input. If the size is zero, the feature is not visited. bool AddFeature(size_t Idx, uint32_t NewSize, bool Shrink) { Idx = Idx % kFeatureSetSize; uint32_t OldSize = GetFeature(Idx); if (OldSize == 0 || (Shrink && OldSize > NewSize)) { if (OldSize > 0) { // ... } else { NumAddedFeatures++; // ... } NumUpdatedFeatures++; InputSizesPerFeature[Idx] = NewSize; return true; } return false; } In TPC.CollectFeatures , it maps the information sinks to features like below. // Modules (Inlint8BitCounters) FirstFeature=0 feature 0 8 w/o counters w/ counters +----+ BB00 +d'02+ +0 +(0*8 + log(2)) +----+ BB01 +d'80+ +1 +(1*8 + log(80)) +----+ FirstFeature += NumOfBits(Modules) // ExtracCounters 0 8 w/o counters w/ counters +----+ CNT0 +d'02+ +0 +(0*8 + log(2)) +----+ CNT1 +d'80+ +1 +(1*8 + log(80)) +----+ FirstFeature += NumOfBits(ExtraCounters) // ValueProfileMap 0 8 +----+ VPM0 +d'02+ +6 (b'00000010) +----+ VPM8 +d'82+ +8/+14 (b'10000010) +----+ FirstFeature += NumOfBits(ValueProfileMap) // StackDepth + StackDepthStepFunction(MaxStackOffset / 8) In general, we map coverage information to a linear feature from zero. For the Modules , libFuzzer checks each byte that records how many times a basic block is visited. If without counters, the feature is the start feature plus the index of the bytes. For BB01, if the index is 1, then the feature is 1. If with counter, it will take d'80 into consideration. The feature is 0 plus log(80). The logarithmic function guarantees the feature will not overflow 8 bits. In the end, the start of the new features will be updated by adding the bit number of modules. ExtraCounters works similarly. For the ValueProfileMap, each non-zero bit is a new feature. For the stack depth, it leverages a hash function StackDepthStepFunction. UpdateObservedPCs # If any new features, libFuzzer will update observed PCs. for (size_t i = 0; i < NumModules; i++) { auto &M = Modules[i]; for (size_t r = 0; r < M.NumRegions; r++) { auto &R = M.Regions[r]; if (!R.Enabled) continue; for (uint8_t *P = R.Start; P < R.Stop; P++) if (*P) // if this basic block is visited // then get the PC of the visited the basic block // then invoke Observe Observe(&ModulePCTable[i].Start[M.Idx(P)]); } } First, if a basic block is visited, libFuzzer will get the PC of the visited the basic in the PCTable, and invoke Observe . Vector<uintptr_t> CoveredFuncs; auto ObservePC = [&](const PCTableEntry *TE) { if (ObservedPCs.insert(TE).second && DoPrintNewPCs) { PrintPC(\"\\tNEW_PC: %p %F %L\", \"\\tNEW_PC: %p\", GetNextInstructionPc(TE->PC)); Printf(\"\\n\"); } }; auto Observe = [&](const PCTableEntry *TE) { if (PcIsFuncEntry(TE)) if (++ObservedFuncs[TE->PC] == 1 && NumPrintNewFuncs) CoveredFuncs.push_back(TE->PC); ObservePC(TE); }; If the basic block is the entry, then update ObservedFunc . Otherwise, invoke ObservePC to update ObservedPCs . libFuzzer intercepts # LibFuzzer will intercepts memcmp , strncmp , strcmp , strncasecmp , strcasecmp , strstr , strcasestr , and memmem functions if no ASAN, TSAN, MSAN runtime is enabled. It is not easy to disable this behavior. A typical flow for each above function is in the following. RunningUserCallback = true; int Res = CB(DataCopy, Size); RunningUserCallback = false; int memcmp(const void *s1, const void *s2, size_t n) { if (!FuzzerInited) return internal_memcmp(s1, s2, n); int result = REAL(memcmp)(s1, s2, n); __sanitizer_weak_hook_memcmp(GET_CALLER_PC(), s1, s2, n, result); return result; } void __sanitizer_weak_hook_memcmp(void *caller_pc, const void *s1, const void *s2, size_t n, int result) { if (!fuzzer::RunningUserCallback) return; if (result == 0) return; // No reason to mutate. if (n <= 1) return; // Not interesting. fuzzer::TPC.AddValueForMemcmp(caller_pc, s1, s2, n, /*StopAtZero*/false); } Here is a summary of where the collected information will flow. Function Information Sink memcmp AddValueForMemcmp ValueProfileMap strnmp AddValueForMemcmp ValueProfileMap strcmp AddValueForMemcmp ValueProfileMap strncasecmp AddValueForMemcmp ValueProfileMap strcasecmp AddValueForMemcmp strstr MMT(Mutation Only) strcasestr MMT(Mutation Only) memmem MMT(Mutation Only) To disable them, we could 1) use -use_value_profile=0 when fuzzing to avoid update coverage information from ValueProfileMap, 2) comment these __sanitizer_weak_hook_xxx to reduce the overhead. Luckily, -use_value_profile=0 is the default option of libFuzzer. Conclusion # For the basic block coverage, SanCov maintains an array that records how many times a basic block is visited, and the libFuzzer will collect that information and calculate features. To disable fancy features, just do as below. clang -o foo -fsanitize=fuzzer \\ -fsanitize-coverage=bb \\ -fno-sanitize-coverage=indirect-calls,trace-cmp,stack-depth,pc-table \\ foo.c Clangedge-coverage \u21a9","title":"Coverage Control in libFuzzer"},{"location":"posts/2021-11-02-libFuzzer-cov-control/#coverage-control-in-libfuzzer","text":"This article reveals how to control the coverage collection in libFuzzer.","title":"Coverage Control in libFuzzer"},{"location":"posts/2021-11-02-libFuzzer-cov-control/#how-to-use-libfuzzer","text":"To use libFuzzer, it is necessary to develop a fuzz target. Please refer to this and this to check how to develop a fuzz target and how to compile it with Clang.","title":"How to use libFuzzer?"},{"location":"posts/2021-11-02-libFuzzer-cov-control/#how-to-compiler-llvm-project","text":"Download llvm-project and compile like below. Please also refer to this and this . git clone https://github.com/llvm/llvm-project.git --depth=1 mkdir build; cd build cmake -G Ninja -DLLVM_USE_LINKER=gold -DLLVM_ENABLE_PROJECTS=\"clang;compiler-rt\" -DLLVM_TARGETS_TO_BUILD=X86 -DLLVM_OPTIMIZED_TABLEGEN=ON ../llvm/ ninja clang compiler-rt export PATH=$PWD/bin:$PATH","title":"How to compiler LLVM project?"},{"location":"posts/2021-11-02-libFuzzer-cov-control/#details-beneath-fsanitizefuzzer","text":"As we all know, when compiling a program, a compiler will automatically expand its compiler flags. If -v is enable, the compiler will show all flags. Considering a very simple example: clang -o foo -fsanitize=fuzzer foo.c , the full flags related to -fsanitize are in the following. # SIMPLIFIED \"$LLVM/bin/clang-13\" -cc1 \\ -triple x86_64-unknown-linux-gnu \\ -emit-obj \\ -target-cpu x86-64 -v \\ -fsanitize-coverage-type=1 -fsanitize-coverage-type=3 \\ -fsanitize-coverage-indirect-calls \\ -fsanitize-coverage-trace-cmp \\ -fsanitize-coverage-inline-8bit-counters \\ -fsanitize-coverage-pc-table \\ -fsanitize-coverage-stack-depth \\ -fsanitize-coverage-trace-state \\ -fsanitize=fuzzer,fuzzer-no-link \\ -o /tmp/main-d501e8.o -x c main.c # SIMPLIFIED \"/usr/local/bin/ld\" -z relro \\ --hash-style=gnu --eh-frame-hdr \\ -m elf_x86_64 \\ -dynamic-linker /lib64/ld-linux-x86-64.so.2 \\ -o main \\ $LLVM/lib/clang/13.0.0/lib/linux/libclang_rt.fuzzer-x86_64.a \\ $LLVM/lib/clang/13.0.0/lib/linux/libclang_rt.fuzzer_interceptors-x86_64.a \\ $LLVM/lib/clang/13.0.0/lib/linux/libclang_rt.ubsan_standalone-x86_64.a \\ --dynamic-list=$LLVM/lib/clang/13.0.0/lib/linux/libclang_rt.ubsan_standalone-x86_64.a.syms \\ /tmp/main-d501e8.o It's SanitizerArgs() that parses SanCov and sanitizers flags. The path to it is in the following. [#0] clang::driver::SanitizerArgs::SanitizerArgs() [#1] clang::driver::ToolChain::getSanitizerArgs() const() [#2] clang::driver::toolchains::Linux::isPIEDefault() const() [#3] clang::driver::tools::ParsePICArgs() [#4] clang::driver::tools::Clang::ConstructJob() [#5] clang::driver::Driver::BuildJobsForActionNoCache() [#6] clang::driver::Driver::BuildJobsForAction() [#7] clang::driver::Driver::BuildJobsForActionNoCache() [#8] clang::driver::Driver::BuildJobsForAction() [#9] clang::driver::Driver::BuildJobs() [#10] clang::driver::Driver::BuildCompilation() [#11] main() In SanitizerArgs() , parseArgValues will parse six sanitizer related flags. parseArgValues will invoke parseSanitizerValue defined in clang/lib/Basic/Sanitizers.cpp to parse sanitizers defined clang/include/clang/Basic/Sanitizers.def . // clang/include/clang/Basic/Sanitizers.def // libFuzzer SANITIZER(\"fuzzer\", Fuzzer) // libFuzzer-required instrumentation, no linking. SANITIZER(\"fuzzer-no-link\", FuzzerNoLink) In SanitizerArgs() , parseCoverageFeatures will parse two flags: -fsanitize-coverage=<value> and -fno-sanitize-coverage=<value> to control what kind of coverage information for sanitizers. Try clang --help | grep coverage to see more related flags. int parseCoverageFeatures(const Driver &D, const llvm::opt::Arg *A) { assert(A->getOption().matches(options::OPT_fsanitize_coverage) || A->getOption().matches(options::OPT_fno_sanitize_coverage)); int Features = 0; for (int i = 0, n = A->getNumValues(); i != n; ++i) { const char *Value = A->getValue(i); int F = llvm::StringSwitch<int>(Value) .Case(\"func\", CoverageFunc) .Case(\"bb\", CoverageBB) .Case(\"edge\", CoverageEdge) .Case(\"indirect-calls\", CoverageIndirCall) .Case(\"trace-bb\", CoverageTraceBB) .Case(\"trace-cmp\", CoverageTraceCmp) .Case(\"trace-div\", CoverageTraceDiv) .Case(\"trace-gep\", CoverageTraceGep) .Case(\"8bit-counters\", Coverage8bitCounters) .Case(\"trace-pc\", CoverageTracePC) .Case(\"trace-pc-guard\", CoverageTracePCGuard) .Case(\"no-prune\", CoverageNoPrune) .Case(\"inline-8bit-counters\", CoverageInline8bitCounters) .Case(\"inline-bool-flag\", CoverageInlineBoolFlag) .Case(\"pc-table\", CoveragePCTable) .Case(\"stack-depth\", CoverageStackDepth) .Default(0); if (F == 0) D.Diag(clang::diag::err_drv_unsupported_option_argument) << A->getOption().getName() << Value; Features |= F; } return Features; } parseCoverageFeatures clearly show what kind of coverage we can control. In the following are several tips to enable and disable these coverage flags. + func , bb , and edge are mutually exclusive + trace-bb is deprecated, use trace-pc-guard instead + 8bit-counter is deprecated, use trace-pc-guard instead + if use one of func , bb , and edge , trace-pc-guard or trace-pc must be enabled + if one of trace-pc , trace-pc-guard , inline-8bit-counter , and inline-bool-flag is enabled without any func , bb , or edge , then edge is added by default + stack-depth needs func Returning from SanitizerArgs() , ConstructJob will invoke addArgs to append flags to the command line clang -o foo -fsanitize=fuzzer foo.c . [#0] 0x55555a470fa2 \u2192 clang::driver::SanitizerArgs::addArgs() [#1] 0x55555a3c6572 \u2192 clang::driver::tools::Clang::ConstructJob() [#2] 0x55555a345a9a \u2192 clang::driver::Driver::BuildJobsForActionNoCache() [#3] 0x55555a343f99 \u2192 clang::driver::Driver::BuildJobsForAction() [#4] 0x55555a344bad \u2192 clang::driver::Driver::BuildJobsForActionNoCache() [#5] 0x55555a343f99 \u2192 clang::driver::Driver::BuildJobsForAction() [#6] 0x55555a34280e \u2192 clang::driver::Driver::BuildJobs() [#7] 0x55555a3345c4 \u2192 clang::driver::Driver::BuildCompilation() addArgs will add corresponding flags according to the table below. std::pair<int, const char *> CoverageFlags[] = { std::make_pair(CoverageFunc, \"-fsanitize-coverage-type=1\"), std::make_pair(CoverageBB, \"-fsanitize-coverage-type=2\"), std::make_pair(CoverageEdge, \"-fsanitize-coverage-type=3\"), std::make_pair(CoverageIndirCall, \"-fsanitize-coverage-indirect-calls\"), std::make_pair(CoverageTraceBB, \"-fsanitize-coverage-trace-bb\"), std::make_pair(CoverageTraceCmp, \"-fsanitize-coverage-trace-cmp\"), std::make_pair(CoverageTraceDiv, \"-fsanitize-coverage-trace-div\"), std::make_pair(CoverageTraceGep, \"-fsanitize-coverage-trace-gep\"), std::make_pair(Coverage8bitCounters, \"-fsanitize-coverage-8bit-counters\"), std::make_pair(CoverageTracePC, \"-fsanitize-coverage-trace-pc\"), std::make_pair(CoverageTracePCGuard, \"-fsanitize-coverage-trace-pc-guard\"), std::make_pair(CoverageInline8bitCounters, \"-fsanitize-coverage-inline-8bit-counters\"), std::make_pair(CoverageInlineBoolFlag, \"-fsanitize-coverage-inline-bool-flag\"), std::make_pair(CoveragePCTable, \"-fsanitize-coverage-pc-table\"), std::make_pair(CoverageNoPrune, \"-fsanitize-coverage-no-prune\"), std::make_pair(CoverageStackDepth, \"-fsanitize-coverage-stack-depth\"), std::make_pair(CoverageTraceState, \"-fsanitize-coverage-trace-state\")}; Returning from Clang::contructJob , addSanitizerRuntimes will expand linker flags. [#0] 0x55555a3dcbe2 \u2192 clang::driver::tools::addSanitizerRuntimes() [#1] 0x55555a40cac0 \u2192 clang::driver::tools::gnutools::Linker::ConstructJob() [#2] 0x55555a345a9a \u2192 clang::driver::Driver::BuildJobsForActionNoCache() [#3] 0x55555a343f99 \u2192 clang::driver::Driver::BuildJobsForAction() [#4] 0x55555a34280e \u2192 clang::driver::Driver::BuildJobs() [#5] 0x55555a3345c4 \u2192 clang::driver::Driver::BuildCompilation() [#6] 0x555557ddf8f7 \u2192 main() In addSanitizerRuntimes , collectSanitizerRuntimes will collect libraries for sanitizers. + Use -shared-libsan (by default) or -static-libsan to collect dynamic or static libraries + use -fsanitize-link-runtime\" (by default) or -fno-sanitize-link-runtime to switch on or off linking To use ASAN, assign -fsanitize=address . If only -fsanitize=fuzzer , then UBSAN will be enabled. bool SanitizerArgs::needsUbsanRt() const { // All of these include ubsan. if (needsAsanRt() || needsMsanRt() || needsHwasanRt() || needsTsanRt() || needsDfsanRt() || needsLsanRt() || needsCfiDiagRt() || (needsScudoRt() && !requiresMinimalRuntime())) return false; return (Sanitizers.Mask & NeedsUbsanRt & ~TrapSanitizers.Mask) || CoverageFeatures; } Shortly, if no other sanitizers is enabled, and if any coverage is enabled, UBSAN will be enabled. After collectSanitizerRuntimes , addSanitizerRuntimes will update runtimes regarding to -fsanitizer=fuzzer . bool SanitizerArgs::needsFuzzerInterceptors() const { return needsFuzzer() && !needsAsanRt() && !needsTsanRt() && !needsMsanRt(); } bool tools::addSanitizerRuntimes(...) { ... addSanitizerRuntime(TC, Args, CmdArgs, \"fuzzer\", false, true); if (SanArgs.needsFuzzerInterceptors()) addSanitizerRuntime(TC, Args, CmdArgs, \"fuzzer_interceptors\", false, true); } BTW, fuzz_interceptors will be appended if no ASAN, TSAN, MSAN runtime is enabled. Finally, to narrow down the coverage collection, we can construct a command in the following. clang -o foo -fsanitize=fuzzer \\ -fno-sanitize-coverage=indirect-calls,trace-cmp,stack-depth,pc-table \\ foo.c In this way, only edge and inline-8bit-counters are enabled.","title":"Details beneath -fsanitize=fuzzer"},{"location":"posts/2021-11-02-libFuzzer-cov-control/#flow-of-instrumentations","text":"The module pass SanitizerCoverage (llvm/lib/Transforms/Instrumentation/SanitizerCoverage.cpp) will instrument coverage flag to each module. In the first state, SanitizerCoverage will construct the IR of stubs to be instrumented. A classic pattern is in the following. const char SanCovTracePCIndirName[] = \"__sanitizer_cov_trace_pc_indir\"; SanCovTracePCIndir = M.getOrInsertFunction(SanCovTracePCIndirName, VoidTy, IntptrTy); In the second state, SanitizerCoverage will traverse all IR code and do instrumentation at the proper position. IRB.CreateCall(SanCovTracePCIndir, IRB.CreatePointerCast(Callee, IntptrTy)); The overall flow of SanitizerCoverage is in the following. instrumentModule - stage 1 - for (auto &F : M) { instrumentFunction(F); } instrumentFunction - split edges if edge coverage[^1] - for (auto &BB : F) { BlocksToInstrument.push_back(&BB); for (auto &Inst: BB) { /* simplified */ if (IndirectCalls && xxx) IndirCalls.push_back(&Inst) if (TraceCmp && xxx) CmpTraceTargets.push_back(&Inst) if (TraceCmp && xxx) SwitchTraceTargets.push_back(&Inst) if (TraceDiv && xxx) DivTraceTargets.push_back(BO) if (TraceGep && xxx) GepTraceTargets.push_back(BO) if (TraceStackDepth && xxx) IsLeafFunc = false; } } - stage 2 InjectCoverage(F, BlocksToInstrument, IsLeafFunc); InjectCoverageForIndirectCalls(F, IndirCalls); InjectTraceForCmp(F, CmpTraceTargets); InjectTraceForSwitch(F, SwitchTraceTargets); InjectTraceForDiv(F, DivTraceTargets); InjectTraceForGep(F, GepTraceTargets); The key function in stage 2 is InjectCoverage . InjectCoverage first create FunctionGuardArray, Function8bitCounterArray, FunctionBoolArray, or FunctionPCsArray in CreateFunctionLocalArrays , then invoke InjectCoverageAtBlock to handle each basic blocks. InjectCoverageAtBlock will instrument SanCovTracePC , SanCovTracePCGuard , Inline8BitCounters , or InlineBoolFlag , or update the lowest stack frame, for each basic block.","title":"Flow of instrumentations"},{"location":"posts/2021-11-02-libFuzzer-cov-control/#details-of-stubs","text":"Please also refer to this .","title":"Details of stubs"},{"location":"posts/2021-11-02-libFuzzer-cov-control/#__sanitizer_cov_indir_call","text":"This will be in front of an indirect call. It requires at least one of trace-pc , trace-pc-guard , inline-8bit-counters , and inline-bool-flag . It accepts one parameter, the callee address. The address of the caller is passed implicitly via caller PC. Importantly, if the callee is inline assembly, the indirect call will not be instrumented. Its implementation in libFuzzer is in the following. In the end, new information will be updated into the value profile. #define GET_CALLER_PC() __builtin_return_address(0) void TracePC::HandleCallerCallee(uintptr_t Caller, uintptr_t Callee) { const uintptr_t kBits = 12; const uintptr_t kMask = (1 << kBits) - 1; uintptr_t Idx = (Caller & kMask) | ((Callee & kMask) << kBits); ValueProfileMap.AddValueModPrime(Idx); } void __sanitizer_cov_trace_pc_indir(uintptr_t Callee) { uintptr_t PC = reinterpret_cast<uintptr_t>(GET_CALLER_PC()); fuzzer::TPC.HandleCallerCallee(PC, Callee); }","title":"__sanitizer_cov_indir_call"},{"location":"posts/2021-11-02-libFuzzer-cov-control/#__sanitizer_cov_trace_const_cmp1248","text":"These will be in front of a cmp instruction with const operand or not. They accept both operands to be compared. The address of the caller is passed implicitly via caller PC. One of its implementation in libFuzzer is in the following. In the end, new information will be updated into the value profile. #define GET_CALLER_PC() __builtin_return_address(0) template <class T> void TracePC::HandleCmp(uintptr_t PC, T Arg1, T Arg2) { uint64_t ArgXor = Arg1 ^ Arg2; if (sizeof(T) == 4) TORC4.Insert(ArgXor, Arg1, Arg2); else if (sizeof(T) == 8) TORC8.Insert(ArgXor, Arg1, Arg2); uint64_t HammingDistance = Popcountll(ArgXor); // [0,64] uint64_t AbsoluteDistance = (Arg1 == Arg2 ? 0 : Clzll(Arg1 - Arg2) + 1); ValueProfileMap.AddValue(PC * 128 + HammingDistance); ValueProfileMap.AddValue(PC * 128 + 64 + AbsoluteDistance); } void __sanitizer_cov_trace_cmp1(uint8_t Arg1, uint8_t Arg2) { uintptr_t PC = reinterpret_cast<uintptr_t>(GET_CALLER_PC()); fuzzer::TPC.HandleCmp(PC, Arg1, Arg2); } Similarly stubs are __sanitizer_cov_trace_switch , __sanitizer_cov_trace_div[4|8] , and __sanitizer_cov_trace_gep . They all invoke HandleCmp at the end to update new information into the value profile.","title":"__sanitizer_cov_trace_[const_]cmp[1|2|4|8]"},{"location":"posts/2021-11-02-libFuzzer-cov-control/#__sanitizer_cov_trace_pc","text":"This will be at the entry of each basic block. The address of the caller is passed implicitly via caller PC. This is deprecated.","title":"__sanitizer_cov_trace_pc"},{"location":"posts/2021-11-02-libFuzzer-cov-control/#__sanitizer_cov_trace_pc_guard_init","text":"__sanitizer_cov_trace_pc_guard will be at the entry of each basic block after __sanitier_cov_trace_pc . The address of the caller is passed implicitly via caller PC. They are deprecated. Each function would have a function guard array int32_t FunctionGuardArray[] whose size is the number of the basic blocks. This array is associated with sancov_guards section. __sanitizer_cov_trace_pc_guard accepts FunctionGuardArray[IdxofBB] as the guard. If any function guard array, SanCov will create a section named sancov.module_ctor_trace_pc_guard to invoke __sanitizer_cov_trace_pc_guard_init to initialize sancov_guards for each module. [NOT SURE] In the end, after linking, there will be one sancov_guards and one sancov.module_ctor_trace_pc_guard .","title":"__sanitizer_cov_trace_pc_guard[_init]"},{"location":"posts/2021-11-02-libFuzzer-cov-control/#__sanitizer_cov_8bipctableentryidxpc_guard","text":"Each function would have a function 8bit counter array int8_t Function8BitArray[] whose size is the number of the basic blocks. This array is associated with sancov_cntrs section. If a basic block is visited, then the corresponding byte in the array will be increased by 1. If any function 8bit array, SanCov will create a section named sancov.module_ctor_8bit_counters to invoke __sanitizer_cov_8bit_counters_init to initialize sancov_cntrs for each module. [NOT SURE] In the end, after linking, there will be one sancov_cntrs and one sancov.module_ctor_8bit_counters . __sanitizer_cov_8bit_counters_init is defined in the following. It shows the counter information flows to Modules in the libFuzzer. In short, Modules records the start and the stop address of the sancov_cntrs divided by page ( Region ). void TracePC::HandleInline8bitCountersInit(uint8_t *Start, uint8_t *Stop) { if (Start == Stop) return; if (NumModules && Modules[NumModules - 1].Start() == Start) return; assert(NumModules < sizeof(Modules) / sizeof(Modules[0])); auto &M = Modules[NumModules++]; uint8_t *AlignedStart = RoundUpByPage(Start); uint8_t *AlignedStop = RoundDownByPage(Stop); size_t NumFullPages = AlignedStop > AlignedStart ? (AlignedStop - AlignedStart) / PageSize() : 0; bool NeedFirst = Start < AlignedStart || !NumFullPages; bool NeedLast = Stop > AlignedStop && AlignedStop >= AlignedStart; M.NumRegions = NumFullPages + NeedFirst + NeedLast;; assert(M.NumRegions > 0); M.Regions = new Module::Region[M.NumRegions]; assert(M.Regions); size_t R = 0; if (NeedFirst) M.Regions[R++] = {Start, std::min(Stop, AlignedStart), true, false}; for (uint8_t *P = AlignedStart; P < AlignedStop; P += PageSize()) M.Regions[R++] = {P, P + PageSize(), true, true}; if (NeedLast) M.Regions[R++] = {AlignedStop, Stop, true, false}; assert(R == M.NumRegions); assert(M.Size() == (size_t)(Stop - Start)); assert(M.Stop() == Stop); assert(M.Start() == Start); NumInline8bitCounters += M.Size(); } void __sanitizer_cov_8bit_counters_init(uint8_t *Start, uint8_t *Stop) { fuzzer::TPC.HandleInline8bitCountersInit(Start, Stop); }","title":"__sanitizer_cov_8biPCTableEntryIdxpc_guard`."},{"location":"posts/2021-11-02-libFuzzer-cov-control/#__sanitizer_cov_bool_flag_init","text":"The inline bool flag will be at the entry of each basic block after the inline 8bit counters. Each function would have a function 1 bit array int1_t FunctionBoolArray[] whose size is the number of the basic blocks. This array is associated with sancov_bools section. If a basic block is visited, then the corresponding bit in the array will be true. If any function bool array, SanCov will create a section named sancov.module_ctor_bool_flag to invoke __sanitizer_cov_bool_flag_init to initilize sancov_bools for each module. [NOT SURE] In the end, after linking, there will be one sancov_bools and one sancov.module_ctor_bool_flag . __sanitizer_cov_bool_flag_init is not defined in the libFuzzer.","title":"__sanitizer_cov_bool_flag_init"},{"location":"posts/2021-11-02-libFuzzer-cov-control/#__sanitizer_cov_pcs_init","text":"For each function, SanCov creates a PC array associated with sancov_pcs to store {PC, PCFlags} pairs. PC is the address of the corresponding basic block, and a PCFlags describes the basic block is the function entry block (1) or not (0). If one of the trace-pc-guard , inline-8bit-counters , and inline-bool-flag , and any function PC array, SanCov will invoke __sanitizer_cov_pcs_init to initilize sancov_pcs for each module in one of the section: sancov.xxx . [NOT SURE] In the end, after linking, there will be one sancov_pcs . __sanitizer_cov_pcs_init is defined in the following. In short, the information flows to ModulePCTable in libFuzzer. void TracePC::HandlePCsInit(const uintptr_t *Start, const uintptr_t *Stop) { const PCTableEntry *B = reinterpret_cast<const PCTableEntry *>(Start); const PCTableEntry *E = reinterpret_cast<const PCTableEntry *>(Stop); if (NumPCTables && ModulePCTable[NumPCTables - 1].Start == B) return; assert(NumPCTables < sizeof(ModulePCTable) / sizeof(ModulePCTable[0])); ModulePCTable[NumPCTables++] = {B, E}; NumPCsInPCTables += E - B; } void __sanitizer_cov_pcs_init(const uintptr_t *pcs_beg, const uintptr_t *pcs_end) { fuzzer::TPC.HandlePCsInit(pcs_beg, pcs_end); }","title":"__sanitizer_cov_pcs_init"},{"location":"posts/2021-11-02-libFuzzer-cov-control/#a-brief-list-of-flag-stubs-and-information-sink-in-libfuzzer","text":"Flag Stubs Information Sink trace-pc,indirect-calls __sanitizer_cov_trace_pc_indirect ValueProfileMap trace-pc-guard,indirect-calls __sanitizer_cov_trace_pc_indirect ValueProfileMap inline-8bit-counters,indirect-calls __sanitizer_cov_trace_pc_indirect ValueProfileMap inline-bool-flag,indirect-calls __sanitizer_cov_trace_pc_indirect ValueProfileMap trace-cmp __sanitizer_cov_trace_[const_]cmp[1|2|4|8] ValuleProfileMap trace-switch __sanitizer_cov_trace_switch ValuleProfileMap trace-div __sanitizer_cov_trace_div[4|8] ValuleProfileMap trace-gep __sanitizer_cov_trace_gep ValuleProfileMap trace-pc __sanitizer_cov_trace_pc deprecated trace-pc-guard __sanitizer_cov_trace_pc_guard[_init] deprecated inline-8bit-counters __sanitizer_cov_8bit_counters_init Modules inline-bool-flag __sanitizer_cov_bool_flag_init not supported trace-pc-guard,pc-table __sanitizer_cov_pcs_init ModulePCTable inline-8bit-guard,pc-table __sanitizer_cov_pcs_init ModulePCTable inline-bool-flag,pc-table __sanitizer_cov_pcs_init ModulePCTable","title":"A brief list of (flag, stubs, and information sink in libFuzzer)"},{"location":"posts/2021-11-02-libFuzzer-cov-control/#details-of-coverage-collection-algorithm-and-implementation","text":"Recalling that several stubs are instrumented to the target program. The implementation of these stubs are implemented in libFuzzer by default or can be replaced by developers. Most of them are defined in compiler-rt/lib/fuzzer/FuzzerTracePC.cpp. After testing an input, these stubs will update corresponding information. LibFuzzer will then calculate the coverage with the information. A detailed flow is in the following. ExecuteCallback - TPC.ResetMaps(); - CB(DataCopy, Size); TPC.CollectFeatures(); if (NumNewFeatures || ForceAddToCorpus) { TPC.UpdateObservedPCs(); }","title":"Details of coverage collection algorithm and implementation"},{"location":"posts/2021-11-02-libFuzzer-cov-control/#resetmaps","text":"template <class Callback> void IterateCounterRegions(Callback CB) { for (size_t m = 0; m < NumModules; m++) for (size_t r = 0; r < Modules[m].NumRegions; r++) CB(Modules[m].Regions[r]); } void TracePC::ClearInlineCounters() { IterateCounterRegions([](const Module::Region &R){ if (R.Enabled) memset(R.Start, 0, R.Stop - R.Start); }); } void ResetMaps() { ValueProfileMap.Reset(); ClearExtraCounters(); ClearInlineCounters(); } TPC.ResetMaps reset 1) ValueProfileMap, a bit map for data flow value, 2) ExtraCounters, 3) InlineCouters, the area for inline-8bit-counters .","title":"ResetMaps"},{"location":"posts/2021-11-02-libFuzzer-cov-control/#collectfeatures","text":"size_t NumUpdatesBefore = Corpus.NumFeatureUpdates(); TPC.CollectFeatures([&](size_t Feature) { if (Corpus.AddFeature(Feature, Size, Options.Shrink)) // * }); TPC.CollectFeatures accepts a HandleFeature function pointer. In the HandleFeature, it accepts a Feature that is calculated from all the coverage information (Information Sink), and then adds the feature to the corpus. AddFeature is part of the HandleFeature function to log features. libFuzzer will map a feature to the size of the corresponding input. If the size is zero, the feature is not visited. bool AddFeature(size_t Idx, uint32_t NewSize, bool Shrink) { Idx = Idx % kFeatureSetSize; uint32_t OldSize = GetFeature(Idx); if (OldSize == 0 || (Shrink && OldSize > NewSize)) { if (OldSize > 0) { // ... } else { NumAddedFeatures++; // ... } NumUpdatedFeatures++; InputSizesPerFeature[Idx] = NewSize; return true; } return false; } In TPC.CollectFeatures , it maps the information sinks to features like below. // Modules (Inlint8BitCounters) FirstFeature=0 feature 0 8 w/o counters w/ counters +----+ BB00 +d'02+ +0 +(0*8 + log(2)) +----+ BB01 +d'80+ +1 +(1*8 + log(80)) +----+ FirstFeature += NumOfBits(Modules) // ExtracCounters 0 8 w/o counters w/ counters +----+ CNT0 +d'02+ +0 +(0*8 + log(2)) +----+ CNT1 +d'80+ +1 +(1*8 + log(80)) +----+ FirstFeature += NumOfBits(ExtraCounters) // ValueProfileMap 0 8 +----+ VPM0 +d'02+ +6 (b'00000010) +----+ VPM8 +d'82+ +8/+14 (b'10000010) +----+ FirstFeature += NumOfBits(ValueProfileMap) // StackDepth + StackDepthStepFunction(MaxStackOffset / 8) In general, we map coverage information to a linear feature from zero. For the Modules , libFuzzer checks each byte that records how many times a basic block is visited. If without counters, the feature is the start feature plus the index of the bytes. For BB01, if the index is 1, then the feature is 1. If with counter, it will take d'80 into consideration. The feature is 0 plus log(80). The logarithmic function guarantees the feature will not overflow 8 bits. In the end, the start of the new features will be updated by adding the bit number of modules. ExtraCounters works similarly. For the ValueProfileMap, each non-zero bit is a new feature. For the stack depth, it leverages a hash function StackDepthStepFunction.","title":"CollectFeatures"},{"location":"posts/2021-11-02-libFuzzer-cov-control/#updateobservedpcs","text":"If any new features, libFuzzer will update observed PCs. for (size_t i = 0; i < NumModules; i++) { auto &M = Modules[i]; for (size_t r = 0; r < M.NumRegions; r++) { auto &R = M.Regions[r]; if (!R.Enabled) continue; for (uint8_t *P = R.Start; P < R.Stop; P++) if (*P) // if this basic block is visited // then get the PC of the visited the basic block // then invoke Observe Observe(&ModulePCTable[i].Start[M.Idx(P)]); } } First, if a basic block is visited, libFuzzer will get the PC of the visited the basic in the PCTable, and invoke Observe . Vector<uintptr_t> CoveredFuncs; auto ObservePC = [&](const PCTableEntry *TE) { if (ObservedPCs.insert(TE).second && DoPrintNewPCs) { PrintPC(\"\\tNEW_PC: %p %F %L\", \"\\tNEW_PC: %p\", GetNextInstructionPc(TE->PC)); Printf(\"\\n\"); } }; auto Observe = [&](const PCTableEntry *TE) { if (PcIsFuncEntry(TE)) if (++ObservedFuncs[TE->PC] == 1 && NumPrintNewFuncs) CoveredFuncs.push_back(TE->PC); ObservePC(TE); }; If the basic block is the entry, then update ObservedFunc . Otherwise, invoke ObservePC to update ObservedPCs .","title":"UpdateObservedPCs"},{"location":"posts/2021-11-02-libFuzzer-cov-control/#libfuzzer-intercepts","text":"LibFuzzer will intercepts memcmp , strncmp , strcmp , strncasecmp , strcasecmp , strstr , strcasestr , and memmem functions if no ASAN, TSAN, MSAN runtime is enabled. It is not easy to disable this behavior. A typical flow for each above function is in the following. RunningUserCallback = true; int Res = CB(DataCopy, Size); RunningUserCallback = false; int memcmp(const void *s1, const void *s2, size_t n) { if (!FuzzerInited) return internal_memcmp(s1, s2, n); int result = REAL(memcmp)(s1, s2, n); __sanitizer_weak_hook_memcmp(GET_CALLER_PC(), s1, s2, n, result); return result; } void __sanitizer_weak_hook_memcmp(void *caller_pc, const void *s1, const void *s2, size_t n, int result) { if (!fuzzer::RunningUserCallback) return; if (result == 0) return; // No reason to mutate. if (n <= 1) return; // Not interesting. fuzzer::TPC.AddValueForMemcmp(caller_pc, s1, s2, n, /*StopAtZero*/false); } Here is a summary of where the collected information will flow. Function Information Sink memcmp AddValueForMemcmp ValueProfileMap strnmp AddValueForMemcmp ValueProfileMap strcmp AddValueForMemcmp ValueProfileMap strncasecmp AddValueForMemcmp ValueProfileMap strcasecmp AddValueForMemcmp strstr MMT(Mutation Only) strcasestr MMT(Mutation Only) memmem MMT(Mutation Only) To disable them, we could 1) use -use_value_profile=0 when fuzzing to avoid update coverage information from ValueProfileMap, 2) comment these __sanitizer_weak_hook_xxx to reduce the overhead. Luckily, -use_value_profile=0 is the default option of libFuzzer.","title":"libFuzzer intercepts"},{"location":"posts/2021-11-02-libFuzzer-cov-control/#conclusion","text":"For the basic block coverage, SanCov maintains an array that records how many times a basic block is visited, and the libFuzzer will collect that information and calculate features. To disable fancy features, just do as below. clang -o foo -fsanitize=fuzzer \\ -fsanitize-coverage=bb \\ -fno-sanitize-coverage=indirect-calls,trace-cmp,stack-depth,pc-table \\ foo.c Clangedge-coverage \u21a9","title":"Conclusion"},{"location":"posts/2021-11-15-ase-firmguide/","text":"ASE'21 - FirmGuide # This is the speech text of FirmGuide for ASE'21. Text (15 mins, ~1500 words) and Slides # Hello, everyone. My name is Liu Qiang from Zhejiang University. I'm going to introduce one of our works on firmware rehosting: FirmGuide. This is a joint work with Zhang Cheng, the other co-first author, and other authors from Zhejiang University, Nanyang Technological University, and The Hong Kong Polytechnic University. Now high-end embedded devices like routers and IP cameras use the Linux kernel. We want to dynamically understand and discover the bugs or vulnerabilities in the context of embedded systems. However, it is not easy and scalable due to the hardware requirements. The goal of this paper is then to rehost the embedded Linux kernels with the best effort. The rehosting has three challenges. First, a System on Chip or an SoC has numerous peripherals. Based on the observation that whether a peripheral is necessary to the Linux kernel core functionalities, we classify peripherals into two types. Type-I peripherals, such as memory, interrupt controllers, timers, and UART, are critical to memory management, scheduling, and user-kernel interactions. We have to design high-fidelity models for them. Others are type-II peripherals that are not necessary to be high fidelity. We use dummy device models with proper initialized values to pass some checks to avoid being stuck when the Linux kernel is booting. This classification saves the time to model every type of peripherals, which is a complicated problem that may take years. The minimum best effort, i.e., focusing on Type-I peripherals, is the first step to start the dynamic analysis of the embedded Linux kernels. Next, we are going to discuss two other challenges when modeling the Type-I peripherals. The second challenge is that even one type of peripherals, e.g., interrupt controllers, have different models. Do we need to model each interrupt controller? The answer is no. Based on our observation, the driver of an interrupt controller must obey the protocol defined by the Linux kernel in the interrupt subsystem. To solve this challenge, we extract generic state machines from the Linux kernel subsystems for further high fidelity model construction. The third challenge is that each peripheral has complex interactive semantics. For example, to mask an interrupt source, an interrupt controller will read the mask register, mask one specific bit, and then write the value back to the register. To load the number of a pending interrupt, an interrupt controller will load the corresponding value, parse it, and invoke the relative interrupt service routine. We observe that the driver of an interrupt controller has to implement the callbacks defined in the interrupt subsystem. Each specific driver callback embeds such complex interactive semantics via MMIO read and write sequences. We analyze the drivers of Type-I peripherals and extract MMIO read and write sequences from these callbacks to complement the state machine extracted from the interrupt subsystem. In our paper, we propose a new technique named model-guided kernel execution. The idea is that we can leverage a state machine model to guide the kernel's execution. The peripheral model consists of two parts. The first part is the model template, that is, a state machine. It is manually constructed by experts. Note that the transition condition is blank. The second part is MMIO read and write sequences as transition conditions. This part can be automatically inferred by analyzing the source code of the drivers. How does the model-guided kernel execution work? The peripheral model monitors the execution of the Linux kernel, compares the MMIO read and write sequences encoded in the state machine, and then transit to the corresponding states. Finally, the Linux kernel will successfully boot and spawn an interactive shell. Here is a running example. The left figure has two representative callback functions of an interrupt controller driver in the Linux kernel. The right figure shows how the peripheral model works. In the irq_mask_callback function, it first issues an MMIO read. In the peripheral model, we monitor this MMIO read. Give a concrete irq, we do mask a specific bit in the variable mask, and then issue an MMIO write. The peripheral model can detect this MMIO read and write sequence. The peripheral model can infer the specific interrupt request number by the write value and then mask it. Similarly, the callback function handle_irq_callback reads the current pending interrupt sources. After monitoring it, the peripheral model will check the current state machine and return the number of the pending interrupt. The example shows that the MMIO read and write sequences from the Linux kernel can be recognized to drive the state machine of our emulated peripherals, which is the core idea of how the model-guided kernel execution works. How to construct the peripheral model? In the above row, we first manually analyze the Linux kernel subsystems and construct the model template manually. In the bottom row, we parse the device tree blob to get some parameters, such as the number of interrupts that an interrupt controller can support, then automatically analyze the driver code. The automated inference has three parts. The first part is the basic MMIO read and write sequence extraction via symbolic execution. The second part is to handle CFSV. CFSV are kernel-maintained shared variables. They will cache the value of the MMIO registers. We have to analyze them and consider them as part of the peripheral model. Otherwise, the peripheral model will lose track of the interaction semantics. The third part is to infer the semantic difference between the hardware and the Linux kernel. Specifically, the time unit used by the hardware and the Linux kernel is different. We have to calculate the difference and convert it to hardware-recognized or kernel-recognized value. Then, we have the MMIO read and write sequences with more information for each state transition. Finally, we convert the peripheral model to QEMU virtual device. In general, we semi-automatically build the state machine of each peripheral with a general model template and model parameters. Here is our system design and implementation. FirmGuide consists of two components. The first component, \"offline model generation\", analyzes the Linux kernel source code and generates virtual devices finally. This component uses LLVM pass for preprocessing, KLEE for MMIO read and write sequences analysis, and Python scripts for gluing. The second component, \"online kernel booting\", accepts the binary firmware, lists the peripherals in its device tree blob, and composes the whole virtual machine. This component uses Python for the main logic and leverages the template-render design pattern for code generation. The first question in our evaluation is what peripherals models FirmGuide can generate. As shown in the first table, FirmGuide can support five different families of SoCs, covering six interrupt controllers and five timers. In the parameter inference, the symbolic execution engine can solve the first solution within 1 hour. We also count the number of CFSV and timer semantic-aware values. Our experiences show that these peripheral models can support the basic functionality of a rehosted embedded Linux kernel. In the second table, we list the number of Type-II peripherals and the number of initialized values we should handle to avoid being stuck when the Linux kernel is booting. In general, because the number of initial values is limited, they are easier to handle with the symbolic execution. The second question is what embedded Linux kernel we can rehost. In the figure, we list the number of unpacked firmware, the number of extracted kernels, the number of embedded kernels that go to the user space, and the number of embedded kernels that spawn shells. Given more than six thousand of firmware crossing ten vendors, three architectures, and 22 Linux kernel versions, FirmGuide can successfully rehost more than 96% of them, showing the scalability of FirmGuide. The third question is about the functionality or fidelity of the rehosted embedded Linux kernels via the system call testing tools in the Linux Test Project. We manually develop a QEMU virtual machine with well-constructed Type-I peripherals and compare the result with the one FirmGuide generates. Results in the table show that FirmGuide generated virtual machines has the same fidelity as manually developed QEMU virtual machine regarding the system calls. The fourth question is the applications of FirmGuide. We use FirmGuide to reproduce and develop exploits for six Linux kernel CVEs. We also leverage fuzzing to test the rehosted embedded Linux kernel. Here we are. First, we proposed a novel technique. Second, we design and implement the first semi-automatic framework for embedded Linux kernel rehosting. Last, we apply FirmGuide to analyze and discover the bugs in the embedded Linux kernel. At last, I'd like to discuss the limitation of FirmGuide and future work. First, we need experts to extract the state machine from the Linux kernel subsystems manually. It depends on a well-formed abstraction. It is still challenging to infer the peripheral model automatically for complicated peripherals. Second, FirmGuide cannot support the high fidelity of Type-II peripherals due to our minimum best efforts strategy. It is an important problem to support more Type-II peripherals and enable more analysis of Type-II peripheral drivers in the embedded Linux kernel. Thank you!","title":"ASE'21 - FirmGuide"},{"location":"posts/2021-11-15-ase-firmguide/#ase21-firmguide","text":"This is the speech text of FirmGuide for ASE'21.","title":"ASE'21 - FirmGuide"},{"location":"posts/2021-11-15-ase-firmguide/#text-15-mins-1500-words-and-slides","text":"Hello, everyone. My name is Liu Qiang from Zhejiang University. I'm going to introduce one of our works on firmware rehosting: FirmGuide. This is a joint work with Zhang Cheng, the other co-first author, and other authors from Zhejiang University, Nanyang Technological University, and The Hong Kong Polytechnic University. Now high-end embedded devices like routers and IP cameras use the Linux kernel. We want to dynamically understand and discover the bugs or vulnerabilities in the context of embedded systems. However, it is not easy and scalable due to the hardware requirements. The goal of this paper is then to rehost the embedded Linux kernels with the best effort. The rehosting has three challenges. First, a System on Chip or an SoC has numerous peripherals. Based on the observation that whether a peripheral is necessary to the Linux kernel core functionalities, we classify peripherals into two types. Type-I peripherals, such as memory, interrupt controllers, timers, and UART, are critical to memory management, scheduling, and user-kernel interactions. We have to design high-fidelity models for them. Others are type-II peripherals that are not necessary to be high fidelity. We use dummy device models with proper initialized values to pass some checks to avoid being stuck when the Linux kernel is booting. This classification saves the time to model every type of peripherals, which is a complicated problem that may take years. The minimum best effort, i.e., focusing on Type-I peripherals, is the first step to start the dynamic analysis of the embedded Linux kernels. Next, we are going to discuss two other challenges when modeling the Type-I peripherals. The second challenge is that even one type of peripherals, e.g., interrupt controllers, have different models. Do we need to model each interrupt controller? The answer is no. Based on our observation, the driver of an interrupt controller must obey the protocol defined by the Linux kernel in the interrupt subsystem. To solve this challenge, we extract generic state machines from the Linux kernel subsystems for further high fidelity model construction. The third challenge is that each peripheral has complex interactive semantics. For example, to mask an interrupt source, an interrupt controller will read the mask register, mask one specific bit, and then write the value back to the register. To load the number of a pending interrupt, an interrupt controller will load the corresponding value, parse it, and invoke the relative interrupt service routine. We observe that the driver of an interrupt controller has to implement the callbacks defined in the interrupt subsystem. Each specific driver callback embeds such complex interactive semantics via MMIO read and write sequences. We analyze the drivers of Type-I peripherals and extract MMIO read and write sequences from these callbacks to complement the state machine extracted from the interrupt subsystem. In our paper, we propose a new technique named model-guided kernel execution. The idea is that we can leverage a state machine model to guide the kernel's execution. The peripheral model consists of two parts. The first part is the model template, that is, a state machine. It is manually constructed by experts. Note that the transition condition is blank. The second part is MMIO read and write sequences as transition conditions. This part can be automatically inferred by analyzing the source code of the drivers. How does the model-guided kernel execution work? The peripheral model monitors the execution of the Linux kernel, compares the MMIO read and write sequences encoded in the state machine, and then transit to the corresponding states. Finally, the Linux kernel will successfully boot and spawn an interactive shell. Here is a running example. The left figure has two representative callback functions of an interrupt controller driver in the Linux kernel. The right figure shows how the peripheral model works. In the irq_mask_callback function, it first issues an MMIO read. In the peripheral model, we monitor this MMIO read. Give a concrete irq, we do mask a specific bit in the variable mask, and then issue an MMIO write. The peripheral model can detect this MMIO read and write sequence. The peripheral model can infer the specific interrupt request number by the write value and then mask it. Similarly, the callback function handle_irq_callback reads the current pending interrupt sources. After monitoring it, the peripheral model will check the current state machine and return the number of the pending interrupt. The example shows that the MMIO read and write sequences from the Linux kernel can be recognized to drive the state machine of our emulated peripherals, which is the core idea of how the model-guided kernel execution works. How to construct the peripheral model? In the above row, we first manually analyze the Linux kernel subsystems and construct the model template manually. In the bottom row, we parse the device tree blob to get some parameters, such as the number of interrupts that an interrupt controller can support, then automatically analyze the driver code. The automated inference has three parts. The first part is the basic MMIO read and write sequence extraction via symbolic execution. The second part is to handle CFSV. CFSV are kernel-maintained shared variables. They will cache the value of the MMIO registers. We have to analyze them and consider them as part of the peripheral model. Otherwise, the peripheral model will lose track of the interaction semantics. The third part is to infer the semantic difference between the hardware and the Linux kernel. Specifically, the time unit used by the hardware and the Linux kernel is different. We have to calculate the difference and convert it to hardware-recognized or kernel-recognized value. Then, we have the MMIO read and write sequences with more information for each state transition. Finally, we convert the peripheral model to QEMU virtual device. In general, we semi-automatically build the state machine of each peripheral with a general model template and model parameters. Here is our system design and implementation. FirmGuide consists of two components. The first component, \"offline model generation\", analyzes the Linux kernel source code and generates virtual devices finally. This component uses LLVM pass for preprocessing, KLEE for MMIO read and write sequences analysis, and Python scripts for gluing. The second component, \"online kernel booting\", accepts the binary firmware, lists the peripherals in its device tree blob, and composes the whole virtual machine. This component uses Python for the main logic and leverages the template-render design pattern for code generation. The first question in our evaluation is what peripherals models FirmGuide can generate. As shown in the first table, FirmGuide can support five different families of SoCs, covering six interrupt controllers and five timers. In the parameter inference, the symbolic execution engine can solve the first solution within 1 hour. We also count the number of CFSV and timer semantic-aware values. Our experiences show that these peripheral models can support the basic functionality of a rehosted embedded Linux kernel. In the second table, we list the number of Type-II peripherals and the number of initialized values we should handle to avoid being stuck when the Linux kernel is booting. In general, because the number of initial values is limited, they are easier to handle with the symbolic execution. The second question is what embedded Linux kernel we can rehost. In the figure, we list the number of unpacked firmware, the number of extracted kernels, the number of embedded kernels that go to the user space, and the number of embedded kernels that spawn shells. Given more than six thousand of firmware crossing ten vendors, three architectures, and 22 Linux kernel versions, FirmGuide can successfully rehost more than 96% of them, showing the scalability of FirmGuide. The third question is about the functionality or fidelity of the rehosted embedded Linux kernels via the system call testing tools in the Linux Test Project. We manually develop a QEMU virtual machine with well-constructed Type-I peripherals and compare the result with the one FirmGuide generates. Results in the table show that FirmGuide generated virtual machines has the same fidelity as manually developed QEMU virtual machine regarding the system calls. The fourth question is the applications of FirmGuide. We use FirmGuide to reproduce and develop exploits for six Linux kernel CVEs. We also leverage fuzzing to test the rehosted embedded Linux kernel. Here we are. First, we proposed a novel technique. Second, we design and implement the first semi-automatic framework for embedded Linux kernel rehosting. Last, we apply FirmGuide to analyze and discover the bugs in the embedded Linux kernel. At last, I'd like to discuss the limitation of FirmGuide and future work. First, we need experts to extract the state machine from the Linux kernel subsystems manually. It depends on a well-formed abstraction. It is still challenging to infer the peripheral model automatically for complicated peripherals. Second, FirmGuide cannot support the high fidelity of Type-II peripherals due to our minimum best efforts strategy. It is an important problem to support more Type-II peripherals and enable more analysis of Type-II peripheral drivers in the embedded Linux kernel. Thank you!","title":"Text (15 mins, ~1500 words) and Slides"},{"location":"posts/2021-12-13-Summary-of-CS725/","text":"A brief summary of CS-725 # CS-725: Topics in Language-based Software Security , co-taught by Mathias Payer and Manuel Egele, is an inspiring seminar on software testing (finding bugs), and mitigation (protecting against the exploitation of bugs). What we did during the seminar: give presentation, ask questions, and give feedbacks. What I learned from the seminar: experiences, conclusion for research, techniques, and implementation. What are the difference between sanitizers and mitigation? How to estimate the overhead? Is the evaluation fair and enough? Why it this a survey paper rather than an SoK? ... What I felt about the seminar: 1) both teachers and students are dedicated; 2) the whole class is self-organized, 3) I didn't spend much time on it but learned something. I attended a similar seminar on system (not system security) in Zhejiang University. Here are some differences. This system seminar does not actually match my research interests. Only the last lesson was about system security. Most of the time, I did not listen or just skipped lessons. I chose this seminar because I needed two more credits and there was no more security-focused seminars at all. It's better to cut down the credit requirement or join a seminar hosted by our supervisors who have free time. The teaching material in this system seminar were the latest papers accepted by OSDI and SOSP, which might not be the best choices because we know nothing about the related work. We may need famous and cited papers like in CS-725. It's the instructor that introduced papers in class not students. Considering not all students were interested in this seminar, this might be a better choice. We don't know why. Why this? Why that? In the final examination, we were required to find the authors' claims in the paper and fill them into the blanks. We have to spend two 45-minutes sessions for this system seminar and we have to spend extra time to prepare the examination. For CS-725, we speed one 45-minute session for class, and one session for preparing slides and writing summary. For CS-725, the whole time spent on the seminar won't exceed the requirement of two credits. Chinese Universities really should learn this!!!","title":"A brief summary of CS-725"},{"location":"posts/2021-12-13-Summary-of-CS725/#a-brief-summary-of-cs-725","text":"CS-725: Topics in Language-based Software Security , co-taught by Mathias Payer and Manuel Egele, is an inspiring seminar on software testing (finding bugs), and mitigation (protecting against the exploitation of bugs). What we did during the seminar: give presentation, ask questions, and give feedbacks. What I learned from the seminar: experiences, conclusion for research, techniques, and implementation. What are the difference between sanitizers and mitigation? How to estimate the overhead? Is the evaluation fair and enough? Why it this a survey paper rather than an SoK? ... What I felt about the seminar: 1) both teachers and students are dedicated; 2) the whole class is self-organized, 3) I didn't spend much time on it but learned something. I attended a similar seminar on system (not system security) in Zhejiang University. Here are some differences. This system seminar does not actually match my research interests. Only the last lesson was about system security. Most of the time, I did not listen or just skipped lessons. I chose this seminar because I needed two more credits and there was no more security-focused seminars at all. It's better to cut down the credit requirement or join a seminar hosted by our supervisors who have free time. The teaching material in this system seminar were the latest papers accepted by OSDI and SOSP, which might not be the best choices because we know nothing about the related work. We may need famous and cited papers like in CS-725. It's the instructor that introduced papers in class not students. Considering not all students were interested in this seminar, this might be a better choice. We don't know why. Why this? Why that? In the final examination, we were required to find the authors' claims in the paper and fill them into the blanks. We have to spend two 45-minutes sessions for this system seminar and we have to spend extra time to prepare the examination. For CS-725, we speed one 45-minute session for class, and one session for preparing slides and writing summary. For CS-725, the whole time spent on the seminar won't exceed the requirement of two credits. Chinese Universities really should learn this!!!","title":"A brief summary of CS-725"},{"location":"posts/2022-02-08-introduction-to-sociality/","text":"Lesson 1 # \u6982\u8bba\u8bfe\uff0c\u8bb2\u8ff0\u793e\u4f1a\u5b66\u7684\u5404\u4e2a\u89d2\u5ea6 \u793e\u4f1a\u5b66\u80fd\u548c\u7ecf\u6d4e\u5b66\u53ca\u653f\u6cbb\u5b66\u533a\u5206\u5f00 \u793e\u4f1a\u5b66\u7684\u6982\u5ff5\u90fd\u5b58\u5728\u7740\u8bf8\u591a\u4e89\u8bba \u4ece\u5386\u53f2\u7684\u89d2\u5ea6\u770b\u793e\u4f1a\u5b66 \u5b54\u5fb7\uff1a\u5b9e\u8bc1\u54f2\u5b66\uff0c\u793e\u4f1a\u7269\u7406\u5b66 \uff08\u5076\u7136\u548c\u53ef\u7406\u89e3\u6027\uff09 \u79d1\u5b66\u53d1\u73b0\u548c\u542f\u8499\u8fd0\u52a8 \u6cd5\u56fd\u5927\u9769\u547d\u548c\u5de5\u4e1a\u9769\u547d \u9a6c\u514b\u601d\uff0c\u6d82\u5c14\u5e72\uff0c\u97e6\u4f2f \u89e3\u51b3\u793e\u4f1a\u5371\u673a\uff08\u7406\u89e3\u793e\u4f1a\u5371\u673a\uff09 \u9636\u7ea7\u5206\u6790\uff0c\u793e\u4f1a\u662f\u4e00\u4e2a\u6574\u4f53 + \u793e\u4f1a\u662f\u5916\u5728\u4e8e\u4e2a\u4f53\u5b58\u5728\u7684\uff0c\u8d44\u672c\u4e3b\u4e49\u8d77\u6e90\u7684\u7cbe\u795e\u6c1b\u56f4 + \u79d1\u5c42\u5236\uff08\u5de5\u5177\u7406\u6027+\u4ef7\u503c\u7406\u6027\uff09+ \u793e\u4f1a\u5206\u5c42 \u51b2\u7a81\u7406\u8bba\uff0c\u7ed3\u6784\u529f\u80fd\u4e3b\u4e49\uff0c\u7b26\u53f7\u4e92\u52a8\u8bba Lesson 2\uff1a\u793e\u4f1a\u4e0e\u6587\u5316 # \u793e\u4f1a\u8003\uff1a\u5c0f\u5230\u6751\u5e84\uff0c\u5927\u5230\u56fd\u5bb6\uff1b\u5177\u4f53\u4e0e\u62bd\u8c61\uff1b\u7cfb\u7edf\u6a21\u578b\uff0c\u4e92\u52a8\u6a21\u578b \u6587\u5316\u8003\uff1a\u4e00\u4e2a\u793e\u4f1a\u6216\u7fa4\u91cc\u5171\u540c\u627f\u8ba4\u7684\u4ef7\u503c\u89c2\uff0c\u9075\u4ece\u7684\u89c4\u8303\uff0c\u8054\u901a\u4ed6\u4eec\u521b\u9020\u7684\u7269\u8d28\u4ea7\u54c1 \u53cd\u5bf9\u4e3b\u6d41\u6587\u5316\u7684\uff1a\u5b09\u76ae\u58eb\uff1b\u4e9a\u6587\u5316 \u6587\u5316\u7684\u6784\u6210\uff1a\u4ef7\u503c\u89c2\uff0c\u89c4\u8303\uff08\u793e\u4f1a\u4e60\u4fd7\uff0c\u9053\u5fb7\u548c\u6cd5\u5f8b\uff09\uff0c Lesson 3\uff1a\u793e\u4f1a\u4e92\u52a8\u4e0e\u793e\u4f1a\u7ed3\u6784 # \u793e\u4f1a\u4e92\u52a8\uff1a\u6a21\u5f0f\u5316\uff0c\u7ed3\u6784\u5316 \u793e\u4f1a\u7ed3\u6784\uff1a\u5b9a\u4e49\u5f88\u591a\uff0c\u4f46\u662f\u4e0d\u7528\u8bb0\u4f4f\uff0c\u8981\u628a\u63e1\u7279\u70b9 2.1 \u793e\u4f1a\u5730\u4f4d 2.1.1 \u5148\u8d4b\u5730\u4f4d\uff1a\u51fa\u751f\u65f6\u83b7\u5f97\u7684\u5730\u4f4d\uff1a\u751f\u7406\u6027\u522b\uff0c\u4eba\u79cd\uff0c\u79cd\u65cf\uff1b\u6210\u5c31\u5730\u4f4d\uff1a 2.1.2 \u4e3b\u5bfc\u5730\u4f4d\uff08\u6211\u4e0d\u613f\u610f\u522b\u4eba\u4ee5xxx\u770b\u6211\uff0c\u4f46\u662f\uff09 2.1.3 \u5b9a\u4f4d\u4e1b\uff1a\u4e00\u4e2a\u4eba\u8eab\u4e0a\u7684\u591a\u79cd 2.2 \u793e\u4f1a\u89d2\u8272\uff1a\u793e\u4f1a\u5730\u4f4d+\u522b\u4eba\u671f\u671b\u7684\u884c\u4e3a 2.2.1 \u89d2\u8272\u7d27\u5f20\u548c\u51b2\u7a81\uff1a\u89d2\u8272\u4e4b\u95f4\u548c\u89d2\u8272\u5185\u90e8\u77db\u76fe\uff0c\u9632\u6b62\u89d2\u8272\u7684\u6b63\u5e38\u8fdb\u884c 2.3 \u793e\u4f1a\u884c\u52a8 vs \u793e\u4f1a\u884c\u4e3a 2.3.1 \u793e\u4f1a\u884c\u52a8\uff1a\u884c\u52a8\u65f6\u8003\u8651\u5176\u4ed6\u4eba\uff1a\u4ed6\u4eba\u6307\u5411\u7684 2.3.2 \u793e\u4f1a\u884c\u4e3a\uff1a\u66f4\u5e7f\u6cdb\u7684\u3001\u4e00\u822c\u7684\u884c\u4e3a 3 \u793e\u4f1a\u4e92\u52a8\uff1a\u4e2a\u4f53\u4e4b\u95f4\u7684\u4efb\u4f55\u5f62\u5f0f\u7684\u793e\u4f1a\u63a5\u89e6 3.1 \u719f\u4eba\u793e\u4f1a\u3001\u964c\u751f\u4eba\u793e\u4f1a 3.2 \u53cd\u5e94\u6027\u60ca\u547c 3.3 \u793e\u4f1a\u4e92\u52a8\u7684\u7814\u7a76\u5f88\u6709\u610f\u4e49 3.4 \u5e38\u4eba\u65b9\u6cd5\u5b66\uff1a\u666e\u901a\u4eba\u7684\u793e\u4f1a\u4e92\u52a8\uff1a\u6ca1\u6709\u8a00\u660e\u7684\u80cc\u666f\u77e5\u8bc6 3.5 \u65e0\u7126\u70b9\u7684\u4e92\u52a8\uff1a\u4e92\u76f8\u89c9\u5bdf\uff1a\u98df\u5802\u5403\u996d\uff0c\u8def\u4e0a\u8d70\u8def\uff1b\u6709\u7126\u70b9\u4e92\u52a8\uff1a\u63a5\u89e6 3.6 \u7b26\u53f7\u4e92\u52a8\u8bba\uff1a\u8fd0\u7528\u7b26\u53f7\uff1b\u79e9\u5e8f\u662f\u8fd0\u52a8\u7684\uff1b\u4e16\u754c\u7684\u4e92\u52a8\uff1b\u76ee\u7684\u662f\u53d1\u73b0\u6f5c\u85cf\u7684\u6a21\u5f0f 3.7 \u6ce8\u610f\u4e92\u52a8\uff08\u7b26\u53f7\u4e92\u52a8\u8bba\uff09\u662f\u4e0e\u7ed3\u6784\u5e76\u884c\uff08\u7ed3\u6784\u529f\u80fd\u4e3b\u4e49\uff09\u7684\u53e6\u4e00\u4e2a\u89d2\u5ea6 3.8 \u5927\u90fd\u5e02\u53ca\u5176\u7cbe\u795e\u4eba\u683c\uff1a\u90bb\u5c45\u4e4b\u95f4\u4e0d\u8ba4\u8bc6\uff1b\u706b\u8f66\u4e0a\u964c\u751f\u4eba\u7684\u4eb2\u5bc6 Lesson 4\uff1a\u8d8a\u8f68\u884c\u4e3a\u4e0e\u793e\u4f1a\u63a7\u5236 # \u6bcf\u4e00\u4e2a\u6587\u5316\u3001\u4e9a\u6587\u5316\u53ca\u56e2\u4f53\uff0c\u90fd\u6709\u5176\u72ec\u7279\u7684\u89c4\u8303\u4f5c\u7528\u4e8e\u5b83\u4eec\u89c6\u4e3a\u6070\u5f53\u7684\u884c\u4e3a\u3002 \u5927\u90e8\u5206\u4eba\u5c0a\u91cd\u5e76\u63a5\u53d7\u57fa\u672c\u7684\u793e\u4f1a\u89c4\u8303\uff0c\u5e76\u5047\u8bbe\u5176\u4ed6\u4eba\u4e5f\u540c\u6837\u5982\u6b64\u3002 \u4eba\u4eec\u5982\u679c\u6536\u5230\u53e6\u4e00\u5957\u5173\u4e8e\u884c\u4e3a\u7684\u51b2\u7a81\u8baf\u606f\uff0c\u5bf9\u4e8e\u6709\u6548\u7684\u793e\u4f1a\u63a7\u5236\u5c06\u9020\u6210\u6311\u6218\u3002 \u529f\u80fd\u8bba\u7684\u89c2\u70b9\u662f\uff0c\u82e5\u56e2\u4f53\u6216\u793e\u4f1a\u60f3\u8981\u7ee7\u7eed\u5b58\u6d3b\uff0c\u4eba\u4eec\u5fc5\u987b\u80fd\u591f\u5c0a\u91cd\u793e\u4f1a\u89c4\u8303\uff0c\u5f53\u6709\u4f17\u591a\u6210\u5458\u6311\u6218\u65e2\u5b9a\u9002\u5f53\u7684\u884c\u4e3a\u6807\u51c6\uff0c\u8be5\u793e\u4f1a\u5c06\u65e0\u6cd5\u8fd0\u4f5c\u3002 \u51b2\u7a81\u8bba\u5219\u8ba4\u4e3a\u793e\u4f1a\u987a\u5229\u8fd0\u4f5c\u53ea\u662f\u6709\u5229\u4e8e\u6709\u6743\u529b\u7684\u56e2\u4f53\uff0c\u5bf9\u5176\u4ed6\u56e2\u4f53\u4e0d\u5229\u7684\u72b6\u51b5\u3002 \u9f13\u52b1\u7b26\u5408\u4e0e\u670d\u4ece\u53ca\u9632\u6b62\u8fdd\u80cc\u793e\u4f1a\u89c4\u8303\u7684\u5956\u60e9\u5236\u5ea6\uff0c\u662f\u901a\u8fc7\u6b63\u5f0f\u548c\u975e\u6b63\u5f0f\u7684\u793e\u4f1a\u63a7\u5236\u6765\u6267\u884c\u3002 \u6b63\u5f0f\u793e\u4f1a\u63a7\u5236\u7531\u5177\u6709\u6743\u529b\u7684\u5355\u4f4d\u6267\u884c\u3002\u975e\u6b63\u5f0f\u793e\u4f1a\u63a7\u5236\uff0c\u5219\u5305\u542b\u5fae\u7b11\u3001\u76b1\u7709\u3001\u5632\u7b11\uff0c\u7b49\u3002\u6709\u4e9b\u89c4\u8303\u56e0\u4e3a\u5bf9\u793e\u4f1a\u975e\u5e38\u91cd\u8981\uff0c\u800c\u88ab\u5f62\u5f0f\u5316\u4e3a\u6cd5\u5f8b\u3002 \u8d8a\u8f68\u884c\u4e3a\u662f\u7834\u574f\u89c4\u8303\u6216\u8fdd\u53cd\u7fa4\u4f53\u4e0e\u793e\u4f1a\u671f\u671b\u7684\u884c\u4e3a\u3002 \u529f\u80fd\u8bba\u8005\u3002\u6d82\u5c14\u5e72\u8ba4\u4e3a\uff0c\u6587\u5316\u8109\u7edc\u5236\u5b9a\u7684\u60e9\u7f5a\u6709\u5229\u4e8e\u5b9a\u4e49\u53ef\u63a5\u53d7\u7684\u884c\u4e3a\uff0c\u5e76\u56e0\u800c\u6709\u52a9\u4e8e\u793e\u4f1a\u7a33\u5b9a\u3002 \u4ed6\u4ecb\u7ecd\u4e86\u5931\u8303\u4e00\u8bcd\uff0c\u7528\u4ee5\u63cf\u8ff0\u5f53\u793e\u4f1a\u63a7\u5236\u5bf9\u4e2a\u4eba\u884c\u4e3a\u5931\u6548\u65f6\uff0c\u793e\u4f1a\u6240\u7ecf\u5386\u7684\u5931\u5e8f\u611f\u3002 \u9ed8\u987f\u8c03\u6574\u4e86\u6d82\u5c14\u5e72\u7684\u5931\u8303\u6982\u5ff5\uff0c\u4ee5\u89e3\u91ca\u4eba\u4eec\u4e3a\u4ec0\u4e48\u63a5\u53d7\u6216\u62d2\u7edd\u793e\u4f1a\u76ee\u6807\uff0c\u53c8\u4e3a\u4ec0\u4e48\u63a5\u53d7\u793e\u4f1a\u6240\u8ba4\u53ef\u7684\u4ed6\u4eec\u7528\u6765\u6ee1\u8db3\u76ee\u6807\u7684\u624b\u6bb5\u3002 \u4ed6\u53d1\u5c55\u4e86\u8d8a\u8f68\u7684\u5931\u8303\u7406\u8bba\uff0c\u5047\u5b9a\u4e94\u79cd\u57fa\u672c\u9002\u5e94\u5f62\u5f0f\uff0c\u4ece\u4f17\uff0c\u521b\u65b0\uff0c\u4eea\u5f0f\u4e3b\u4e49\uff0c\u9000\u7f29\uff0c\u53cd\u6297\u3002 \u4e92\u52a8\u8bba\u89c6\u89d2\u3002\u6ce8\u91cd\u65e5\u5e38\u751f\u6d3b\u884c\u4e3a\u7684\u4e92\u52a8\u8bba\u5b66\u8005\u9488\u5bf9\u72af\u7f6a\u884c\u4e3a\u63d0\u51fa\u4e86\u6587\u5316\u4f20\u9012\u548c\u793e\u4f1a\u89e3\u4f53\u7406\u8bba\u4e24\u79cd\u89e3\u91ca\u3002 \u6587\u5316\u4f20\u9012\u5b66\u6d3e\u5f3a\u8c03\u4e2a\u4eba\u901a\u8fc7\u4e0e\u5176\u4ed6\u4eba\u7684\u4e92\u52a8\uff0c\u5b66\u4e60\u72af\u7f6a\u884c\u4e3a\uff0c\u5305\u62ec\u72af\u7f6a\u52a8\u673a\u3001\u5bf9\u7f6a\u884c\u7684\u5408\u7406\u89e3\u91ca\u3002 \u540e\u4e00\u79cd\u8ba4\u4e3a\uff0c\u72af\u7f6a\u548c\u8d8a\u8f68\u884c\u4e3a\u7684\u589e\u52a0\u53ef\u4ee5\u5f52\u7ed3\u4e3a\u50cf\u5bb6\u5ead\u3001\u5b66\u6821\u3001\u6559\u4f1a\u548c\u5730\u65b9\u653f\u5e9c\u7b49\u516c\u5171\u5173\u7cfb\u548c\u793e\u4f1a\u5236\u5ea6\u7684\u6d88\u5931\u6216\u89e3\u4f53\u3002 \u6807\u7b7e\u7406\u8bba\u3002\u4e5f\u88ab\u79f0\u4e3a\u793e\u4f1a\u53cd\u5e94\u65b9\u6cd5\u3002\u5b83\u63d0\u9192\u6211\u4eec\uff0c\u662f\u6211\u4eec\u5bf9\u884c\u4e3a\u7684\u53cd\u5e94\uff0c\u800c\u4e0d\u662f\u884c\u4e3a\u672c\u8eab\u51b3\u5b9a\u4e86\u8d8a\u8f68\u884c\u4e3a\u3002 \u4e00\u4e2a\u4eba\u6240\u62e5\u6709\u7684\u4e0e\u4ed6\u4eba\u76f8\u5173\u7684\u6743\u529b\uff0c\u5bf9\u4e8e\u51b3\u5b9a\u4ed6\u6297\u62d2\u4e0d\u53d7\u6b22\u8fce\u6807\u7b7e\u7684\u80fd\u529b\uff0c\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002 \u51b2\u7a81\u7406\u8bba\u3002\u6709\u6743\u529b\u7684\u4eba\u4e3a\u4e86\u4fdd\u62a4\u81ea\u8eab\u7684\u5229\u76ca\uff0c\u5c06\u8d8a\u8f68\u884c\u4e3a\u52a0\u4ee5\u5b9a\u4e49\u4ee5\u9002\u5408\u4ed6\u4eec\u7684\u9700\u6c42\u3002 \u5c06\u5bf9\u81ea\u5df1\u6709\u5229\u7684\u8d8a\u8f68\u884c\u4e3a\u5b9a\u4e49\u5f3a\u52a0\u5230\u666e\u901a\u5927\u4f17\u4e0a\u3002 Lesson 5 \u4e0d\u5e73\u7b49\u3001\u9636\u7ea7\u548c\u793e\u4f1a\u5206\u5c42 # 5.1 \u793e\u4f1a\u5206\u5316\uff1a\u4ece\u7b80\u5355\u5230\u590d\u6742\uff0c\u4ece\u529f\u80fd\u4e00\u4f53\u5230\u793e\u4f1a\u5206\u5de5\u7684\u5206\u5316\uff0c\u4ea7\u751f\u4e86\u4e0d\u5e73\u7b49 5.2 \u57ce\u5e02\u5316\uff1a\u5bcc\u4eba\u4f4f\u5e02\u4e2d\u5fc3\uff0c\u7a77\u4eba\u4f4f\u90ca\u533a\uff0c\u5236\u5b9a\u653f\u7b56\u7684\u4eba\u63a5\u89e6\u4e0d\u5230\u9700\u8981\u5236\u5b9a\u653f\u7b56\u7684\u4eba 5.3 \u7b49\u7ea7\u3001\u79cd\u59d3\u548c\u9636\u7ea7\uff1a\u76f4\u63a5\u9020\u6210\u4e86\u4e0d\u5e73\u7b49\uff1b\u5206\u5c42\u662f\u7528\u6765\u523b\u753b\u4e0d\u5e73\u7b49\u7684 5.4 \u9636\u7ea7\uff1a1\uff09\u6d41\u52a8\uff0c2\uff09\uff08\u8d44\u672c\u4e3b\u4e49\uff09\u7ecf\u6d4e\u4e3a\u57fa\u7840\uff0c3\uff09\u83b7\u81f4\u7684\uff0c4\uff09\u6ca1\u6709\u4eba\u8eab\u4f9d\u9644\u5173\u7cfb 5.5 \u9a6c\u514b\u601d\uff1a\u7ecf\u6d4e\u4e0a\u4e0d\u5e73\u7b49\uff1b\u97e6\u4f2f\uff1a\u9664\u4e86\u7ecf\u6d4e\uff0c\u8fd8\u6709\u7ecf\u6d4e\u9636\u7ea7\uff0c\u793e\u4f1a\u5730\u4f4d\uff0c\u653f\u6cbb\u515a\u6d3e\uff1b 5.6 \u793e\u4f1a\u5206\u5c42\uff1a\u7ecf\u6d4e\u5c42\u9762\uff1b\u793e\u4f1a\u5c42\u9762\uff1b\u653f\u6cbb\u5c42\u9762\uff08\u6536\u5165\u3001\u58f0\u671b\u548c\u6743\u529b\uff09 5.7 \u529f\u80fd\u7406\u8bba\uff1a\u793e\u4f1a\u5206\u5c42\u662f\u586b\u5145\u662f\u793e\u4f1a\u6b63\u5e38\u8fd0\u8f6c\u6240\u5fc5\u8981\u7684 5.8 \u6ce8\u610f\uff1a\u529f\u80fd\u7406\u8bba\u548c\u51b2\u7a81\u7406\u8bba\u7684\u5206\u522b\u63a2\u8ba8 5.9 \u798f\u5229\u56fd\u5bb6\uff1a\u4ece\u8fb9/\u534a\u8fb9\u7f18\u533a\u83b7\u5927\u91cf\u5229\u6da6\u7ed9\u5458\u5de5\uff1b\u4f46\u65b0\u81ea\u7531\u4e3b\u4e49\u53c8\u5438\u4e86\u53d1\u5c55\u4e2d\u56fd\u5bb6\u8840 5.10 \u6574\u4f53\u7a00\u7f3a\uff0c\u4e2a\u4f53\u532e\u4e4f 5.11 \u4e2d\u56fd\u793e\u4f1a\u7684\u4e0d\u5e73\u7b49\uff0c1\uff09\u5e73\u7b49\u7684\u8861\u91cf\uff1a\u57fa\u5c3c\u7cfb\u6570\u6539\u9769\u5f00\u653e\u4e4b\u540e\u9ad8\u4e8e\u6539\u9769\u5f00\u653e\u4e4b\u524d\uff0c2\uff09\u57ce\u4e61\u4e0d\u5e73\u7b49 Lesson 6 \u6027\u548c\u6027\u522b # 6.1 \u6027 6.1.1 \u7537\u56e0\u6027\u800c\u60c5\uff0c\u5973\u56e0\u60c5\u800c\u6027\uff1a\u7cbe\u5b50\u5375\u5b50 vs \u6210\u957f\u7684\u73af\u5883\u56e0\u7d20 6.1.2 \u4eba\u7684\u6027\u884c\u4e3a\u5145\u6ee1\u4e86\u610f\u4e49\uff0c\u662f\u7b26\u53f7\u5316\u7684 6.2 \u6027\u522b 6.2.1 \u7537\u5973\uff1a\u751f\u7269\u4e0a\uff0c\u6210\u957f\u7684\u56e0\u7d20 6.2.2 LGBT\uff1a\u5973\u540c\uff0c\u7537\u540c\uff0c\u53cc\uff0c\u53d8 6.3 \u6027\u611f\uff0c\u6027\u6ee1\u8db3\u611f\u7b49 6.3.1 \u751f\u7269\u53cd\u5e94\uff0c\u793e\u4f1a\u53d8\u8fc1\uff0c\u793e\u4f1a\u6587\u5316 6.4 \u6027\u884c\u4e3a 6.4.1 \u4eba\u4eec\u4e3b\u5bfc\u770b\u6cd5\u548c\u5177\u4f53\u884c\u4e3a\u5f80\u5f80\u4e0d\u540c\uff1a\u5993\u9662 vs \u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\uff0c\u6027\u4e0e\u751f\u80b2\u6709\u5173 6.4.2 \u91d1\u8d5b\uff1a\u5f88\u591a\u7537\u4eba\u5ad6\u5a3c\uff0c\u5f88\u591a\u4eba\u6709\u5a5a\u524d\u6027\u884c\u4e3a\uff08\u7ed3\u679c\u504f\u9ad8\uff09 6.5 \u540c\u6027\u604b 6.5.1 \u5f3a\u8c03\u751f\u7269\u6027\uff1a\u6bcd\u4eb2\u5b50\u5bab\u6fc0\u7d20\u5206\u6ccc 6.5.2 \u57fa\u672c\u7ed3\u8bba\uff1a\u751f\u7269\u6027 + \u793e\u4f1a\u5b66\u5171\u540c\u4f5c\u7528 6.5.3 \u540c\u6027\u604b\u76844\u4e2a\u7c7b\u578b\uff1a\u5076\u7136\u6027\uff0c\u60c5\u5883\u6027\u6d3b\u52a8\uff0c\u4eba\u683c\u5316\u540c\u6027\u604b 6.6 \u6027\u522b 6.6.1 \u793e\u4f1a\u6027\u522b\uff08gender\uff09\uff1a\u6210\u957f\u4e3a\u4e00\u4e2a\u7537\u4eba\u6216\u8005\u5973\u4eba 6.6.2 \u89d2\u8272\u5206\u5de5\uff1a\u4e5f\u662f\u751f\u7269\u6027\u548c\u793e\u4f1a\u6027\u5171\u540c\u4f5c\u7528\u7684\u7ed3\u679c 6.6.3 \u5eb7\u5948\u5c14\uff1a\u7537\u6027\u628a\u6301\u7684\u793e\u4f1a\u6743\u529b\uff0c\u5982\u4f55\u521b\u9020\u6027\u522b\u4e0d\u5e73\u7b49 6.6.4 \u5eb7\u5948\u5c14\uff1a\u793e\u4f1a\u4e0a\u7684\u52b3\u52a8\u3001\u6743\u529b\u548c\u503e\u6ce8\u9020\u5c31\u4e86\u793e\u4f1a\u6027\u522b\u5173\u7cfb 6.6.4.1 \u5bb6\u5ead\u5185\u90e8\u52b3\u52a8\uff0c\u52b3\u52a8\u529b\u5e02\u573a\u4e0a\u7684\u5206\u5de5 6.6.4.2 \u56fd\u5bb6\u673a\u5668\u3001\u610f\u8bc6\u5f62\u6001\u56fd\u5bb6\u673a\u5668\u7b49 6.6.4.3 \u5a5a\u59fb\u4e2d\u7684\u6295\u5165\u3001\u80b2\u513f\u7b49 6.6.5 \u9738\u6743\u5f0f\uff1a\u5171\u8c0b\u7537\u6027+\u53d7\u5f3a\u8c03\u7684\u5973\u6027\u7279\u5f81\uff08\u6027+\u6bcd\u7231\uff09 6.6.6 \u7537\u540c\u4f1a\u6709\u4e00\u4e9b\u5171\u8c0b\u7537\u6027\u7684\u53cd\u7279\u5f81\uff0c\u53cd\u6297\u7684\u5973\u6027\u7279\u5f81\u5219\u5305\u62ec\u5973\u540c\u3001\u8001\u5904\u5973\u3001\u5973\u5deb\u7b49 6.6.7 \u4eba\u7c7b\u662f\u53ef\u4ee5\u4e0d\u65ad\u8c03\u6574\u81ea\u5df1\u6027\u522b\u7684\u89c2\u70b9\u7684 6.6.8 \u5eb7\u5948\u5c14\uff1a\u793e\u4f1a\u6027\u522b\u5173\u7cfb\u6b63\u5728\u9762\u4e34\u7740\u5371\u673a 6.6.8.1 \u5236\u5ea6\u6027\u5371\u673a\uff1a\u56fd\u5bb6\u548c\u5bb6\u5ead\u6b63\u5728\u74e6\u89e3 6.6.8.2 \u6027\u7684\u5371\u673a\uff1a\u5973\u6027\u548c\u540c\u6027\u604b\u8005\u7684\u529b\u91cf\u5728\u4e0d\u65ad\u589e\u957f 6.6.8.3 \u5229\u76ca\u5f62\u6001\u5371\u673a\uff1a\u5df2\u5a5a\u5973\u6027\u6743\u529b\u3001\u7537\u6027\u4e2d\u7684\u53cd\u6027\u522b\u6b67\u89c6\uff08\u5546\u54c1\u5316\u7684\u6b63\u9762\u610f\u4e49\uff09 Lesson 7 \u6743\u529b\u3001\u6743\u5a01\u548c\u56fd\u5bb6 # 7.1. \u653f\u6cbb\uff1a\u4e2a\u4f53\u4e2a\u4eba\u6216\u8005\u7fa4\u91cc\uff0c\u83b7\u53d6\u6216\u884c\u4f7f\u6743\u529b\u6216\u83b7\u53d6\u6743\u5a01\u7684\u8fc7\u7a0b 7.2. \u6743\u5229\u548c\u6743\u529b\uff1a(\u5362\u6656\u4e34\u8bb2\u5f97\u5f88\u6df7\u4e71) \u6743\u529b\uff1a\u662f\u4e00\u79cd\u793e\u4f1a\u5173\u7cfb\uff0c\u6709\u53cd\u6297\u7684\u53ef\u80fd\u6027\u4ecd\u7136\u80fd\u591f\u5b9e\u73b0\u81ea\u5df1\u7684\u610f\u5fd7 7.2.1 \u6743\u529b\u8d2f\u5f7b\u7684\u57fa\u7840 7.2.1.1 \u6743\u529b\u7684\u8d44\u6e90\uff1a\u91d1\u94b1\uff0c\u66b4\u529b\uff0c\u667a\u6167\uff0c\u7f8e\u8c8c\uff0c\u54c1\u683c 7.2.2 \u6743\u529b\u5185\u6db5\u7740\u51b2\u7a81 7.3 \u6743\u5a01\uff1a\u6743\u5a01\u662f\u4e00\u79cd\u6743\u529b\uff0c\u4f46\u5e76\u4e0d\u662f\u6240\u6709\u7684\u6743\u529b\u90fd\u662f\u6743\u5a01\uff0c\u88ab\u770b\u4f5c\u662f\u6b63\u5f53\u7684\u6743\u529b 7.4.1 \u4e09\u6743\u529b\u6b63\u5f53\u6027\uff1a\u4f20\u7edf\uff08\u793c\uff09\uff0c\u6743\u5a01\uff08\u9886\u8896\u4eba\u683c + \u65f6\u4ee3\uff09\uff0c\u6cd5\u7406\uff08\u6cd5\u5f8b\uff09 7.4.2 \u4e09\u79cd\u6b63\u5f53\u6027\u5f80\u5f80\u4e0d\u662f\u72ec\u7acb\u5b58\u5728\u7684 7.4.3 \u7406\u6027\u662f\u7262\u7b3c\uff0c\u662f\u5236\u9020charisma\u6743\u5a01\u7684\u52a8\u56e0 7.4 \u798f\u67ef\uff1a\u6743\u529b\u7684\u8fd0\u4f5c\u4f53\u73b0\u5728\u793e\u4f1a\u7684\u6240\u6709\u5c42\u9762\uff0c\u6bd4\u5982\u6743\u529b\u548c\u77e5\u8bc6\u662f\u76f8\u4e92\u5de9\u56fa\u7684 7.5 \u56fd\u5bb6 7.5.1 \u6c11\u4e3b\u56fd\u5bb6\uff1a\u7edd\u5927\u591a\u6570\u56fd\u5bb6\u8ba4\u4e3a\u662f\u5355\u4e00\u6c11\u65cf 7.5.2 \u4e3b\u6743\uff1a\u653f\u5e9c\uff0c\u5730\u57df\uff0c\u6743\u5a01\uff0c\u81f3\u9ad8\u65e0\u4e0a\uff0ceg\u6cbb\u5916\u6cd5\u6743 7.5.3 \u6c11\u4e3b\u4e3b\u4e49\uff1a\u60f3\u8c61\u7684\u5171\u540c\u4f53\uff0c\u662f\u4f34\u968f\u7740\u4e3b\u6743\u7684\u610f\u8bc6 7.6 \u653f\u6cbb\u4f53\u5236 7.6.1 \u5a01\u6743\u4f53\u5236\uff1a\u7edf\u6cbb\u662f\u5c11\u6570\u4eba\u7684\u6d3b\u52a8\uff1b\u541b\u4e3b\u5236\uff0c\u5be1\u5934\u5236\uff0c\u72ec\u88c1\u5236\uff0c\u6781\u6743\u4f53\u5236 7.6.2 \u6c11\u4e3b\u4f53\u5236\uff1a\u4e2a\u4eba\uff0c\u516c\u6c11\uff0c\u6295\u7968\uff0c\u5468\u671f\uff0c\u4e2a\u4eba\u6743\u5229\uff1a\u8a00\u8bba\u3001\u51fa\u7248\u3001\u96c6\u4f1a\u548c\u7ec4\u7ec7 7.6.3 \u67cf\u6797\u5899\uff0c\u5386\u53f2\u7684\u7ec8\u7ed3\uff0c\u4e1c\u6b27\u5267\u53d8 7.6.4 \u6c11\u4e3b\u4f53\u5236\u5728\u5168\u7403\u7684\u6269\u6563\uff1a\u5168\u7403\u5316\uff0c\u4fc3\u8fdb\u6c11\u4e3b\u5316\u8fdb\u7a0b\uff0c\u4e16\u754c\u8d44\u672c\u4e3b\u4e49\u6269\u5c55 7.7 \u4ee3\u8bae\u6c11\u4e3b\u7684\u56f0\u5883 7.7.1 \u6295\u7968\u7387\u5728\u8d70\u4f4e\uff1a\u4f3c\u4e4e\u5bf9\u4e2d\u56fd\u6c11\u4e3b\u7684\u7814\u7a76\u7eaf\u7cb9\u505c\u7559\u5728\u610f\u8bc6\u5f62\u6001\u7684\u5bf9\u6297\u548c\u65e0\u77e5\u4e2d 7.7.2 \u4e2d\u56fd\u6a21\u5f0f\u7684\u7f3a\u70b9\uff1a\u4e0d\u4ec5\u4ec5\u662f\u7ecf\u6d4e\u589e\u957f Lesson 8 \u5a5a\u59fb\u4e0e\u5bb6\u5ead # 8.1 \u539f\u751f\u5bb6\u5ead vs \u81ea\u5df1\u7684\u5bb6\u5ead 8.2 \u4ec0\u4e48\u662f\u5bb6\u5ead\uff1a\u7e41\u884d\uff08\u751f\u7406\uff09\uff0c\u590d\u6742\u7684\u793e\u4f1a\u56e0\u7d20\uff08\u793e\u4f1a\uff09 8.3 \u5bb6\u5ead\u7684\u666e\u904d\u529f\u80fd\uff1a\u4eba\u53e3\u7e41\u884d\uff0c\u8c03\u8bd5\u6027\u5173\u7cfb\uff0c\u751f\u4ea7\u4e0e\u6d88\u8d39\uff0c\u513f\u7ae5\u7684\u793e\u4f1a\u5316\uff0c\u5c06\u4eba\u81f3\u4e8e\u4e00\u4e2a\u793e\u4f1a\u7ed3\u6784\u4e4b\u4e2d 8.4 \u5bb6\u5ead\u7684\u7c7b\u578b\uff1a\u6838\u5fc3\uff0c\u4e3b\u5e72\uff0c\u8054\u5408\uff0c\u5176\u4ed6\uff0c\u4e0e\u5de5\u4e1a\u5316\u7684\u5173\u7cfb\uff08\u4eba\u53e3\u6d41\u52a8\uff09 8.5 \u897f\u65b9\u5bb6\u5ead\u7684\u6f14\u53d8\uff1a\u6269\u5c55\u5bb6\u5ead\u5230\u6838\u5fc3\u5bb6\u5ead 8.5.1 16\u4e16\u7eaa\uff1a\u5d4c\u5165\u793e\u533a\uff1a\u5bb6\u5ead\u4eb2\u5bc6\u4e0d\u662f\u9996\u8981\uff0c\u5a5a\u59fb\u5c5e\u4e8e\u7236\u6bcd\u3001\u5176\u4ed6\u4eb2\u5c5e\uff0c\u6b7b\u4ea1\u7387\u9ad8 8.5.2 18\u4e16\u7eaa\uff1a\u9010\u6e10\u53d1\u5c55\u6210\u6211\u4eec\u73b0\u5728\u719f\u6089\u7684\u5f62\u6001\uff0c\u4ee5\u60c5\u611f\u4e3a\u7ebd\u5e26\uff0c\u9009\u62e9\u7686\u4e3a\u5bb6\u5ead\uff1a\u5bc6\u5207\uff0c\u9ad8\u5ea6\u7684\u9690\u79c1\uff0c \u5f3a\u8c03\u629a\u517b\u5b69\u5b50\u7684\u91cd\u8981\u6027, \u51fa\u73b0\u4e86\u6709\u4ef7\u503c\u7684\u5916\u90e8\u5de5\u4f5c\u548c\u65e0\u4ef7\u503c\u7684\u5bb6\u52a1\u52b3\u52a8 -> \u5bb6\u5ead\u4e3b\u5987 8.6 \u5bb6\u5ead\u5185\u90e8\u7684\u4e0d\u5e73\u7b49\uff1a\u6027\u522b\u4e0d\u5e73\u7b49\uff08\u5bb6\u52a1\uff09\uff0c\u5bb6\u5ead\u66b4\u529b 8.7 \u4e2d\u56fd\u5bb6\u5ead\u7684\u6f14\u53d8\uff1a1\uff09\u751f\u80b2\uff0c2\uff09\u5a46\u5a46\u548c\u513f\u5b50\uff0c3\uff09\u9752\u697c\u6587\u5316\uff08\u4e0d\u4ec5\u4ec5\u662f\u8eab\u4f53\u4ea4\u6613\u8fd8\u6709\u60c5\u611f\uff09\uff0c4\uff09\u6e05\u672b\u3001\u65b0\u6587\u5316\u8fd0\u52a8\u3001\u57ce\u5e02\u5316 8.8 \u65b0\u65f6\u4ee3\u5bb6\u5ead\u5371\u673a\uff1a\u79bb\u5a5a\u7387\u9ad8\uff0c\u5f69\u793c\uff0c\u6027\u522b/\u5bb6\u5ead\u4e0d\u5e73\u7b49\uff0c\u5b50\u5973\u793e\u4f1a\u5316\uff0c\u8d22\u4ea7\u7ee7\u627f Lesson 8 \u57ce\u5e02\u4e0e\u793e\u533a\uff08\u4e0d\u770b\u4e86\uff09 # Lesson 9 \u52b3\u52a8\u4e0e\u7ecf\u6d4e\u751f\u6d3b # 9.1 \u52b3\u52a8\u4e0e\u62a5\u916c\u5de5\u4f5c\uff1a\u5de5\u4f5c\u53ea\u662f\u8c0b\u751f\u7684\u4e00\u79cd\u65b9\u5f0f\uff1beg\uff0c\u5bb6\u52a1\u52b3\u52a8 9.2 \u5c31\u4e1a\u57fa\u672c\u5185\u5bb9\uff1a\u52b3\u52a8\u80fd\u529b\uff0c\u6709\u76ca\u4e8e\u793e\u4f1a\u88ab\u793e\u4f1a\u6240\u627f\u8ba4\u7684\u804c\u4e1a 9.3 \u7ecf\u6d4e\uff1a\u5546\u54c1\u5982\u4f55\u751f\u6210\u548c\u5206\u914d\u95ee\u9898 9.3.1 \u4e92\u60e0\u7ecf\u6d4e 9.3.2 \u5728\u5206\u914d\u7ecf\u6d4e\uff1a\u8ba1\u5212\u7ecf\u6d4e 9.3.3 \u8d44\u672c\u4e3b\u4e49\u7ecf\u6d4e\uff1a\u79c1\u6709\u5236\uff0c\u5229\u6da6\uff0c\u7ade\u4e89\uff0c\u81ea\u7531\u5e02\u573a 9.3.4 \u793e\u4f1a\u4e3b\u4e49\u5236\u5ea6\uff1a\u516c\u6709\u5236\uff0c\u5408\u4f5c\uff0c\u5206\u914d 9.3.5 \u52b3\u52a8\u7684\u793e\u4f1a\u7ec4\u7ec7\uff1a\u4e2a\u4f53\uff0c\u6d41\u6c34\u7ebf\uff0c\u79d1\u5c42\u7ba1\u7406\uff0c\u5de5\u4f1a\uff0c\u6700\u4f4e\u5de5\u8d44\u6807\u51c6\uff0c\u52b3\u52a1\u6d3e\u9063","title":"2022 02 08 introduction to sociality"},{"location":"posts/2022-02-08-introduction-to-sociality/#lesson-1","text":"\u6982\u8bba\u8bfe\uff0c\u8bb2\u8ff0\u793e\u4f1a\u5b66\u7684\u5404\u4e2a\u89d2\u5ea6 \u793e\u4f1a\u5b66\u80fd\u548c\u7ecf\u6d4e\u5b66\u53ca\u653f\u6cbb\u5b66\u533a\u5206\u5f00 \u793e\u4f1a\u5b66\u7684\u6982\u5ff5\u90fd\u5b58\u5728\u7740\u8bf8\u591a\u4e89\u8bba \u4ece\u5386\u53f2\u7684\u89d2\u5ea6\u770b\u793e\u4f1a\u5b66 \u5b54\u5fb7\uff1a\u5b9e\u8bc1\u54f2\u5b66\uff0c\u793e\u4f1a\u7269\u7406\u5b66 \uff08\u5076\u7136\u548c\u53ef\u7406\u89e3\u6027\uff09 \u79d1\u5b66\u53d1\u73b0\u548c\u542f\u8499\u8fd0\u52a8 \u6cd5\u56fd\u5927\u9769\u547d\u548c\u5de5\u4e1a\u9769\u547d \u9a6c\u514b\u601d\uff0c\u6d82\u5c14\u5e72\uff0c\u97e6\u4f2f \u89e3\u51b3\u793e\u4f1a\u5371\u673a\uff08\u7406\u89e3\u793e\u4f1a\u5371\u673a\uff09 \u9636\u7ea7\u5206\u6790\uff0c\u793e\u4f1a\u662f\u4e00\u4e2a\u6574\u4f53 + \u793e\u4f1a\u662f\u5916\u5728\u4e8e\u4e2a\u4f53\u5b58\u5728\u7684\uff0c\u8d44\u672c\u4e3b\u4e49\u8d77\u6e90\u7684\u7cbe\u795e\u6c1b\u56f4 + \u79d1\u5c42\u5236\uff08\u5de5\u5177\u7406\u6027+\u4ef7\u503c\u7406\u6027\uff09+ \u793e\u4f1a\u5206\u5c42 \u51b2\u7a81\u7406\u8bba\uff0c\u7ed3\u6784\u529f\u80fd\u4e3b\u4e49\uff0c\u7b26\u53f7\u4e92\u52a8\u8bba","title":"Lesson 1"},{"location":"posts/2022-02-08-introduction-to-sociality/#lesson-2","text":"\u793e\u4f1a\u8003\uff1a\u5c0f\u5230\u6751\u5e84\uff0c\u5927\u5230\u56fd\u5bb6\uff1b\u5177\u4f53\u4e0e\u62bd\u8c61\uff1b\u7cfb\u7edf\u6a21\u578b\uff0c\u4e92\u52a8\u6a21\u578b \u6587\u5316\u8003\uff1a\u4e00\u4e2a\u793e\u4f1a\u6216\u7fa4\u91cc\u5171\u540c\u627f\u8ba4\u7684\u4ef7\u503c\u89c2\uff0c\u9075\u4ece\u7684\u89c4\u8303\uff0c\u8054\u901a\u4ed6\u4eec\u521b\u9020\u7684\u7269\u8d28\u4ea7\u54c1 \u53cd\u5bf9\u4e3b\u6d41\u6587\u5316\u7684\uff1a\u5b09\u76ae\u58eb\uff1b\u4e9a\u6587\u5316 \u6587\u5316\u7684\u6784\u6210\uff1a\u4ef7\u503c\u89c2\uff0c\u89c4\u8303\uff08\u793e\u4f1a\u4e60\u4fd7\uff0c\u9053\u5fb7\u548c\u6cd5\u5f8b\uff09\uff0c","title":"Lesson 2\uff1a\u793e\u4f1a\u4e0e\u6587\u5316"},{"location":"posts/2022-02-08-introduction-to-sociality/#lesson-3","text":"\u793e\u4f1a\u4e92\u52a8\uff1a\u6a21\u5f0f\u5316\uff0c\u7ed3\u6784\u5316 \u793e\u4f1a\u7ed3\u6784\uff1a\u5b9a\u4e49\u5f88\u591a\uff0c\u4f46\u662f\u4e0d\u7528\u8bb0\u4f4f\uff0c\u8981\u628a\u63e1\u7279\u70b9 2.1 \u793e\u4f1a\u5730\u4f4d 2.1.1 \u5148\u8d4b\u5730\u4f4d\uff1a\u51fa\u751f\u65f6\u83b7\u5f97\u7684\u5730\u4f4d\uff1a\u751f\u7406\u6027\u522b\uff0c\u4eba\u79cd\uff0c\u79cd\u65cf\uff1b\u6210\u5c31\u5730\u4f4d\uff1a 2.1.2 \u4e3b\u5bfc\u5730\u4f4d\uff08\u6211\u4e0d\u613f\u610f\u522b\u4eba\u4ee5xxx\u770b\u6211\uff0c\u4f46\u662f\uff09 2.1.3 \u5b9a\u4f4d\u4e1b\uff1a\u4e00\u4e2a\u4eba\u8eab\u4e0a\u7684\u591a\u79cd 2.2 \u793e\u4f1a\u89d2\u8272\uff1a\u793e\u4f1a\u5730\u4f4d+\u522b\u4eba\u671f\u671b\u7684\u884c\u4e3a 2.2.1 \u89d2\u8272\u7d27\u5f20\u548c\u51b2\u7a81\uff1a\u89d2\u8272\u4e4b\u95f4\u548c\u89d2\u8272\u5185\u90e8\u77db\u76fe\uff0c\u9632\u6b62\u89d2\u8272\u7684\u6b63\u5e38\u8fdb\u884c 2.3 \u793e\u4f1a\u884c\u52a8 vs \u793e\u4f1a\u884c\u4e3a 2.3.1 \u793e\u4f1a\u884c\u52a8\uff1a\u884c\u52a8\u65f6\u8003\u8651\u5176\u4ed6\u4eba\uff1a\u4ed6\u4eba\u6307\u5411\u7684 2.3.2 \u793e\u4f1a\u884c\u4e3a\uff1a\u66f4\u5e7f\u6cdb\u7684\u3001\u4e00\u822c\u7684\u884c\u4e3a 3 \u793e\u4f1a\u4e92\u52a8\uff1a\u4e2a\u4f53\u4e4b\u95f4\u7684\u4efb\u4f55\u5f62\u5f0f\u7684\u793e\u4f1a\u63a5\u89e6 3.1 \u719f\u4eba\u793e\u4f1a\u3001\u964c\u751f\u4eba\u793e\u4f1a 3.2 \u53cd\u5e94\u6027\u60ca\u547c 3.3 \u793e\u4f1a\u4e92\u52a8\u7684\u7814\u7a76\u5f88\u6709\u610f\u4e49 3.4 \u5e38\u4eba\u65b9\u6cd5\u5b66\uff1a\u666e\u901a\u4eba\u7684\u793e\u4f1a\u4e92\u52a8\uff1a\u6ca1\u6709\u8a00\u660e\u7684\u80cc\u666f\u77e5\u8bc6 3.5 \u65e0\u7126\u70b9\u7684\u4e92\u52a8\uff1a\u4e92\u76f8\u89c9\u5bdf\uff1a\u98df\u5802\u5403\u996d\uff0c\u8def\u4e0a\u8d70\u8def\uff1b\u6709\u7126\u70b9\u4e92\u52a8\uff1a\u63a5\u89e6 3.6 \u7b26\u53f7\u4e92\u52a8\u8bba\uff1a\u8fd0\u7528\u7b26\u53f7\uff1b\u79e9\u5e8f\u662f\u8fd0\u52a8\u7684\uff1b\u4e16\u754c\u7684\u4e92\u52a8\uff1b\u76ee\u7684\u662f\u53d1\u73b0\u6f5c\u85cf\u7684\u6a21\u5f0f 3.7 \u6ce8\u610f\u4e92\u52a8\uff08\u7b26\u53f7\u4e92\u52a8\u8bba\uff09\u662f\u4e0e\u7ed3\u6784\u5e76\u884c\uff08\u7ed3\u6784\u529f\u80fd\u4e3b\u4e49\uff09\u7684\u53e6\u4e00\u4e2a\u89d2\u5ea6 3.8 \u5927\u90fd\u5e02\u53ca\u5176\u7cbe\u795e\u4eba\u683c\uff1a\u90bb\u5c45\u4e4b\u95f4\u4e0d\u8ba4\u8bc6\uff1b\u706b\u8f66\u4e0a\u964c\u751f\u4eba\u7684\u4eb2\u5bc6","title":"Lesson 3\uff1a\u793e\u4f1a\u4e92\u52a8\u4e0e\u793e\u4f1a\u7ed3\u6784"},{"location":"posts/2022-02-08-introduction-to-sociality/#lesson-4","text":"\u6bcf\u4e00\u4e2a\u6587\u5316\u3001\u4e9a\u6587\u5316\u53ca\u56e2\u4f53\uff0c\u90fd\u6709\u5176\u72ec\u7279\u7684\u89c4\u8303\u4f5c\u7528\u4e8e\u5b83\u4eec\u89c6\u4e3a\u6070\u5f53\u7684\u884c\u4e3a\u3002 \u5927\u90e8\u5206\u4eba\u5c0a\u91cd\u5e76\u63a5\u53d7\u57fa\u672c\u7684\u793e\u4f1a\u89c4\u8303\uff0c\u5e76\u5047\u8bbe\u5176\u4ed6\u4eba\u4e5f\u540c\u6837\u5982\u6b64\u3002 \u4eba\u4eec\u5982\u679c\u6536\u5230\u53e6\u4e00\u5957\u5173\u4e8e\u884c\u4e3a\u7684\u51b2\u7a81\u8baf\u606f\uff0c\u5bf9\u4e8e\u6709\u6548\u7684\u793e\u4f1a\u63a7\u5236\u5c06\u9020\u6210\u6311\u6218\u3002 \u529f\u80fd\u8bba\u7684\u89c2\u70b9\u662f\uff0c\u82e5\u56e2\u4f53\u6216\u793e\u4f1a\u60f3\u8981\u7ee7\u7eed\u5b58\u6d3b\uff0c\u4eba\u4eec\u5fc5\u987b\u80fd\u591f\u5c0a\u91cd\u793e\u4f1a\u89c4\u8303\uff0c\u5f53\u6709\u4f17\u591a\u6210\u5458\u6311\u6218\u65e2\u5b9a\u9002\u5f53\u7684\u884c\u4e3a\u6807\u51c6\uff0c\u8be5\u793e\u4f1a\u5c06\u65e0\u6cd5\u8fd0\u4f5c\u3002 \u51b2\u7a81\u8bba\u5219\u8ba4\u4e3a\u793e\u4f1a\u987a\u5229\u8fd0\u4f5c\u53ea\u662f\u6709\u5229\u4e8e\u6709\u6743\u529b\u7684\u56e2\u4f53\uff0c\u5bf9\u5176\u4ed6\u56e2\u4f53\u4e0d\u5229\u7684\u72b6\u51b5\u3002 \u9f13\u52b1\u7b26\u5408\u4e0e\u670d\u4ece\u53ca\u9632\u6b62\u8fdd\u80cc\u793e\u4f1a\u89c4\u8303\u7684\u5956\u60e9\u5236\u5ea6\uff0c\u662f\u901a\u8fc7\u6b63\u5f0f\u548c\u975e\u6b63\u5f0f\u7684\u793e\u4f1a\u63a7\u5236\u6765\u6267\u884c\u3002 \u6b63\u5f0f\u793e\u4f1a\u63a7\u5236\u7531\u5177\u6709\u6743\u529b\u7684\u5355\u4f4d\u6267\u884c\u3002\u975e\u6b63\u5f0f\u793e\u4f1a\u63a7\u5236\uff0c\u5219\u5305\u542b\u5fae\u7b11\u3001\u76b1\u7709\u3001\u5632\u7b11\uff0c\u7b49\u3002\u6709\u4e9b\u89c4\u8303\u56e0\u4e3a\u5bf9\u793e\u4f1a\u975e\u5e38\u91cd\u8981\uff0c\u800c\u88ab\u5f62\u5f0f\u5316\u4e3a\u6cd5\u5f8b\u3002 \u8d8a\u8f68\u884c\u4e3a\u662f\u7834\u574f\u89c4\u8303\u6216\u8fdd\u53cd\u7fa4\u4f53\u4e0e\u793e\u4f1a\u671f\u671b\u7684\u884c\u4e3a\u3002 \u529f\u80fd\u8bba\u8005\u3002\u6d82\u5c14\u5e72\u8ba4\u4e3a\uff0c\u6587\u5316\u8109\u7edc\u5236\u5b9a\u7684\u60e9\u7f5a\u6709\u5229\u4e8e\u5b9a\u4e49\u53ef\u63a5\u53d7\u7684\u884c\u4e3a\uff0c\u5e76\u56e0\u800c\u6709\u52a9\u4e8e\u793e\u4f1a\u7a33\u5b9a\u3002 \u4ed6\u4ecb\u7ecd\u4e86\u5931\u8303\u4e00\u8bcd\uff0c\u7528\u4ee5\u63cf\u8ff0\u5f53\u793e\u4f1a\u63a7\u5236\u5bf9\u4e2a\u4eba\u884c\u4e3a\u5931\u6548\u65f6\uff0c\u793e\u4f1a\u6240\u7ecf\u5386\u7684\u5931\u5e8f\u611f\u3002 \u9ed8\u987f\u8c03\u6574\u4e86\u6d82\u5c14\u5e72\u7684\u5931\u8303\u6982\u5ff5\uff0c\u4ee5\u89e3\u91ca\u4eba\u4eec\u4e3a\u4ec0\u4e48\u63a5\u53d7\u6216\u62d2\u7edd\u793e\u4f1a\u76ee\u6807\uff0c\u53c8\u4e3a\u4ec0\u4e48\u63a5\u53d7\u793e\u4f1a\u6240\u8ba4\u53ef\u7684\u4ed6\u4eec\u7528\u6765\u6ee1\u8db3\u76ee\u6807\u7684\u624b\u6bb5\u3002 \u4ed6\u53d1\u5c55\u4e86\u8d8a\u8f68\u7684\u5931\u8303\u7406\u8bba\uff0c\u5047\u5b9a\u4e94\u79cd\u57fa\u672c\u9002\u5e94\u5f62\u5f0f\uff0c\u4ece\u4f17\uff0c\u521b\u65b0\uff0c\u4eea\u5f0f\u4e3b\u4e49\uff0c\u9000\u7f29\uff0c\u53cd\u6297\u3002 \u4e92\u52a8\u8bba\u89c6\u89d2\u3002\u6ce8\u91cd\u65e5\u5e38\u751f\u6d3b\u884c\u4e3a\u7684\u4e92\u52a8\u8bba\u5b66\u8005\u9488\u5bf9\u72af\u7f6a\u884c\u4e3a\u63d0\u51fa\u4e86\u6587\u5316\u4f20\u9012\u548c\u793e\u4f1a\u89e3\u4f53\u7406\u8bba\u4e24\u79cd\u89e3\u91ca\u3002 \u6587\u5316\u4f20\u9012\u5b66\u6d3e\u5f3a\u8c03\u4e2a\u4eba\u901a\u8fc7\u4e0e\u5176\u4ed6\u4eba\u7684\u4e92\u52a8\uff0c\u5b66\u4e60\u72af\u7f6a\u884c\u4e3a\uff0c\u5305\u62ec\u72af\u7f6a\u52a8\u673a\u3001\u5bf9\u7f6a\u884c\u7684\u5408\u7406\u89e3\u91ca\u3002 \u540e\u4e00\u79cd\u8ba4\u4e3a\uff0c\u72af\u7f6a\u548c\u8d8a\u8f68\u884c\u4e3a\u7684\u589e\u52a0\u53ef\u4ee5\u5f52\u7ed3\u4e3a\u50cf\u5bb6\u5ead\u3001\u5b66\u6821\u3001\u6559\u4f1a\u548c\u5730\u65b9\u653f\u5e9c\u7b49\u516c\u5171\u5173\u7cfb\u548c\u793e\u4f1a\u5236\u5ea6\u7684\u6d88\u5931\u6216\u89e3\u4f53\u3002 \u6807\u7b7e\u7406\u8bba\u3002\u4e5f\u88ab\u79f0\u4e3a\u793e\u4f1a\u53cd\u5e94\u65b9\u6cd5\u3002\u5b83\u63d0\u9192\u6211\u4eec\uff0c\u662f\u6211\u4eec\u5bf9\u884c\u4e3a\u7684\u53cd\u5e94\uff0c\u800c\u4e0d\u662f\u884c\u4e3a\u672c\u8eab\u51b3\u5b9a\u4e86\u8d8a\u8f68\u884c\u4e3a\u3002 \u4e00\u4e2a\u4eba\u6240\u62e5\u6709\u7684\u4e0e\u4ed6\u4eba\u76f8\u5173\u7684\u6743\u529b\uff0c\u5bf9\u4e8e\u51b3\u5b9a\u4ed6\u6297\u62d2\u4e0d\u53d7\u6b22\u8fce\u6807\u7b7e\u7684\u80fd\u529b\uff0c\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002 \u51b2\u7a81\u7406\u8bba\u3002\u6709\u6743\u529b\u7684\u4eba\u4e3a\u4e86\u4fdd\u62a4\u81ea\u8eab\u7684\u5229\u76ca\uff0c\u5c06\u8d8a\u8f68\u884c\u4e3a\u52a0\u4ee5\u5b9a\u4e49\u4ee5\u9002\u5408\u4ed6\u4eec\u7684\u9700\u6c42\u3002 \u5c06\u5bf9\u81ea\u5df1\u6709\u5229\u7684\u8d8a\u8f68\u884c\u4e3a\u5b9a\u4e49\u5f3a\u52a0\u5230\u666e\u901a\u5927\u4f17\u4e0a\u3002","title":"Lesson 4\uff1a\u8d8a\u8f68\u884c\u4e3a\u4e0e\u793e\u4f1a\u63a7\u5236"},{"location":"posts/2022-02-08-introduction-to-sociality/#lesson-5","text":"5.1 \u793e\u4f1a\u5206\u5316\uff1a\u4ece\u7b80\u5355\u5230\u590d\u6742\uff0c\u4ece\u529f\u80fd\u4e00\u4f53\u5230\u793e\u4f1a\u5206\u5de5\u7684\u5206\u5316\uff0c\u4ea7\u751f\u4e86\u4e0d\u5e73\u7b49 5.2 \u57ce\u5e02\u5316\uff1a\u5bcc\u4eba\u4f4f\u5e02\u4e2d\u5fc3\uff0c\u7a77\u4eba\u4f4f\u90ca\u533a\uff0c\u5236\u5b9a\u653f\u7b56\u7684\u4eba\u63a5\u89e6\u4e0d\u5230\u9700\u8981\u5236\u5b9a\u653f\u7b56\u7684\u4eba 5.3 \u7b49\u7ea7\u3001\u79cd\u59d3\u548c\u9636\u7ea7\uff1a\u76f4\u63a5\u9020\u6210\u4e86\u4e0d\u5e73\u7b49\uff1b\u5206\u5c42\u662f\u7528\u6765\u523b\u753b\u4e0d\u5e73\u7b49\u7684 5.4 \u9636\u7ea7\uff1a1\uff09\u6d41\u52a8\uff0c2\uff09\uff08\u8d44\u672c\u4e3b\u4e49\uff09\u7ecf\u6d4e\u4e3a\u57fa\u7840\uff0c3\uff09\u83b7\u81f4\u7684\uff0c4\uff09\u6ca1\u6709\u4eba\u8eab\u4f9d\u9644\u5173\u7cfb 5.5 \u9a6c\u514b\u601d\uff1a\u7ecf\u6d4e\u4e0a\u4e0d\u5e73\u7b49\uff1b\u97e6\u4f2f\uff1a\u9664\u4e86\u7ecf\u6d4e\uff0c\u8fd8\u6709\u7ecf\u6d4e\u9636\u7ea7\uff0c\u793e\u4f1a\u5730\u4f4d\uff0c\u653f\u6cbb\u515a\u6d3e\uff1b 5.6 \u793e\u4f1a\u5206\u5c42\uff1a\u7ecf\u6d4e\u5c42\u9762\uff1b\u793e\u4f1a\u5c42\u9762\uff1b\u653f\u6cbb\u5c42\u9762\uff08\u6536\u5165\u3001\u58f0\u671b\u548c\u6743\u529b\uff09 5.7 \u529f\u80fd\u7406\u8bba\uff1a\u793e\u4f1a\u5206\u5c42\u662f\u586b\u5145\u662f\u793e\u4f1a\u6b63\u5e38\u8fd0\u8f6c\u6240\u5fc5\u8981\u7684 5.8 \u6ce8\u610f\uff1a\u529f\u80fd\u7406\u8bba\u548c\u51b2\u7a81\u7406\u8bba\u7684\u5206\u522b\u63a2\u8ba8 5.9 \u798f\u5229\u56fd\u5bb6\uff1a\u4ece\u8fb9/\u534a\u8fb9\u7f18\u533a\u83b7\u5927\u91cf\u5229\u6da6\u7ed9\u5458\u5de5\uff1b\u4f46\u65b0\u81ea\u7531\u4e3b\u4e49\u53c8\u5438\u4e86\u53d1\u5c55\u4e2d\u56fd\u5bb6\u8840 5.10 \u6574\u4f53\u7a00\u7f3a\uff0c\u4e2a\u4f53\u532e\u4e4f 5.11 \u4e2d\u56fd\u793e\u4f1a\u7684\u4e0d\u5e73\u7b49\uff0c1\uff09\u5e73\u7b49\u7684\u8861\u91cf\uff1a\u57fa\u5c3c\u7cfb\u6570\u6539\u9769\u5f00\u653e\u4e4b\u540e\u9ad8\u4e8e\u6539\u9769\u5f00\u653e\u4e4b\u524d\uff0c2\uff09\u57ce\u4e61\u4e0d\u5e73\u7b49","title":"Lesson 5 \u4e0d\u5e73\u7b49\u3001\u9636\u7ea7\u548c\u793e\u4f1a\u5206\u5c42"},{"location":"posts/2022-02-08-introduction-to-sociality/#lesson-6","text":"6.1 \u6027 6.1.1 \u7537\u56e0\u6027\u800c\u60c5\uff0c\u5973\u56e0\u60c5\u800c\u6027\uff1a\u7cbe\u5b50\u5375\u5b50 vs \u6210\u957f\u7684\u73af\u5883\u56e0\u7d20 6.1.2 \u4eba\u7684\u6027\u884c\u4e3a\u5145\u6ee1\u4e86\u610f\u4e49\uff0c\u662f\u7b26\u53f7\u5316\u7684 6.2 \u6027\u522b 6.2.1 \u7537\u5973\uff1a\u751f\u7269\u4e0a\uff0c\u6210\u957f\u7684\u56e0\u7d20 6.2.2 LGBT\uff1a\u5973\u540c\uff0c\u7537\u540c\uff0c\u53cc\uff0c\u53d8 6.3 \u6027\u611f\uff0c\u6027\u6ee1\u8db3\u611f\u7b49 6.3.1 \u751f\u7269\u53cd\u5e94\uff0c\u793e\u4f1a\u53d8\u8fc1\uff0c\u793e\u4f1a\u6587\u5316 6.4 \u6027\u884c\u4e3a 6.4.1 \u4eba\u4eec\u4e3b\u5bfc\u770b\u6cd5\u548c\u5177\u4f53\u884c\u4e3a\u5f80\u5f80\u4e0d\u540c\uff1a\u5993\u9662 vs \u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\uff0c\u6027\u4e0e\u751f\u80b2\u6709\u5173 6.4.2 \u91d1\u8d5b\uff1a\u5f88\u591a\u7537\u4eba\u5ad6\u5a3c\uff0c\u5f88\u591a\u4eba\u6709\u5a5a\u524d\u6027\u884c\u4e3a\uff08\u7ed3\u679c\u504f\u9ad8\uff09 6.5 \u540c\u6027\u604b 6.5.1 \u5f3a\u8c03\u751f\u7269\u6027\uff1a\u6bcd\u4eb2\u5b50\u5bab\u6fc0\u7d20\u5206\u6ccc 6.5.2 \u57fa\u672c\u7ed3\u8bba\uff1a\u751f\u7269\u6027 + \u793e\u4f1a\u5b66\u5171\u540c\u4f5c\u7528 6.5.3 \u540c\u6027\u604b\u76844\u4e2a\u7c7b\u578b\uff1a\u5076\u7136\u6027\uff0c\u60c5\u5883\u6027\u6d3b\u52a8\uff0c\u4eba\u683c\u5316\u540c\u6027\u604b 6.6 \u6027\u522b 6.6.1 \u793e\u4f1a\u6027\u522b\uff08gender\uff09\uff1a\u6210\u957f\u4e3a\u4e00\u4e2a\u7537\u4eba\u6216\u8005\u5973\u4eba 6.6.2 \u89d2\u8272\u5206\u5de5\uff1a\u4e5f\u662f\u751f\u7269\u6027\u548c\u793e\u4f1a\u6027\u5171\u540c\u4f5c\u7528\u7684\u7ed3\u679c 6.6.3 \u5eb7\u5948\u5c14\uff1a\u7537\u6027\u628a\u6301\u7684\u793e\u4f1a\u6743\u529b\uff0c\u5982\u4f55\u521b\u9020\u6027\u522b\u4e0d\u5e73\u7b49 6.6.4 \u5eb7\u5948\u5c14\uff1a\u793e\u4f1a\u4e0a\u7684\u52b3\u52a8\u3001\u6743\u529b\u548c\u503e\u6ce8\u9020\u5c31\u4e86\u793e\u4f1a\u6027\u522b\u5173\u7cfb 6.6.4.1 \u5bb6\u5ead\u5185\u90e8\u52b3\u52a8\uff0c\u52b3\u52a8\u529b\u5e02\u573a\u4e0a\u7684\u5206\u5de5 6.6.4.2 \u56fd\u5bb6\u673a\u5668\u3001\u610f\u8bc6\u5f62\u6001\u56fd\u5bb6\u673a\u5668\u7b49 6.6.4.3 \u5a5a\u59fb\u4e2d\u7684\u6295\u5165\u3001\u80b2\u513f\u7b49 6.6.5 \u9738\u6743\u5f0f\uff1a\u5171\u8c0b\u7537\u6027+\u53d7\u5f3a\u8c03\u7684\u5973\u6027\u7279\u5f81\uff08\u6027+\u6bcd\u7231\uff09 6.6.6 \u7537\u540c\u4f1a\u6709\u4e00\u4e9b\u5171\u8c0b\u7537\u6027\u7684\u53cd\u7279\u5f81\uff0c\u53cd\u6297\u7684\u5973\u6027\u7279\u5f81\u5219\u5305\u62ec\u5973\u540c\u3001\u8001\u5904\u5973\u3001\u5973\u5deb\u7b49 6.6.7 \u4eba\u7c7b\u662f\u53ef\u4ee5\u4e0d\u65ad\u8c03\u6574\u81ea\u5df1\u6027\u522b\u7684\u89c2\u70b9\u7684 6.6.8 \u5eb7\u5948\u5c14\uff1a\u793e\u4f1a\u6027\u522b\u5173\u7cfb\u6b63\u5728\u9762\u4e34\u7740\u5371\u673a 6.6.8.1 \u5236\u5ea6\u6027\u5371\u673a\uff1a\u56fd\u5bb6\u548c\u5bb6\u5ead\u6b63\u5728\u74e6\u89e3 6.6.8.2 \u6027\u7684\u5371\u673a\uff1a\u5973\u6027\u548c\u540c\u6027\u604b\u8005\u7684\u529b\u91cf\u5728\u4e0d\u65ad\u589e\u957f 6.6.8.3 \u5229\u76ca\u5f62\u6001\u5371\u673a\uff1a\u5df2\u5a5a\u5973\u6027\u6743\u529b\u3001\u7537\u6027\u4e2d\u7684\u53cd\u6027\u522b\u6b67\u89c6\uff08\u5546\u54c1\u5316\u7684\u6b63\u9762\u610f\u4e49\uff09","title":"Lesson 6 \u6027\u548c\u6027\u522b"},{"location":"posts/2022-02-08-introduction-to-sociality/#lesson-7","text":"7.1. \u653f\u6cbb\uff1a\u4e2a\u4f53\u4e2a\u4eba\u6216\u8005\u7fa4\u91cc\uff0c\u83b7\u53d6\u6216\u884c\u4f7f\u6743\u529b\u6216\u83b7\u53d6\u6743\u5a01\u7684\u8fc7\u7a0b 7.2. \u6743\u5229\u548c\u6743\u529b\uff1a(\u5362\u6656\u4e34\u8bb2\u5f97\u5f88\u6df7\u4e71) \u6743\u529b\uff1a\u662f\u4e00\u79cd\u793e\u4f1a\u5173\u7cfb\uff0c\u6709\u53cd\u6297\u7684\u53ef\u80fd\u6027\u4ecd\u7136\u80fd\u591f\u5b9e\u73b0\u81ea\u5df1\u7684\u610f\u5fd7 7.2.1 \u6743\u529b\u8d2f\u5f7b\u7684\u57fa\u7840 7.2.1.1 \u6743\u529b\u7684\u8d44\u6e90\uff1a\u91d1\u94b1\uff0c\u66b4\u529b\uff0c\u667a\u6167\uff0c\u7f8e\u8c8c\uff0c\u54c1\u683c 7.2.2 \u6743\u529b\u5185\u6db5\u7740\u51b2\u7a81 7.3 \u6743\u5a01\uff1a\u6743\u5a01\u662f\u4e00\u79cd\u6743\u529b\uff0c\u4f46\u5e76\u4e0d\u662f\u6240\u6709\u7684\u6743\u529b\u90fd\u662f\u6743\u5a01\uff0c\u88ab\u770b\u4f5c\u662f\u6b63\u5f53\u7684\u6743\u529b 7.4.1 \u4e09\u6743\u529b\u6b63\u5f53\u6027\uff1a\u4f20\u7edf\uff08\u793c\uff09\uff0c\u6743\u5a01\uff08\u9886\u8896\u4eba\u683c + \u65f6\u4ee3\uff09\uff0c\u6cd5\u7406\uff08\u6cd5\u5f8b\uff09 7.4.2 \u4e09\u79cd\u6b63\u5f53\u6027\u5f80\u5f80\u4e0d\u662f\u72ec\u7acb\u5b58\u5728\u7684 7.4.3 \u7406\u6027\u662f\u7262\u7b3c\uff0c\u662f\u5236\u9020charisma\u6743\u5a01\u7684\u52a8\u56e0 7.4 \u798f\u67ef\uff1a\u6743\u529b\u7684\u8fd0\u4f5c\u4f53\u73b0\u5728\u793e\u4f1a\u7684\u6240\u6709\u5c42\u9762\uff0c\u6bd4\u5982\u6743\u529b\u548c\u77e5\u8bc6\u662f\u76f8\u4e92\u5de9\u56fa\u7684 7.5 \u56fd\u5bb6 7.5.1 \u6c11\u4e3b\u56fd\u5bb6\uff1a\u7edd\u5927\u591a\u6570\u56fd\u5bb6\u8ba4\u4e3a\u662f\u5355\u4e00\u6c11\u65cf 7.5.2 \u4e3b\u6743\uff1a\u653f\u5e9c\uff0c\u5730\u57df\uff0c\u6743\u5a01\uff0c\u81f3\u9ad8\u65e0\u4e0a\uff0ceg\u6cbb\u5916\u6cd5\u6743 7.5.3 \u6c11\u4e3b\u4e3b\u4e49\uff1a\u60f3\u8c61\u7684\u5171\u540c\u4f53\uff0c\u662f\u4f34\u968f\u7740\u4e3b\u6743\u7684\u610f\u8bc6 7.6 \u653f\u6cbb\u4f53\u5236 7.6.1 \u5a01\u6743\u4f53\u5236\uff1a\u7edf\u6cbb\u662f\u5c11\u6570\u4eba\u7684\u6d3b\u52a8\uff1b\u541b\u4e3b\u5236\uff0c\u5be1\u5934\u5236\uff0c\u72ec\u88c1\u5236\uff0c\u6781\u6743\u4f53\u5236 7.6.2 \u6c11\u4e3b\u4f53\u5236\uff1a\u4e2a\u4eba\uff0c\u516c\u6c11\uff0c\u6295\u7968\uff0c\u5468\u671f\uff0c\u4e2a\u4eba\u6743\u5229\uff1a\u8a00\u8bba\u3001\u51fa\u7248\u3001\u96c6\u4f1a\u548c\u7ec4\u7ec7 7.6.3 \u67cf\u6797\u5899\uff0c\u5386\u53f2\u7684\u7ec8\u7ed3\uff0c\u4e1c\u6b27\u5267\u53d8 7.6.4 \u6c11\u4e3b\u4f53\u5236\u5728\u5168\u7403\u7684\u6269\u6563\uff1a\u5168\u7403\u5316\uff0c\u4fc3\u8fdb\u6c11\u4e3b\u5316\u8fdb\u7a0b\uff0c\u4e16\u754c\u8d44\u672c\u4e3b\u4e49\u6269\u5c55 7.7 \u4ee3\u8bae\u6c11\u4e3b\u7684\u56f0\u5883 7.7.1 \u6295\u7968\u7387\u5728\u8d70\u4f4e\uff1a\u4f3c\u4e4e\u5bf9\u4e2d\u56fd\u6c11\u4e3b\u7684\u7814\u7a76\u7eaf\u7cb9\u505c\u7559\u5728\u610f\u8bc6\u5f62\u6001\u7684\u5bf9\u6297\u548c\u65e0\u77e5\u4e2d 7.7.2 \u4e2d\u56fd\u6a21\u5f0f\u7684\u7f3a\u70b9\uff1a\u4e0d\u4ec5\u4ec5\u662f\u7ecf\u6d4e\u589e\u957f","title":"Lesson 7 \u6743\u529b\u3001\u6743\u5a01\u548c\u56fd\u5bb6"},{"location":"posts/2022-02-08-introduction-to-sociality/#lesson-8","text":"8.1 \u539f\u751f\u5bb6\u5ead vs \u81ea\u5df1\u7684\u5bb6\u5ead 8.2 \u4ec0\u4e48\u662f\u5bb6\u5ead\uff1a\u7e41\u884d\uff08\u751f\u7406\uff09\uff0c\u590d\u6742\u7684\u793e\u4f1a\u56e0\u7d20\uff08\u793e\u4f1a\uff09 8.3 \u5bb6\u5ead\u7684\u666e\u904d\u529f\u80fd\uff1a\u4eba\u53e3\u7e41\u884d\uff0c\u8c03\u8bd5\u6027\u5173\u7cfb\uff0c\u751f\u4ea7\u4e0e\u6d88\u8d39\uff0c\u513f\u7ae5\u7684\u793e\u4f1a\u5316\uff0c\u5c06\u4eba\u81f3\u4e8e\u4e00\u4e2a\u793e\u4f1a\u7ed3\u6784\u4e4b\u4e2d 8.4 \u5bb6\u5ead\u7684\u7c7b\u578b\uff1a\u6838\u5fc3\uff0c\u4e3b\u5e72\uff0c\u8054\u5408\uff0c\u5176\u4ed6\uff0c\u4e0e\u5de5\u4e1a\u5316\u7684\u5173\u7cfb\uff08\u4eba\u53e3\u6d41\u52a8\uff09 8.5 \u897f\u65b9\u5bb6\u5ead\u7684\u6f14\u53d8\uff1a\u6269\u5c55\u5bb6\u5ead\u5230\u6838\u5fc3\u5bb6\u5ead 8.5.1 16\u4e16\u7eaa\uff1a\u5d4c\u5165\u793e\u533a\uff1a\u5bb6\u5ead\u4eb2\u5bc6\u4e0d\u662f\u9996\u8981\uff0c\u5a5a\u59fb\u5c5e\u4e8e\u7236\u6bcd\u3001\u5176\u4ed6\u4eb2\u5c5e\uff0c\u6b7b\u4ea1\u7387\u9ad8 8.5.2 18\u4e16\u7eaa\uff1a\u9010\u6e10\u53d1\u5c55\u6210\u6211\u4eec\u73b0\u5728\u719f\u6089\u7684\u5f62\u6001\uff0c\u4ee5\u60c5\u611f\u4e3a\u7ebd\u5e26\uff0c\u9009\u62e9\u7686\u4e3a\u5bb6\u5ead\uff1a\u5bc6\u5207\uff0c\u9ad8\u5ea6\u7684\u9690\u79c1\uff0c \u5f3a\u8c03\u629a\u517b\u5b69\u5b50\u7684\u91cd\u8981\u6027, \u51fa\u73b0\u4e86\u6709\u4ef7\u503c\u7684\u5916\u90e8\u5de5\u4f5c\u548c\u65e0\u4ef7\u503c\u7684\u5bb6\u52a1\u52b3\u52a8 -> \u5bb6\u5ead\u4e3b\u5987 8.6 \u5bb6\u5ead\u5185\u90e8\u7684\u4e0d\u5e73\u7b49\uff1a\u6027\u522b\u4e0d\u5e73\u7b49\uff08\u5bb6\u52a1\uff09\uff0c\u5bb6\u5ead\u66b4\u529b 8.7 \u4e2d\u56fd\u5bb6\u5ead\u7684\u6f14\u53d8\uff1a1\uff09\u751f\u80b2\uff0c2\uff09\u5a46\u5a46\u548c\u513f\u5b50\uff0c3\uff09\u9752\u697c\u6587\u5316\uff08\u4e0d\u4ec5\u4ec5\u662f\u8eab\u4f53\u4ea4\u6613\u8fd8\u6709\u60c5\u611f\uff09\uff0c4\uff09\u6e05\u672b\u3001\u65b0\u6587\u5316\u8fd0\u52a8\u3001\u57ce\u5e02\u5316 8.8 \u65b0\u65f6\u4ee3\u5bb6\u5ead\u5371\u673a\uff1a\u79bb\u5a5a\u7387\u9ad8\uff0c\u5f69\u793c\uff0c\u6027\u522b/\u5bb6\u5ead\u4e0d\u5e73\u7b49\uff0c\u5b50\u5973\u793e\u4f1a\u5316\uff0c\u8d22\u4ea7\u7ee7\u627f","title":"Lesson 8 \u5a5a\u59fb\u4e0e\u5bb6\u5ead"},{"location":"posts/2022-02-08-introduction-to-sociality/#lesson-8_1","text":"","title":"Lesson 8 \u57ce\u5e02\u4e0e\u793e\u533a\uff08\u4e0d\u770b\u4e86\uff09"},{"location":"posts/2022-02-08-introduction-to-sociality/#lesson-9","text":"9.1 \u52b3\u52a8\u4e0e\u62a5\u916c\u5de5\u4f5c\uff1a\u5de5\u4f5c\u53ea\u662f\u8c0b\u751f\u7684\u4e00\u79cd\u65b9\u5f0f\uff1beg\uff0c\u5bb6\u52a1\u52b3\u52a8 9.2 \u5c31\u4e1a\u57fa\u672c\u5185\u5bb9\uff1a\u52b3\u52a8\u80fd\u529b\uff0c\u6709\u76ca\u4e8e\u793e\u4f1a\u88ab\u793e\u4f1a\u6240\u627f\u8ba4\u7684\u804c\u4e1a 9.3 \u7ecf\u6d4e\uff1a\u5546\u54c1\u5982\u4f55\u751f\u6210\u548c\u5206\u914d\u95ee\u9898 9.3.1 \u4e92\u60e0\u7ecf\u6d4e 9.3.2 \u5728\u5206\u914d\u7ecf\u6d4e\uff1a\u8ba1\u5212\u7ecf\u6d4e 9.3.3 \u8d44\u672c\u4e3b\u4e49\u7ecf\u6d4e\uff1a\u79c1\u6709\u5236\uff0c\u5229\u6da6\uff0c\u7ade\u4e89\uff0c\u81ea\u7531\u5e02\u573a 9.3.4 \u793e\u4f1a\u4e3b\u4e49\u5236\u5ea6\uff1a\u516c\u6709\u5236\uff0c\u5408\u4f5c\uff0c\u5206\u914d 9.3.5 \u52b3\u52a8\u7684\u793e\u4f1a\u7ec4\u7ec7\uff1a\u4e2a\u4f53\uff0c\u6d41\u6c34\u7ebf\uff0c\u79d1\u5c42\u7ba1\u7406\uff0c\u5de5\u4f1a\uff0c\u6700\u4f4e\u5de5\u8d44\u6807\u51c6\uff0c\u52b3\u52a1\u6d3e\u9063","title":"Lesson 9 \u52b3\u52a8\u4e0e\u7ecf\u6d4e\u751f\u6d3b"},{"location":"posts/2022-05-17-vm-docker-pythonenv/","text":"A layered experiment environment # In the places where I worked during the last five years, I've suffered a lot from \"different computation infrastructure\". One place has two physical servers with Ubuntu installed, another place has only one physical server but uses PVE to manage virtual machines assigned to specific users, and another place has a lot of servers shared with dozens of users. Not only the architectures are different but also the operating systems installed are different. Most of them use Ubuntu but some use Debian. For the majority, I have a hard time handling different Ubuntu versions as Ubuntu upgrades too fast (for me). I'm thinking of getting rid of the dependency on the underlying computation infrastructure with an idea of layered experiment environment. QEMU + Ubuntu + KVM -> Layer 1: independent on the underlying computation infrastructure Docker container -> Layer 2: independent on the underlying operating system Layer 1: Vagrant # Given a new computation infrastructure, the only effort here is to maintain a list of configurations of a virtual machine and find a tool like Vagrant to help to set all up. \" Vagrant is an open-source software product for building and maintaining portable virtual software development environments; e.g., for VirtualBox, KVM, Hyper-V, Docker containers, VMware, and AWS. It tries to simplify the software configuration management of virtualization in order to increase development productivity.\" -- Wikipedia Command lines are in the following. vagrant init generic/ubuntu1804 vagrant up --provider=libvirt vagrant ssh vagrant status vagrant halt Please look at Vagrantfile for more configuration. Layer 2: Docker # Given a new operating system, the only effort here is to maintain a Dockerfile. Command lines are in the following. # you may want a .dockerignore to skip large files and directories docker build -t tag:latest . docker run --rm -it -v path-outside:path-inside tag:latest /bin/bash Please look at Docker's official documentations for more commands. In summary, I've saved a lot of time following the above routines. You don't want to become a server maintainer in different places, right? install libVirt on Ubuntu 20.04 \u21a9 usage of libvirt vagrant \u21a9","title":"A layered experiment environment"},{"location":"posts/2022-05-17-vm-docker-pythonenv/#a-layered-experiment-environment","text":"In the places where I worked during the last five years, I've suffered a lot from \"different computation infrastructure\". One place has two physical servers with Ubuntu installed, another place has only one physical server but uses PVE to manage virtual machines assigned to specific users, and another place has a lot of servers shared with dozens of users. Not only the architectures are different but also the operating systems installed are different. Most of them use Ubuntu but some use Debian. For the majority, I have a hard time handling different Ubuntu versions as Ubuntu upgrades too fast (for me). I'm thinking of getting rid of the dependency on the underlying computation infrastructure with an idea of layered experiment environment. QEMU + Ubuntu + KVM -> Layer 1: independent on the underlying computation infrastructure Docker container -> Layer 2: independent on the underlying operating system","title":"A layered experiment environment"},{"location":"posts/2022-05-17-vm-docker-pythonenv/#layer-1-vagrant","text":"Given a new computation infrastructure, the only effort here is to maintain a list of configurations of a virtual machine and find a tool like Vagrant to help to set all up. \" Vagrant is an open-source software product for building and maintaining portable virtual software development environments; e.g., for VirtualBox, KVM, Hyper-V, Docker containers, VMware, and AWS. It tries to simplify the software configuration management of virtualization in order to increase development productivity.\" -- Wikipedia Command lines are in the following. vagrant init generic/ubuntu1804 vagrant up --provider=libvirt vagrant ssh vagrant status vagrant halt Please look at Vagrantfile for more configuration.","title":"Layer 1: Vagrant"},{"location":"posts/2022-05-17-vm-docker-pythonenv/#layer-2-docker","text":"Given a new operating system, the only effort here is to maintain a Dockerfile. Command lines are in the following. # you may want a .dockerignore to skip large files and directories docker build -t tag:latest . docker run --rm -it -v path-outside:path-inside tag:latest /bin/bash Please look at Docker's official documentations for more commands. In summary, I've saved a lot of time following the above routines. You don't want to become a server maintainer in different places, right? install libVirt on Ubuntu 20.04 \u21a9 usage of libvirt vagrant \u21a9","title":"Layer 2: Docker"},{"location":"posts/2022-06-22-wsl-vm-native-machine/","text":"Windows, Windows Subsystem Linux (WSL), VirtualBox Ubuntu, Native Ubuntu # I'm thinking about which solution is better for research and development. Windows v.s Ubuntu # After Native Ubuntu (running Ubuntu on a native machine), I've been using Windows for years. The reason I switched from Native Ubuntu to Windows was I wanted to use the Microsoft Office suite and WeChat (and DingTalk). Therefore, I would use the WSL for development. Microsoft office suite and WeChat for Windows are convenient, but WSL is not. As I am working on hypervisors and kernels, WSL cannot always provide all features for them. For example, I cannot even start a VirtualBox virtual machine in WSL (as WSL doesn't support loading extra kernel modules). Moreover, Windows itself has a lot of extra and implicit workload consuming my CPU time and I/O time, which sometimes makes me crazy. A list of WSL issues In WSL, I need to handle \"RWX\" for any files copied from the host In WSL, I need to handle \"CRLF\" for any files copied from the host In WSL, it's slow to list files on the host In WSL, I cannot access the port I set to connect to a VirtualBox virtual machine Microsoft office suite can be replaced by Google office suite. However, stupid Chinese IM apps, WeChat and DingTalk are not easily replaced. Wine is one of the solutions to support them. However, the notification is kind of floppy. All in all, I want to switch back to Ubuntu (or other distributions) due to my requirement for hardware. I'm going to use Google office suite to take notes. For these IM apps, I will use them on my cellphone with auto-start (in the background) and strong notification enabled. When using my cellphone, I try to reply as short as possible. In practice, I am slow in replying but this seems good. IMO, IM apps are disasters for maintaining our focus on research and development. VirtualBox and Native Ubuntu # I prefer a Native Ubuntu for the host. A virtual machine is good for any experimental task.","title":"Windows, Windows Subsystem Linux (WSL), VirtualBox Ubuntu, Native Ubuntu"},{"location":"posts/2022-06-22-wsl-vm-native-machine/#windows-windows-subsystem-linux-wsl-virtualbox-ubuntu-native-ubuntu","text":"I'm thinking about which solution is better for research and development.","title":"Windows, Windows Subsystem Linux (WSL), VirtualBox Ubuntu, Native Ubuntu"},{"location":"posts/2022-06-22-wsl-vm-native-machine/#windows-vs-ubuntu","text":"After Native Ubuntu (running Ubuntu on a native machine), I've been using Windows for years. The reason I switched from Native Ubuntu to Windows was I wanted to use the Microsoft Office suite and WeChat (and DingTalk). Therefore, I would use the WSL for development. Microsoft office suite and WeChat for Windows are convenient, but WSL is not. As I am working on hypervisors and kernels, WSL cannot always provide all features for them. For example, I cannot even start a VirtualBox virtual machine in WSL (as WSL doesn't support loading extra kernel modules). Moreover, Windows itself has a lot of extra and implicit workload consuming my CPU time and I/O time, which sometimes makes me crazy. A list of WSL issues In WSL, I need to handle \"RWX\" for any files copied from the host In WSL, I need to handle \"CRLF\" for any files copied from the host In WSL, it's slow to list files on the host In WSL, I cannot access the port I set to connect to a VirtualBox virtual machine Microsoft office suite can be replaced by Google office suite. However, stupid Chinese IM apps, WeChat and DingTalk are not easily replaced. Wine is one of the solutions to support them. However, the notification is kind of floppy. All in all, I want to switch back to Ubuntu (or other distributions) due to my requirement for hardware. I'm going to use Google office suite to take notes. For these IM apps, I will use them on my cellphone with auto-start (in the background) and strong notification enabled. When using my cellphone, I try to reply as short as possible. In practice, I am slow in replying but this seems good. IMO, IM apps are disasters for maintaining our focus on research and development.","title":"Windows v.s Ubuntu"},{"location":"posts/2022-06-22-wsl-vm-native-machine/#virtualbox-and-native-ubuntu","text":"I prefer a Native Ubuntu for the host. A virtual machine is good for any experimental task.","title":"VirtualBox and Native Ubuntu"},{"location":"posts/2022-08-30-technology-transfer/","text":"Technology Transfer and Practices Under Control # Technology transfer is part of our research and will give feedback to our research. Theoretical analysis will be omitted here. In practice, (but I still want to limit the scope to system and software security), real impact of our research is one of the strong criteria to get our papers accepted and our proposals funded. At the same time, any ways of technology transfer (technology transfer does not mean we have to own a start-up) will show us if our research is better enough to solve real problems. Besides some practical experiences, administrations and enterprises want technology transfer as well due to many reasons. I think involving the technology transfer to be one part of our research is a good idea, but we have to be careful. Practices Under Control # Please refer to https://news.sciencenet.cn/htmlnews/2022/8/484481.shtm (relationship between basic research, applied research and technology transfer), https://zhuanlan.zhihu.com/p/427863776 (some pitfalls from the view of an investor), and https://research.rutgers.edu/sites/default/files/2020-09/faculty_startup_guide_sep2019.pdf (start-up guidelines), and especially this https://otl.stanford.edu/industry/stanford-start-ups/faculty-best-practices-start-ups (start-up guidelines). OpenToy and Its Commercialization # Suppose I have open-sourced a tool named OpenToy to support some security analysis. When I am writing this article, OpenToy is not very mature. I want to make this as an example and see how we can commercialize it. In the following, I will list the ways of commercialization and compare them. Hopefully, we can see a more and more mature OpenToy to be transferred. Who to use and who to pay? # Think about your users and customers as the first step. Users have time but do not have money to pay, while customers do not have time but have money to pay. It is not always true that an open source tool has many users and many customers. Sometimes, either or. Usually, the tool has very limited users and customers. Potential users for OpenToy: yourself, other researchers, freelancer hackers. They are interested in the functionality that OpenToy provides. They will not pay, but will accept to reference your tool. Potential customers: security analysts in a company that wants to make money. It is not trivial to distinguish these security analysts to other users. I guess they won't pay either unless you have evidences that they've made a lot of money with OpenToy (but I don't think making a lot of money is possible.) and they even won't let you know they use your tool for a while otherwise they have to pay. Should I think them better? No. I should learn to push them to pay. How to make money? # If there are many users and customers, you can have advertisements in the software, ask them to donate, sell license to enable all features after one month trial, give advises to how to use this tool, and provide advanced services to paid customers. If not, things become simple. You have to use your tool to do something, advertise the tool to attracts more users and customers. Doing the bug bounty might be a good idea to start. More sophisticated skills to succeed in commercialization # TBD","title":"Technology Transfer and Practices Under Control"},{"location":"posts/2022-08-30-technology-transfer/#technology-transfer-and-practices-under-control","text":"Technology transfer is part of our research and will give feedback to our research. Theoretical analysis will be omitted here. In practice, (but I still want to limit the scope to system and software security), real impact of our research is one of the strong criteria to get our papers accepted and our proposals funded. At the same time, any ways of technology transfer (technology transfer does not mean we have to own a start-up) will show us if our research is better enough to solve real problems. Besides some practical experiences, administrations and enterprises want technology transfer as well due to many reasons. I think involving the technology transfer to be one part of our research is a good idea, but we have to be careful.","title":"Technology Transfer and Practices Under Control"},{"location":"posts/2022-08-30-technology-transfer/#practices-under-control","text":"Please refer to https://news.sciencenet.cn/htmlnews/2022/8/484481.shtm (relationship between basic research, applied research and technology transfer), https://zhuanlan.zhihu.com/p/427863776 (some pitfalls from the view of an investor), and https://research.rutgers.edu/sites/default/files/2020-09/faculty_startup_guide_sep2019.pdf (start-up guidelines), and especially this https://otl.stanford.edu/industry/stanford-start-ups/faculty-best-practices-start-ups (start-up guidelines).","title":"Practices Under Control"},{"location":"posts/2022-08-30-technology-transfer/#opentoy-and-its-commercialization","text":"Suppose I have open-sourced a tool named OpenToy to support some security analysis. When I am writing this article, OpenToy is not very mature. I want to make this as an example and see how we can commercialize it. In the following, I will list the ways of commercialization and compare them. Hopefully, we can see a more and more mature OpenToy to be transferred.","title":"OpenToy and Its Commercialization"},{"location":"posts/2022-08-30-technology-transfer/#who-to-use-and-who-to-pay","text":"Think about your users and customers as the first step. Users have time but do not have money to pay, while customers do not have time but have money to pay. It is not always true that an open source tool has many users and many customers. Sometimes, either or. Usually, the tool has very limited users and customers. Potential users for OpenToy: yourself, other researchers, freelancer hackers. They are interested in the functionality that OpenToy provides. They will not pay, but will accept to reference your tool. Potential customers: security analysts in a company that wants to make money. It is not trivial to distinguish these security analysts to other users. I guess they won't pay either unless you have evidences that they've made a lot of money with OpenToy (but I don't think making a lot of money is possible.) and they even won't let you know they use your tool for a while otherwise they have to pay. Should I think them better? No. I should learn to push them to pay.","title":"Who to use and who to pay?"},{"location":"posts/2022-08-30-technology-transfer/#how-to-make-money","text":"If there are many users and customers, you can have advertisements in the software, ask them to donate, sell license to enable all features after one month trial, give advises to how to use this tool, and provide advanced services to paid customers. If not, things become simple. You have to use your tool to do something, advertise the tool to attracts more users and customers. Doing the bug bounty might be a good idea to start.","title":"How to make money?"},{"location":"posts/2022-08-30-technology-transfer/#more-sophisticated-skills-to-succeed-in-commercialization","text":"TBD","title":"More sophisticated skills to succeed in commercialization"},{"location":"posts/2023-08-15-dont-waste-time/","text":"Pitfalls, Tweaks, Tricks in Research and Development # Waste less time = Gain more time! Avoid re-doing the same things twice # Avoid building Buildroot twice by saving its configs Avoid developing scripts twice Don't use all CPUs when you are using WSL Don't delete files randomly Make sure the servers are running all the time not you # Proxies Setup List # Setup Proxy for google, GitHub, Docker, apt sources Proxy setup for WSL: 1) allow LAN, 2) access the host in WSL, https://learn.microsoft.com/en-us/windows/wsl/networking, 3) enable system proxy Cloud storage for remote work # Google Driver/Nutshore/GitHub/servers Commit and push before going home Other pitfalls # Sogoupinyin doesn't work on Ubuntu ssh -X forwards X11 back to your desktop (qemu gtk initialization failed ) Don't use git submodules Run shellchecker before running any bash/sh script Server restarted was due to out of memory Server not responding was due to a dead loop Don't play with Python's built-in functions and fields","title":"Pitfalls, Tweaks, Tricks in Research and Development"},{"location":"posts/2023-08-15-dont-waste-time/#pitfalls-tweaks-tricks-in-research-and-development","text":"Waste less time = Gain more time!","title":"Pitfalls, Tweaks, Tricks in Research and Development"},{"location":"posts/2023-08-15-dont-waste-time/#avoid-re-doing-the-same-things-twice","text":"Avoid building Buildroot twice by saving its configs Avoid developing scripts twice Don't use all CPUs when you are using WSL Don't delete files randomly","title":"Avoid re-doing the same things twice"},{"location":"posts/2023-08-15-dont-waste-time/#make-sure-the-servers-are-running-all-the-time-not-you","text":"","title":"Make sure the servers are running all the time not you"},{"location":"posts/2023-08-15-dont-waste-time/#proxies-setup-list","text":"Setup Proxy for google, GitHub, Docker, apt sources Proxy setup for WSL: 1) allow LAN, 2) access the host in WSL, https://learn.microsoft.com/en-us/windows/wsl/networking, 3) enable system proxy","title":"Proxies Setup List"},{"location":"posts/2023-08-15-dont-waste-time/#cloud-storage-for-remote-work","text":"Google Driver/Nutshore/GitHub/servers Commit and push before going home","title":"Cloud storage for remote work"},{"location":"posts/2023-08-15-dont-waste-time/#other-pitfalls","text":"Sogoupinyin doesn't work on Ubuntu ssh -X forwards X11 back to your desktop (qemu gtk initialization failed ) Don't use git submodules Run shellchecker before running any bash/sh script Server restarted was due to out of memory Server not responding was due to a dead loop Don't play with Python's built-in functions and fields","title":"Other pitfalls"},{"location":"posts/2023-09-08-crisis-before-getting-a-phd/","text":"\u83b7\u5f97\u535a\u58eb\u5b66\u4f4d\u4e4b\u524d\u7684\u5371\u673a # \u4eca\u5929\uff0c\u535a\u58eb\u8bba\u6587\u7b54\u8fa9\u7684\u4e8b\u60c5\u5904\u7406\u5b8c\u4e86\u3002 2023\u5e74\u7684\u5de5\u4f5c\u8282\u594f\u6bd4\u524d\u51e0\u5e74\u6162\uff0c\u505a\u4e86\u4e0d\u591a\u7684\u4e8b\u60c5\u3002\u5408\u4f5c\u4e86\u4e24\u4e2a\u8bba\u6587\uff0c\u63d0\u4ea4\u4e86\u6bd5\u4e1a\u8bba\u6587\u548c\u4e00\u4e2a\u745e\u58eb\u535a\u540e\u57fa\u91d1\u7684\u7533\u8bf7\u3002\u4e5f\u8bb8\u662f\u5de5\u4f5c\u8282\u594f\u6162\u4e0b\u6765\u4e86\uff0c\u6240\u4ee5\u6709\u4e86\u66f4\u591a\u81ea\u5df1\u7684\u65f6\u95f4\u3002 \u4eca\u5e74\u7ecf\u5386\u4e86\u4e00\u4e9b\u4e0d\u540c\u7684\u4e8b\u60c5\u30022021\u5e74\u7b2c\u4e00\u6b21\u51fa\u56fd\uff0c\u5927\u6982\u51e0\u4e2a\u6708\u4e4b\u540e\uff0c\u8feb\u5207\u5730\u60f3\u56de\u56fd\u3002\u8ddf\u670b\u53cb\u4eec\u8ba8\u8bba\uff0c\u4e00\u81f4\u8ba4\u4e3a\u662f\u56e0\u4e3a\u8bba\u6587\u538b\u529b\u592a\u5927\u5bfc\u81f4\u30022023\u5e74\u7b2c\u4e8c\u6b21\u51fa\u56fd\uff0c\u5927\u6982\u51e0\u4e2a\u6708\u4e4b\u540e\uff0c\u7adf\u7136\u4e5f\u8feb\u5207\u5730\u60f3\u56de\u56fd\u3002\u4eca\u5e74\u53ef\u6ca1\u4ec0\u4e48\u8bba\u6587\u538b\u529b\u3002\u53ef\u6070\u6070\u662f\u8fd9\u4e2a\u539f\u56e0\uff0c\u81ea\u5df1\u5bf9\u56fd\u5916\u751f\u6d3b\u7684\u4e0d\u9002\u5e94\u624d\u7a81\u663e\u51fa\u6765\u3002 \u5de5\u4f5c\u548c\u751f\u6d3b\u4e24\u65b9\u9762\u7684\u5fc3\u7406\u95ee\u9898\u622a\u81f3\u5230\u76ee\u524d\u90fd\u53d1\u4f5c\u4e86\uff0c\u6211\u4f3c\u4e4e\u8f83\u597d\u5730\u5904\u7406\u4e86\u5b83\u4eec\uff0c\u73b0\u5728\u6062\u590d\u5230\u4e86\u4e00\u4e2a\u8f83\u597d\u7684\u72b6\u6001\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u5c06\u5c1d\u8bd5\u603b\u7ed3\u4e00\u4e0b\u8fd9\u4e2a\u8fc7\u7a0b\u5e76\u5199\u4e00\u4e9b\u6211\u7684\u601d\u8003\u3002 \u5b66\u4f1a\u5224\u65ad\u81ea\u5df1\u7684\u72b6\u6001\u3002\u8fc7\u53bb\u6211\u5e38\u5e38\u5f3a\u8feb\u81ea\u5df1\u6cbf\u7740\u4e00\u4e2a\u56fa\u5b9a\u7684\u65e5\u7a0b\uff0c\u8fd9\u662f\u4e00\u79cd\u7b80\u5355\u7684\u529e\u6cd5\uff0c\u4f46\u662f\u4eba\uff0c\u6216\u8005\u53ea\u6709\u6211\uff0c\u56e0\u8eab\u4f53\u7684\u3001\u7cbe\u795e\u7684\u4e0a\u7684\u72b6\u6001\u8d77\u4f0f\uff0c\u5f88\u96be\u505a\u5230\u6bcf\u4e00\u5929\u90fd\u6cbf\u7740\u4e00\u4e2a\u56fa\u5b9a\u7684\u65e5\u7a0b\u3002\u6211\u60f3\uff0c\u81ea\u5df1\u8fd8\u662f\u8981\u63a5\u53d7\u72b6\u6001\u4e0d\u4f73\u7684\u65f6\u5019\u3002\u4f46\u662f\uff0c\u8981\u5c3d\u91cf\u51cf\u5c11\u8fd9\u6837\u72b6\u6001\u4e0d\u4f73\u7684\u65f6\u5019\u3002\u6211\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u7b97\u6cd5\u3002\u5de5\u4f5c\u6548\u7387\u767d\u5929\u4f4e\uff0c\u72b6\u6001\u90a3\u662f\u771f\u7684\u5dee\uff1b\u767d\u5929\u597d\uff0c\u665a\u4e0a\u5dee\uff0c\u4e00\u822c\u822c\uff0c\u8f83\u591a\u6570\uff1b\u767d\u5929\u597d\uff0c\u665a\u4e0a\u597d\uff0c\u72b6\u6001\u597d\u3002\u5982\u679c\u72b6\u6001\u5dee\uff0c\u4e0d\u5982\u56de\u5bb6\u7761\u4e00\u89c9\uff0c\u8fd9\u5c31\u662f\u5728\u5b66\u672f\u754c\u7684\u4f18\u52bf\uff0c\u6ca1\u6709\u4eba\u770b\u7740\u4f60\u8003\u52e4\u3002\u8981\u63a7\u5236\u72b6\u6001\u4e00\u822c\u822c\u548c\u72b6\u6001\u597d\u4e3a\u591a\u6570\uff0c\u4e5f\u8981\u63a5\u53d7\u81ea\u5df1\u72b6\u6001\u5dee\u7684\u65f6\u5019\uff0c\u5145\u5206\u4f11\u606f\u3002 \u5047\u5982\u4eba\u90fd\u662f\u8d8b\u5229\u907f\u5bb3\uff0c\u90a3\u4e48\u4ed6\u5e94\u8be5\u4e0d\u4f1a\u53bb\u56de\u5fc6\u75db\u82e6\u7684\u4e8b\u60c5\u3002\u4f46\u662f\u5728\u8fd9\u91cc\u6211\u60f3\u5199\u4e00\u4e9b\u8fd9\u6837\u7684\u4e8b\u60c5\uff0c\u628a\u6f5c\u610f\u8bc6\u7684\u4e1c\u897f\u53d8\u6210\u4e00\u79cd\u4e3b\u52a8\u601d\u7ef4\u3002\u5728\u5de5\u4f5c\u538b\u529b\u8f83\u5927\u7684\u65f6\u5019\uff0c\u6211\u591a\u6b21\u505a\u68a6\u95ea\u56de\u5230\u9ad8\u4e2d\uff0c\u6709\u4e3b\u52a8\u91cd\u73b0\u503e\u5411\uff0c\u6bcf\u6b21\u90fd\u662f\u5669\u68a6\u60ca\u9192\uff0c\u5e76\u4f34\u968f\u6bd4\u8f83\u75db\u82e6\u7684\u611f\u89c9\uff0c\u8fd9\u662f\u4e00\u79cd\u5178\u578b\u7684 PTSD \u3002\u6211\u5c06\u534a\u5e74\u6240\u505a\u7684\u9ad8\u4e09\u5669\u68a6\u4e32\u8054\u8d77\u6765\u53d1\u73b0\uff0c\u9ad8\u4e09\u53ea\u662f\u4e2a\u7b26\u53f7\uff0c\u5176\u6240\u6307\u4e3a\u8bba\u6587\u3002\u56de\u987e\u8fc7\u53bb\u51e0\u5e74\u7684\u8bba\u6587\u53d1\u8868\u7ecf\u5386\uff0c\u6211\u5c1d\u5c1d\u4f53\u9a8c\u5230\u7cbe\u529b\u548c\u667a\u529b\u7684\u6781\u9650\u800c\u5e26\u6765\u7684\u6df7\u6742\u611f\u89c9\uff0c\u524d\u671f\u5174\u594b\u8f83\u591a\uff0c\u540e\u671f\u7edd\u671b\u8f83\u591a\uff0c\u5373\u4f7f\u7edd\u671b\u6211\u4e5f\u80fd\u575a\u6301\u4e0b\u53bb\uff0c\u867d\u7136\u4e5f\u4f1a\u6709\u4e00\u5b9a\u7684\u6210\u5c31\u611f\uff0c\u4f46\u6210\u5c31\u611f\u662f\u6619\u82b1\u4e00\u73b0\u3002\u7edd\u671b\u7684\u65f6\u5019\uff0c\u4f1a\u6253\u81ea\u5df1\u3001\u4f1a\u7528\u62f3\u6253\u5899\uff0c\u75bc\u4e00\u4e0b\uff0c\u4f46\u6ca1\u6709\u90a3\u4e48\u75bc\uff0c\u4e5f\u6015\u75bc\uff1b \u4f1a\u62bd\u70df\uff0c\u4f46\u6ca1\u4ec0\u4e48\u763e\uff0c\u4e5f\u611f\u5230\u6ca1\u4ec0\u4e48\u7f13\u89e3\u4f5c\u7528\u3002 \u6709\u5fc5\u8981\u91cd\u65b0\u8ba4\u8bc6\u79d1\u7814\u3002\u505a\u79d1\u7814\u5c31\u50cf\u722c\u5c71\uff0c\u5934\u534a\u7a0b\u8e0c\u8e87\u6ee1\u5fd7\uff0c\u4e2d\u95f4\u5f00\u59cb\u611f\u5230\u75b2\u60eb\uff0c\u4f46\u662f\u53ea\u80fd\u56de\u5934\u770b\uff0c\u4e0d\u80fd\u5f80\u56de\u8d70\uff0c\u51b2\u523a\u4e4b\u524d\u53c8\u52a8\u529b\u5341\u8db3\uff0c\u5230\u4e86\u5c71\u9876\u770b\u770b\u98ce\u666f\uff0c\u7f8e\u4e0d\u80dc\u6536\uff0c\u4e5f\u80fd\u770b\u5230\u8fdc\u5904\u8fd8\u6709\u66f4\u9ad8\u7684\u5c71\u5cf0\u3002\u5e38\u5e38\u60f3\u8d77\u767b\u6708\u6f14\u8bb2\uff0c\"Why climb the highest mountain? Not because it's easy just because it's hard\"\u3002\u4eba\u8981\u5f81\u670d\u6708\u4eae\uff0c\u662f\u4eba\u7c7b\u7684\u81ea\u8c6a\u3002\u79d1\u7814\u672c\u8d28\u4e0a\u4eba\u5f81\u670d\u81ea\u7136\u754c\u7684\u8fc7\u7a0b\uff0c\u662f\u5176\u4ef7\u503c\u6240\u5728\u3002\u8bf4\u5b9e\u8bdd\uff0c\u5728\u516c\u53f8\u5b9e\u4e60\u7684\u65f6\u5019\uff0c\u538b\u529b\u6bd4\u505a\u79d1\u7814\u5c0f\u5f97\u591a\uff0c\u5de5\u4e1a\u754c\u6216\u8bb8\u662f\u96be\u5ea6\u53c8\u4f4e\u8d5a\u5f97\u53c8\u591a\u3002\u5f88\u591a\u8f6c\u5411\u5de5\u4e1a\u754c\u7684\u4eba\uff0c\u5728\u4e25\u8083\u79d1\u7814\u8fc7\u7a0b\u4e2d\uff0c\u4ed6\u4eec\u83b7\u5f97\u7684\u4e50\u8da3\u8fdc\u8fdc\u5c0f\u4e8e\u4ed6\u4eec\u628a\u8fd9\u4e2a\u4e1c\u897f\u5e94\u7528\u5728\u5b9e\u9645\u4e2d\u83b7\u5f97\u7684\u5feb\u611f\u3002\u5bf9\u4e8e\u6211\u6765\u8bf4\uff0c\u6211\u5728\u9879\u76ee\u843d\u5730\u8fd9\u4ef6\u4e8b\u4e0a\u6ca1\u4ec0\u4e48\u60f3\u6cd5\uff0c\u53ef\u80fd\u56e0\u4e3a\u6211\u4ece\u6765\u4e0d\u592a\u7528\u90a3\u4e9b\u9ad8\u7aef\u4ea7\u54c1\uff0c\u6211\u81ea\u5df1\u53ef\u80fd\u662f\u4e00\u4e2a\u53cd\u9ad8\u79d1\u6280\u7684\u4eba\uff0c\u4f46\u6211\u5728\u63a2\u7d22\u524d\u6cbf\u8fd9\u4ef6\u4e8b\u4e0a\u662f\u6709\u70ed\u60c5\u7684\u3002\u4e00\u5f00\u59cb\uff0c\u6211\u5bf9\u79d1\u7814\u7684\u5174\u8da3\u6781\u5927\uff0c\u540e\u6765\u611f\u53d7\u5230\u6bd5\u4e1a\u7684\u538b\u529b\u4e4b\u540e\uff0c\u4e50\u8da3\u5728\u9010\u6e10\u6d88\u51cf\uff0c\u4e00\u4e2a\u6b7b\u677f\u7684\u76ee\u6807\u5bf9\u79d1\u7814\u662f\u4e00\u79cd\u4f24\u5bb3\uff0c\u628a\u63e1\u597d\u79d1\u7814\u7684\u8fc7\u7a0b\uff0c\u7ed3\u679c\u662f\u6c34\u5230\u6e20\u6210\u7684\u4e8b\u60c5\u3002 \u6709\u4eba\u8bf4\u505a\u79d1\u7814\u4e0d\u9700\u8981\u592a\u9ad8\u7684\u667a\u529b\uff0c\u6211\u4ece\u6765\u90fd\u662f\u53cd\u5bf9\u8fd9\u53e5\u8bdd\u3002\u8fd9\u4e2a\u4e16\u754c\u9700\u8981\u806a\u660e\u4eba\u505a\u79d1\u7814\uff0c\u662f\u4f1f\u5927\u7684\u601d\u60f3\u5851\u9020\u4e16\u754c\u3002\u6216\u8bb8\u81ea\u5df1\u60f3\u8fc7\u6210\u4e3a\u505a\u597d\u7684\u79d1\u7814\u5de5\u4f5c\u8005\uff0c\u4f46\u8fd9\u6216\u8bb8\u4e0d\u592a\u53ef\u80fd\u4e86\u3002\u8fd1\u4e9b\u5e74\uff0c\u81ea\u5df1\u89c2\u5bdf\u529b\uff08\u4e0b\u964d\uff09\uff0c\u6ce8\u610f\u529b\uff08\u4e0b\u964d\uff09\uff0c\u8bb0\u5fc6\u529b\uff08\u4e0b\u964d\uff09\uff0c\u601d\u7ef4\u529b\uff08\u4e0a\u5347\uff09\uff0c\u60f3\u8c61\u529b\uff08\u6301\u5e73\uff09\uff1b \u81ea\u6211\u5bdf\u89c9\uff08\u4e0a\u5347\uff09\uff0c\u81ea\u6211\u63a7\u5236\uff08\u4e0a\u5347\uff09\uff0c\u81ea\u6211\u6fc0\u52b1\uff08\u4e0a\u5347\uff09\uff0c\u540c\u7406\u5fc3\uff08\u4e0a\u5347\uff09\uff0c\u663e\u793a\u68c0\u9a8c\u80fd\u529b\uff08\u4e0a\u5347\uff09\u3002\u9700\u8981\u4f11\u606f\u6539\u5584\u6ce8\u610f\u529b\uff1b\u901a\u8fc7\u6355\u6349\u7ec6\u8282\uff0c\u63d0\u9ad8\u6ce8\u610f\u529b\uff1b\u901a\u8fc7\u6709\u6280\u5de7\u5730\u8bad\u7ec3\u6765\u63d0\u9ad8\u8bb0\u5fc6\u529b\u3002 \u5de5\u4f5c\u4e0a\u7684\u4e8b\u60c5\u5927\u4f53\u5982\u6b64\uff0c\u6162\u6162\u6765\uff0c\u63a5\u4e0b\u6765\u8bf4\u8bf4\u751f\u6d3b\u4e0a\u7684\u4e8b\u60c5\u3002 \u4eba\u751f\u4e4b\u4e0d\u5982\u610f\u5341\u4e4b\u516b\u4e5d\u3002\u4e0d\u77e5\u9053\u4ec0\u4e48\u65f6\u5019\u5f00\u59cb\uff0c\u5df2\u6ca1\u957f\u65f6\u95f4\u62e5\u6709\u826f\u597d\u60c5\u7eea\u3002\u538b\u529b\u662f\u7ed9\u5230\u6bcf\u4e00\u5468\uff0c\u67d0\u4e00\u5929\u53ef\u80fd\u662f\u5f00\u5fc3\u7684\uff0c\u4f46\u662f\u4e5f\u88ab\u538b\u529b\u51b2\u6de1\u4e86\u3002\u6d3b\u5f97\u5e73\u6de1\u4e00\u4e9b\u4e5f\u597d\uff0c\u80fd\u4fdd\u6301\u4e00\u4e2a\u603b\u4f53\u79ef\u6781\u7684\u60c5\u7eea\u5c31\u597d\uff0c\u4e0d\u8981\u5927\u559c\u5927\u60b2\u7684\u3002\u60c5\u7eea\u4e0d\u597d\u7684\u65f6\u5019\uff0c\u5927\u6982\u7387\u662f\u4e0d\u613f\u610f\u5de5\u4f5c\u7684\u3002 \u60f3\u597d\u8ba9\u60c5\u7eea\u66f4\u52a0\u79ef\u6781\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u6253\u7fbd\u6bdb\u7403\uff0c\u770b\u8db3\u7403\u6bd4\u8d5b\u3001\u73a9\u4e50\u5668\u3001\u5531\u6b4c\u7b49\u3002\u4e3a\u4ec0\u4e48\u8981\u4f53\u80b2\u953b\u70bc\uff1f\u5206\u6ccc\u591a\u5df4\u80fa\u6216\u5185\u5561\u80bd\uff1f\u5feb\u4e50\u5417\uff1f\u6709\u6210\u5c31\u611f\u5417\uff1f \u8fd0\u52a8\u53ea\u662f\u66f4\u7d2f\u800c\u5df2\uff0c\u6ca1\u6709\u591a\u5c11\u5feb\u4e50\u6216\u8005\u6210\u5c31\u611f\u3002\u6211\u7528\u8fd9\u4e2a\u7406\u7531\u6fc0\u52b1\u81ea\u5df1\uff1a\u5b9a\u671f\u7684\u4f53\u80b2\u953b\u70bc\u53ef\u4ee5\u8ba9\u8eab\u4f53\u8d85\u91cf\u6062\u590d\uff0c\u4f7f\u5f97\u8eab\u4f53\u548c\u7cbe\u795e\u4fdd\u6301\u4e00\u4e2a\u9ad8\u4e8e\u65e5\u5e38\u8d1f\u8377\u7684\u72b6\u6001\uff0c\u4ee5\u5e94\u4ed8\u4eba\u751f\u7684\u4e0d\u5982\u610f\u3002 \u9664\u4e86\u60c5\u7eea\u65b9\u9762\u7684\uff0c\u6211\u901a\u8fc7\u4e09\u4e2a\u884c\u52a8\u6765\u9762\u5bf9\u672a\u6765\u3002 \u6234\u4e0a\u9762\u5177\u3002\u4eba\u5e38\u5e38\u5728\u4e0d\u540c\u7684\u7ec4\u7ec7\u91cc\u626e\u6f14\u4e0d\u540c\u7684\u89d2\u8272\uff0c\u6bd4\u5982\u5728\u516c\u53f8\u548c\u5bb6\u5ead\u91cc\u90fd\u9700\u8981\u6234\u4e0a\u9762\u5177\uff0c\u626e\u6f14\u4e0d\u540c\u7684\u89d2\u8272\u3002\u4f46\u662f\u4e0d\u8981\u8d70\u5165\u8bef\u533a\u3002\u7b2c\u4e00\uff0c\u6253\u7740\u81ea\u7531\u7684\u65d7\u5e1c\u505a\u81ea\u5df1\uff0c\u5374\u5f71\u54cd\u4e86\u522b\u4eba\u7684\u81ea\u7531\u3002\u7b2c\u4e8c\uff0c\u5bf9\u5f85\u5bb6\u4eba\u5c31\u968f\u610f\u4e0d\u5c0a\u91cd\uff0c\u9762\u5bf9\u5916\u4eba\u5c31\u8981\u70b9\u5934\u54c8\u8170\u3002\u7b2c\u4e09\uff0c\u5411\u522b\u4eba\u5ba3\u6cc4\u4e0d\u826f\u60c5\u51b5\uff0c\u628a\u522b\u4eba\u5f53\u4f5c\u60c5\u7eea\u5783\u573e\u6876\u3002\u7b2c\u56db\uff0c\u63a5\u8fd1\u6743\u529b\u4e0d\u4ee3\u8868\u81ea\u5df1\u62e5\u6709\u6743\u529b\uff0c\u63a5\u8fd1\u8d22\u5bcc\u4e0d\u4ee3\u8868\u81ea\u5df1\u62e5\u6709\u8d22\u5bcc\u3002\u6234\u4e0a\u9762\u5177\uff0c\u505a\u597d\u81ea\u5df1\u7684\u89d2\u8272\uff0c\u624d\u4f1a\u53d1\u89c9\uff0c\u4eba\u4ecd\u7136\u9700\u8981\u81ea\u5df1\u72ec\u5904\uff0c\u77ed\u6682\u7684\uff0c\u6765\u7f13\u89e3\u6234\u4e0a\u4e0d\u540c\u7684\u9762\u5177\u5e26\u6765\u7684\u526f\u4f5c\u7528\u3002 \u4e1a\u7acb\u5bb6\u6210\u3002\u7231\u60c5\u662f\u7f8e\u597d\uff0c\u8bfb\u535a\u671f\u95f4\u81ea\u5df1\u5c31\u6709\u8fd9\u6837\u4e00\u6bb5\u65f6\u5149\u3002\u5a5a\u59fb\u662f\u4e5f\u4ee4\u4eba\u5411\u5f80\u7684\uff0c\u5bb6\u5ead\u7ec8\u7a76\u662f\u6b8b\u9177\u793e\u4f1a\u7684\u6700\u7ec8\u7684\u6e2f\u6e7e\u3002\u65f6\u4ee3\u4e00\u76f4\u5728\u53d8\u5316\uff0c\u4ece\u6211\u9047\u5230\u4e00\u4e2a\u597d\u4eba\uff0c\u5230\u4f60\u662f\u4e00\u4e2a\u597d\u4eba\uff0c\u4e2a\u4eba\u54c1\u8d28\u5df2\u7ecf\u65e0\u6cd5\u523a\u6fc0\u7537\u5973\u53d1\u751f\u826f\u597d\u7684\u611f\u60c5\uff0c\u53ea\u6709\u597d\u7684\u4e2a\u4eba\u54c1\u8d28\u6ca1\u4eba\u5728\u610f\uff0c\u4e00\u534a\u5929\u4f7f\u4e00\u534a\u9b54\u9b3c\u66f4\u80fd\u60c5\u573a\u5f97\u610f\u3002\u5929\u4f7f\u662f\u771f\u7684\u5929\u4f7f\uff0c\u9b54\u9b3c\u4e5f\u662f\u771f\u7684\u9b54\u9b3c\uff0c\u6709\u591a\u5c11\u6b22\u4e50\u5c31\u6709\u591a\u5c11\u75db\u82e6\u3002\u8bb2\u70b9\u73b0\u5b9e\uff0c\u4e8b\u4e1a\u662f\u7b2c\u4e00\u4f4d\u7684\uff0c\u4e1a\u7acb\u624d\u80fd\u5bb6\u6210\u3002\u6709\u4e86\u81ea\u5df1\u4e8b\u4e1a\uff0c\u6709\u4e86\u4e00\u5b9a\u7684\u79ef\u84c4\uff0c\u624d\u80fd\u663e\u5f97\u62e5\u6709\u66f4\u591a\u7684\u4ef7\u503c\uff0c\u4e0d\u5fc5\u6210\u4e3a\u9b54\u9b3c\u3002 \u878d\u5165\u793e\u4f1a\u3002\u5fc3\u6001\u5f00\u653e\uff0c\u878d\u5165\u793e\u4f1a\uff0c\u662f\u89e3\u51b3\u8bed\u8a00\u548c\u4e60\u60ef\u4e0d\u9002\u5e94\u7684\u6cbb\u672c\u529e\u6cd5\u3002","title":"\u83b7\u5f97\u535a\u58eb\u5b66\u4f4d\u4e4b\u524d\u7684\u5371\u673a"},{"location":"posts/2023-09-08-crisis-before-getting-a-phd/#_1","text":"\u4eca\u5929\uff0c\u535a\u58eb\u8bba\u6587\u7b54\u8fa9\u7684\u4e8b\u60c5\u5904\u7406\u5b8c\u4e86\u3002 2023\u5e74\u7684\u5de5\u4f5c\u8282\u594f\u6bd4\u524d\u51e0\u5e74\u6162\uff0c\u505a\u4e86\u4e0d\u591a\u7684\u4e8b\u60c5\u3002\u5408\u4f5c\u4e86\u4e24\u4e2a\u8bba\u6587\uff0c\u63d0\u4ea4\u4e86\u6bd5\u4e1a\u8bba\u6587\u548c\u4e00\u4e2a\u745e\u58eb\u535a\u540e\u57fa\u91d1\u7684\u7533\u8bf7\u3002\u4e5f\u8bb8\u662f\u5de5\u4f5c\u8282\u594f\u6162\u4e0b\u6765\u4e86\uff0c\u6240\u4ee5\u6709\u4e86\u66f4\u591a\u81ea\u5df1\u7684\u65f6\u95f4\u3002 \u4eca\u5e74\u7ecf\u5386\u4e86\u4e00\u4e9b\u4e0d\u540c\u7684\u4e8b\u60c5\u30022021\u5e74\u7b2c\u4e00\u6b21\u51fa\u56fd\uff0c\u5927\u6982\u51e0\u4e2a\u6708\u4e4b\u540e\uff0c\u8feb\u5207\u5730\u60f3\u56de\u56fd\u3002\u8ddf\u670b\u53cb\u4eec\u8ba8\u8bba\uff0c\u4e00\u81f4\u8ba4\u4e3a\u662f\u56e0\u4e3a\u8bba\u6587\u538b\u529b\u592a\u5927\u5bfc\u81f4\u30022023\u5e74\u7b2c\u4e8c\u6b21\u51fa\u56fd\uff0c\u5927\u6982\u51e0\u4e2a\u6708\u4e4b\u540e\uff0c\u7adf\u7136\u4e5f\u8feb\u5207\u5730\u60f3\u56de\u56fd\u3002\u4eca\u5e74\u53ef\u6ca1\u4ec0\u4e48\u8bba\u6587\u538b\u529b\u3002\u53ef\u6070\u6070\u662f\u8fd9\u4e2a\u539f\u56e0\uff0c\u81ea\u5df1\u5bf9\u56fd\u5916\u751f\u6d3b\u7684\u4e0d\u9002\u5e94\u624d\u7a81\u663e\u51fa\u6765\u3002 \u5de5\u4f5c\u548c\u751f\u6d3b\u4e24\u65b9\u9762\u7684\u5fc3\u7406\u95ee\u9898\u622a\u81f3\u5230\u76ee\u524d\u90fd\u53d1\u4f5c\u4e86\uff0c\u6211\u4f3c\u4e4e\u8f83\u597d\u5730\u5904\u7406\u4e86\u5b83\u4eec\uff0c\u73b0\u5728\u6062\u590d\u5230\u4e86\u4e00\u4e2a\u8f83\u597d\u7684\u72b6\u6001\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u5c06\u5c1d\u8bd5\u603b\u7ed3\u4e00\u4e0b\u8fd9\u4e2a\u8fc7\u7a0b\u5e76\u5199\u4e00\u4e9b\u6211\u7684\u601d\u8003\u3002 \u5b66\u4f1a\u5224\u65ad\u81ea\u5df1\u7684\u72b6\u6001\u3002\u8fc7\u53bb\u6211\u5e38\u5e38\u5f3a\u8feb\u81ea\u5df1\u6cbf\u7740\u4e00\u4e2a\u56fa\u5b9a\u7684\u65e5\u7a0b\uff0c\u8fd9\u662f\u4e00\u79cd\u7b80\u5355\u7684\u529e\u6cd5\uff0c\u4f46\u662f\u4eba\uff0c\u6216\u8005\u53ea\u6709\u6211\uff0c\u56e0\u8eab\u4f53\u7684\u3001\u7cbe\u795e\u7684\u4e0a\u7684\u72b6\u6001\u8d77\u4f0f\uff0c\u5f88\u96be\u505a\u5230\u6bcf\u4e00\u5929\u90fd\u6cbf\u7740\u4e00\u4e2a\u56fa\u5b9a\u7684\u65e5\u7a0b\u3002\u6211\u60f3\uff0c\u81ea\u5df1\u8fd8\u662f\u8981\u63a5\u53d7\u72b6\u6001\u4e0d\u4f73\u7684\u65f6\u5019\u3002\u4f46\u662f\uff0c\u8981\u5c3d\u91cf\u51cf\u5c11\u8fd9\u6837\u72b6\u6001\u4e0d\u4f73\u7684\u65f6\u5019\u3002\u6211\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u7b97\u6cd5\u3002\u5de5\u4f5c\u6548\u7387\u767d\u5929\u4f4e\uff0c\u72b6\u6001\u90a3\u662f\u771f\u7684\u5dee\uff1b\u767d\u5929\u597d\uff0c\u665a\u4e0a\u5dee\uff0c\u4e00\u822c\u822c\uff0c\u8f83\u591a\u6570\uff1b\u767d\u5929\u597d\uff0c\u665a\u4e0a\u597d\uff0c\u72b6\u6001\u597d\u3002\u5982\u679c\u72b6\u6001\u5dee\uff0c\u4e0d\u5982\u56de\u5bb6\u7761\u4e00\u89c9\uff0c\u8fd9\u5c31\u662f\u5728\u5b66\u672f\u754c\u7684\u4f18\u52bf\uff0c\u6ca1\u6709\u4eba\u770b\u7740\u4f60\u8003\u52e4\u3002\u8981\u63a7\u5236\u72b6\u6001\u4e00\u822c\u822c\u548c\u72b6\u6001\u597d\u4e3a\u591a\u6570\uff0c\u4e5f\u8981\u63a5\u53d7\u81ea\u5df1\u72b6\u6001\u5dee\u7684\u65f6\u5019\uff0c\u5145\u5206\u4f11\u606f\u3002 \u5047\u5982\u4eba\u90fd\u662f\u8d8b\u5229\u907f\u5bb3\uff0c\u90a3\u4e48\u4ed6\u5e94\u8be5\u4e0d\u4f1a\u53bb\u56de\u5fc6\u75db\u82e6\u7684\u4e8b\u60c5\u3002\u4f46\u662f\u5728\u8fd9\u91cc\u6211\u60f3\u5199\u4e00\u4e9b\u8fd9\u6837\u7684\u4e8b\u60c5\uff0c\u628a\u6f5c\u610f\u8bc6\u7684\u4e1c\u897f\u53d8\u6210\u4e00\u79cd\u4e3b\u52a8\u601d\u7ef4\u3002\u5728\u5de5\u4f5c\u538b\u529b\u8f83\u5927\u7684\u65f6\u5019\uff0c\u6211\u591a\u6b21\u505a\u68a6\u95ea\u56de\u5230\u9ad8\u4e2d\uff0c\u6709\u4e3b\u52a8\u91cd\u73b0\u503e\u5411\uff0c\u6bcf\u6b21\u90fd\u662f\u5669\u68a6\u60ca\u9192\uff0c\u5e76\u4f34\u968f\u6bd4\u8f83\u75db\u82e6\u7684\u611f\u89c9\uff0c\u8fd9\u662f\u4e00\u79cd\u5178\u578b\u7684 PTSD \u3002\u6211\u5c06\u534a\u5e74\u6240\u505a\u7684\u9ad8\u4e09\u5669\u68a6\u4e32\u8054\u8d77\u6765\u53d1\u73b0\uff0c\u9ad8\u4e09\u53ea\u662f\u4e2a\u7b26\u53f7\uff0c\u5176\u6240\u6307\u4e3a\u8bba\u6587\u3002\u56de\u987e\u8fc7\u53bb\u51e0\u5e74\u7684\u8bba\u6587\u53d1\u8868\u7ecf\u5386\uff0c\u6211\u5c1d\u5c1d\u4f53\u9a8c\u5230\u7cbe\u529b\u548c\u667a\u529b\u7684\u6781\u9650\u800c\u5e26\u6765\u7684\u6df7\u6742\u611f\u89c9\uff0c\u524d\u671f\u5174\u594b\u8f83\u591a\uff0c\u540e\u671f\u7edd\u671b\u8f83\u591a\uff0c\u5373\u4f7f\u7edd\u671b\u6211\u4e5f\u80fd\u575a\u6301\u4e0b\u53bb\uff0c\u867d\u7136\u4e5f\u4f1a\u6709\u4e00\u5b9a\u7684\u6210\u5c31\u611f\uff0c\u4f46\u6210\u5c31\u611f\u662f\u6619\u82b1\u4e00\u73b0\u3002\u7edd\u671b\u7684\u65f6\u5019\uff0c\u4f1a\u6253\u81ea\u5df1\u3001\u4f1a\u7528\u62f3\u6253\u5899\uff0c\u75bc\u4e00\u4e0b\uff0c\u4f46\u6ca1\u6709\u90a3\u4e48\u75bc\uff0c\u4e5f\u6015\u75bc\uff1b \u4f1a\u62bd\u70df\uff0c\u4f46\u6ca1\u4ec0\u4e48\u763e\uff0c\u4e5f\u611f\u5230\u6ca1\u4ec0\u4e48\u7f13\u89e3\u4f5c\u7528\u3002 \u6709\u5fc5\u8981\u91cd\u65b0\u8ba4\u8bc6\u79d1\u7814\u3002\u505a\u79d1\u7814\u5c31\u50cf\u722c\u5c71\uff0c\u5934\u534a\u7a0b\u8e0c\u8e87\u6ee1\u5fd7\uff0c\u4e2d\u95f4\u5f00\u59cb\u611f\u5230\u75b2\u60eb\uff0c\u4f46\u662f\u53ea\u80fd\u56de\u5934\u770b\uff0c\u4e0d\u80fd\u5f80\u56de\u8d70\uff0c\u51b2\u523a\u4e4b\u524d\u53c8\u52a8\u529b\u5341\u8db3\uff0c\u5230\u4e86\u5c71\u9876\u770b\u770b\u98ce\u666f\uff0c\u7f8e\u4e0d\u80dc\u6536\uff0c\u4e5f\u80fd\u770b\u5230\u8fdc\u5904\u8fd8\u6709\u66f4\u9ad8\u7684\u5c71\u5cf0\u3002\u5e38\u5e38\u60f3\u8d77\u767b\u6708\u6f14\u8bb2\uff0c\"Why climb the highest mountain? Not because it's easy just because it's hard\"\u3002\u4eba\u8981\u5f81\u670d\u6708\u4eae\uff0c\u662f\u4eba\u7c7b\u7684\u81ea\u8c6a\u3002\u79d1\u7814\u672c\u8d28\u4e0a\u4eba\u5f81\u670d\u81ea\u7136\u754c\u7684\u8fc7\u7a0b\uff0c\u662f\u5176\u4ef7\u503c\u6240\u5728\u3002\u8bf4\u5b9e\u8bdd\uff0c\u5728\u516c\u53f8\u5b9e\u4e60\u7684\u65f6\u5019\uff0c\u538b\u529b\u6bd4\u505a\u79d1\u7814\u5c0f\u5f97\u591a\uff0c\u5de5\u4e1a\u754c\u6216\u8bb8\u662f\u96be\u5ea6\u53c8\u4f4e\u8d5a\u5f97\u53c8\u591a\u3002\u5f88\u591a\u8f6c\u5411\u5de5\u4e1a\u754c\u7684\u4eba\uff0c\u5728\u4e25\u8083\u79d1\u7814\u8fc7\u7a0b\u4e2d\uff0c\u4ed6\u4eec\u83b7\u5f97\u7684\u4e50\u8da3\u8fdc\u8fdc\u5c0f\u4e8e\u4ed6\u4eec\u628a\u8fd9\u4e2a\u4e1c\u897f\u5e94\u7528\u5728\u5b9e\u9645\u4e2d\u83b7\u5f97\u7684\u5feb\u611f\u3002\u5bf9\u4e8e\u6211\u6765\u8bf4\uff0c\u6211\u5728\u9879\u76ee\u843d\u5730\u8fd9\u4ef6\u4e8b\u4e0a\u6ca1\u4ec0\u4e48\u60f3\u6cd5\uff0c\u53ef\u80fd\u56e0\u4e3a\u6211\u4ece\u6765\u4e0d\u592a\u7528\u90a3\u4e9b\u9ad8\u7aef\u4ea7\u54c1\uff0c\u6211\u81ea\u5df1\u53ef\u80fd\u662f\u4e00\u4e2a\u53cd\u9ad8\u79d1\u6280\u7684\u4eba\uff0c\u4f46\u6211\u5728\u63a2\u7d22\u524d\u6cbf\u8fd9\u4ef6\u4e8b\u4e0a\u662f\u6709\u70ed\u60c5\u7684\u3002\u4e00\u5f00\u59cb\uff0c\u6211\u5bf9\u79d1\u7814\u7684\u5174\u8da3\u6781\u5927\uff0c\u540e\u6765\u611f\u53d7\u5230\u6bd5\u4e1a\u7684\u538b\u529b\u4e4b\u540e\uff0c\u4e50\u8da3\u5728\u9010\u6e10\u6d88\u51cf\uff0c\u4e00\u4e2a\u6b7b\u677f\u7684\u76ee\u6807\u5bf9\u79d1\u7814\u662f\u4e00\u79cd\u4f24\u5bb3\uff0c\u628a\u63e1\u597d\u79d1\u7814\u7684\u8fc7\u7a0b\uff0c\u7ed3\u679c\u662f\u6c34\u5230\u6e20\u6210\u7684\u4e8b\u60c5\u3002 \u6709\u4eba\u8bf4\u505a\u79d1\u7814\u4e0d\u9700\u8981\u592a\u9ad8\u7684\u667a\u529b\uff0c\u6211\u4ece\u6765\u90fd\u662f\u53cd\u5bf9\u8fd9\u53e5\u8bdd\u3002\u8fd9\u4e2a\u4e16\u754c\u9700\u8981\u806a\u660e\u4eba\u505a\u79d1\u7814\uff0c\u662f\u4f1f\u5927\u7684\u601d\u60f3\u5851\u9020\u4e16\u754c\u3002\u6216\u8bb8\u81ea\u5df1\u60f3\u8fc7\u6210\u4e3a\u505a\u597d\u7684\u79d1\u7814\u5de5\u4f5c\u8005\uff0c\u4f46\u8fd9\u6216\u8bb8\u4e0d\u592a\u53ef\u80fd\u4e86\u3002\u8fd1\u4e9b\u5e74\uff0c\u81ea\u5df1\u89c2\u5bdf\u529b\uff08\u4e0b\u964d\uff09\uff0c\u6ce8\u610f\u529b\uff08\u4e0b\u964d\uff09\uff0c\u8bb0\u5fc6\u529b\uff08\u4e0b\u964d\uff09\uff0c\u601d\u7ef4\u529b\uff08\u4e0a\u5347\uff09\uff0c\u60f3\u8c61\u529b\uff08\u6301\u5e73\uff09\uff1b \u81ea\u6211\u5bdf\u89c9\uff08\u4e0a\u5347\uff09\uff0c\u81ea\u6211\u63a7\u5236\uff08\u4e0a\u5347\uff09\uff0c\u81ea\u6211\u6fc0\u52b1\uff08\u4e0a\u5347\uff09\uff0c\u540c\u7406\u5fc3\uff08\u4e0a\u5347\uff09\uff0c\u663e\u793a\u68c0\u9a8c\u80fd\u529b\uff08\u4e0a\u5347\uff09\u3002\u9700\u8981\u4f11\u606f\u6539\u5584\u6ce8\u610f\u529b\uff1b\u901a\u8fc7\u6355\u6349\u7ec6\u8282\uff0c\u63d0\u9ad8\u6ce8\u610f\u529b\uff1b\u901a\u8fc7\u6709\u6280\u5de7\u5730\u8bad\u7ec3\u6765\u63d0\u9ad8\u8bb0\u5fc6\u529b\u3002 \u5de5\u4f5c\u4e0a\u7684\u4e8b\u60c5\u5927\u4f53\u5982\u6b64\uff0c\u6162\u6162\u6765\uff0c\u63a5\u4e0b\u6765\u8bf4\u8bf4\u751f\u6d3b\u4e0a\u7684\u4e8b\u60c5\u3002 \u4eba\u751f\u4e4b\u4e0d\u5982\u610f\u5341\u4e4b\u516b\u4e5d\u3002\u4e0d\u77e5\u9053\u4ec0\u4e48\u65f6\u5019\u5f00\u59cb\uff0c\u5df2\u6ca1\u957f\u65f6\u95f4\u62e5\u6709\u826f\u597d\u60c5\u7eea\u3002\u538b\u529b\u662f\u7ed9\u5230\u6bcf\u4e00\u5468\uff0c\u67d0\u4e00\u5929\u53ef\u80fd\u662f\u5f00\u5fc3\u7684\uff0c\u4f46\u662f\u4e5f\u88ab\u538b\u529b\u51b2\u6de1\u4e86\u3002\u6d3b\u5f97\u5e73\u6de1\u4e00\u4e9b\u4e5f\u597d\uff0c\u80fd\u4fdd\u6301\u4e00\u4e2a\u603b\u4f53\u79ef\u6781\u7684\u60c5\u7eea\u5c31\u597d\uff0c\u4e0d\u8981\u5927\u559c\u5927\u60b2\u7684\u3002\u60c5\u7eea\u4e0d\u597d\u7684\u65f6\u5019\uff0c\u5927\u6982\u7387\u662f\u4e0d\u613f\u610f\u5de5\u4f5c\u7684\u3002 \u60f3\u597d\u8ba9\u60c5\u7eea\u66f4\u52a0\u79ef\u6781\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u6253\u7fbd\u6bdb\u7403\uff0c\u770b\u8db3\u7403\u6bd4\u8d5b\u3001\u73a9\u4e50\u5668\u3001\u5531\u6b4c\u7b49\u3002\u4e3a\u4ec0\u4e48\u8981\u4f53\u80b2\u953b\u70bc\uff1f\u5206\u6ccc\u591a\u5df4\u80fa\u6216\u5185\u5561\u80bd\uff1f\u5feb\u4e50\u5417\uff1f\u6709\u6210\u5c31\u611f\u5417\uff1f \u8fd0\u52a8\u53ea\u662f\u66f4\u7d2f\u800c\u5df2\uff0c\u6ca1\u6709\u591a\u5c11\u5feb\u4e50\u6216\u8005\u6210\u5c31\u611f\u3002\u6211\u7528\u8fd9\u4e2a\u7406\u7531\u6fc0\u52b1\u81ea\u5df1\uff1a\u5b9a\u671f\u7684\u4f53\u80b2\u953b\u70bc\u53ef\u4ee5\u8ba9\u8eab\u4f53\u8d85\u91cf\u6062\u590d\uff0c\u4f7f\u5f97\u8eab\u4f53\u548c\u7cbe\u795e\u4fdd\u6301\u4e00\u4e2a\u9ad8\u4e8e\u65e5\u5e38\u8d1f\u8377\u7684\u72b6\u6001\uff0c\u4ee5\u5e94\u4ed8\u4eba\u751f\u7684\u4e0d\u5982\u610f\u3002 \u9664\u4e86\u60c5\u7eea\u65b9\u9762\u7684\uff0c\u6211\u901a\u8fc7\u4e09\u4e2a\u884c\u52a8\u6765\u9762\u5bf9\u672a\u6765\u3002 \u6234\u4e0a\u9762\u5177\u3002\u4eba\u5e38\u5e38\u5728\u4e0d\u540c\u7684\u7ec4\u7ec7\u91cc\u626e\u6f14\u4e0d\u540c\u7684\u89d2\u8272\uff0c\u6bd4\u5982\u5728\u516c\u53f8\u548c\u5bb6\u5ead\u91cc\u90fd\u9700\u8981\u6234\u4e0a\u9762\u5177\uff0c\u626e\u6f14\u4e0d\u540c\u7684\u89d2\u8272\u3002\u4f46\u662f\u4e0d\u8981\u8d70\u5165\u8bef\u533a\u3002\u7b2c\u4e00\uff0c\u6253\u7740\u81ea\u7531\u7684\u65d7\u5e1c\u505a\u81ea\u5df1\uff0c\u5374\u5f71\u54cd\u4e86\u522b\u4eba\u7684\u81ea\u7531\u3002\u7b2c\u4e8c\uff0c\u5bf9\u5f85\u5bb6\u4eba\u5c31\u968f\u610f\u4e0d\u5c0a\u91cd\uff0c\u9762\u5bf9\u5916\u4eba\u5c31\u8981\u70b9\u5934\u54c8\u8170\u3002\u7b2c\u4e09\uff0c\u5411\u522b\u4eba\u5ba3\u6cc4\u4e0d\u826f\u60c5\u51b5\uff0c\u628a\u522b\u4eba\u5f53\u4f5c\u60c5\u7eea\u5783\u573e\u6876\u3002\u7b2c\u56db\uff0c\u63a5\u8fd1\u6743\u529b\u4e0d\u4ee3\u8868\u81ea\u5df1\u62e5\u6709\u6743\u529b\uff0c\u63a5\u8fd1\u8d22\u5bcc\u4e0d\u4ee3\u8868\u81ea\u5df1\u62e5\u6709\u8d22\u5bcc\u3002\u6234\u4e0a\u9762\u5177\uff0c\u505a\u597d\u81ea\u5df1\u7684\u89d2\u8272\uff0c\u624d\u4f1a\u53d1\u89c9\uff0c\u4eba\u4ecd\u7136\u9700\u8981\u81ea\u5df1\u72ec\u5904\uff0c\u77ed\u6682\u7684\uff0c\u6765\u7f13\u89e3\u6234\u4e0a\u4e0d\u540c\u7684\u9762\u5177\u5e26\u6765\u7684\u526f\u4f5c\u7528\u3002 \u4e1a\u7acb\u5bb6\u6210\u3002\u7231\u60c5\u662f\u7f8e\u597d\uff0c\u8bfb\u535a\u671f\u95f4\u81ea\u5df1\u5c31\u6709\u8fd9\u6837\u4e00\u6bb5\u65f6\u5149\u3002\u5a5a\u59fb\u662f\u4e5f\u4ee4\u4eba\u5411\u5f80\u7684\uff0c\u5bb6\u5ead\u7ec8\u7a76\u662f\u6b8b\u9177\u793e\u4f1a\u7684\u6700\u7ec8\u7684\u6e2f\u6e7e\u3002\u65f6\u4ee3\u4e00\u76f4\u5728\u53d8\u5316\uff0c\u4ece\u6211\u9047\u5230\u4e00\u4e2a\u597d\u4eba\uff0c\u5230\u4f60\u662f\u4e00\u4e2a\u597d\u4eba\uff0c\u4e2a\u4eba\u54c1\u8d28\u5df2\u7ecf\u65e0\u6cd5\u523a\u6fc0\u7537\u5973\u53d1\u751f\u826f\u597d\u7684\u611f\u60c5\uff0c\u53ea\u6709\u597d\u7684\u4e2a\u4eba\u54c1\u8d28\u6ca1\u4eba\u5728\u610f\uff0c\u4e00\u534a\u5929\u4f7f\u4e00\u534a\u9b54\u9b3c\u66f4\u80fd\u60c5\u573a\u5f97\u610f\u3002\u5929\u4f7f\u662f\u771f\u7684\u5929\u4f7f\uff0c\u9b54\u9b3c\u4e5f\u662f\u771f\u7684\u9b54\u9b3c\uff0c\u6709\u591a\u5c11\u6b22\u4e50\u5c31\u6709\u591a\u5c11\u75db\u82e6\u3002\u8bb2\u70b9\u73b0\u5b9e\uff0c\u4e8b\u4e1a\u662f\u7b2c\u4e00\u4f4d\u7684\uff0c\u4e1a\u7acb\u624d\u80fd\u5bb6\u6210\u3002\u6709\u4e86\u81ea\u5df1\u4e8b\u4e1a\uff0c\u6709\u4e86\u4e00\u5b9a\u7684\u79ef\u84c4\uff0c\u624d\u80fd\u663e\u5f97\u62e5\u6709\u66f4\u591a\u7684\u4ef7\u503c\uff0c\u4e0d\u5fc5\u6210\u4e3a\u9b54\u9b3c\u3002 \u878d\u5165\u793e\u4f1a\u3002\u5fc3\u6001\u5f00\u653e\uff0c\u878d\u5165\u793e\u4f1a\uff0c\u662f\u89e3\u51b3\u8bed\u8a00\u548c\u4e60\u60ef\u4e0d\u9002\u5e94\u7684\u6cbb\u672c\u529e\u6cd5\u3002","title":"\u83b7\u5f97\u535a\u58eb\u5b66\u4f4d\u4e4b\u524d\u7684\u5371\u673a"},{"location":"posts/2023-10-07-phd-thesis/","text":"Ph.D. Thesis # The Internet of Things (IoT) is widely used in our daily life. Among them, Linux-based IoT devices are the most prevalent and of high security risks, and thus their security needs to be analyzed and strengthened urgently. Since hardware is not always available, not scalable, and hard to debug, virtualization technology is required to rehost Linux-based IoT devices on virtual execution environment (VEE). Virtualization for Linux-based IoT devices has two objectives. First, keep the fidelity of the VEE, that is, the VEE should be as close as possible to the physical Linux-based IoT device\u037e second, keep the security of the VEE, that is, each virtual Linux-based IoT device should be well isolated. Since Linux-based IoT devices consist of multiple complicated peripherals, i.e., Linux-based peripherals, virtual Linux-based peripherals become the main component and the biggest attack surface of the VEE. Therefore, to realize the two objectives, focusing on the Linux-based peripherals, we propose two new technologies, respectively, 1) model-guided kernel execution, which ensures the fidelity of the whole VEE by constructing high-fidelity virtual Linux-based peripherals\u037e 2) dependency-aware message model, which maintains the security of the whole VEE by fuzzing virtual Linux-based peripherals. First, we propose a new technique named model-guided kernel execution to keep the fidelity of the VEE. This technique builds state machines with Linux subsystems and extracts state transition conditions from the corresponding low-level drivers, addressing the problem that existing technologies cannot rehost Linux-based IoT device kernels. Evaluations show that the prototype FirmGuide generates 9 fully functional Type-I virtual peripherals and 64 minimally functional Type-II virtual peripherals, supporting 26 System on Chips\u037e successfully rehosts over 95% of the Linux-based IoT device kernels, covering two architectures and 22 kernel versions. Second, we propose a new technique named dependency-aware message model and design a virtual peripheral fuzzing framework to keep the security of the VEE. We model the input dependencies to the virtual peripherals as intra-message and inter-message dependencies. The framework extracts the intra-message dependencies from the virtual peripheral source code and learns the inter-message dependencies by three new mutators, addressing the problem that existing virtual peripheral fuzzers are low efficient due to the input dependencies. Evaluations show that the prototype ViDeZZo is both scalable, covering two hypervisors, four architectures, five device classes, and 28 virtual devices and efficient, achieving competitive code coverage faster compared to previous work. ViDeZZo reproduced 24 reported bugs and discovered 28 new bugs. We also provided seven patches merged into the hypervisor mainstream. Through the above two novel methods, this paper finally realizes a high-fidelity and high-security VEE to analyze and mine vulnerabilities for Linux-based IoT devices, which helps with the further development and application of Linux IoT device security research. Please download my thesis and slides . To whom it may concern, if you feel that Chapter 3/4 are not easy to follow, since they are translated from two individual papers FirmGuide and ViDeZZo , please read the original ones.","title":"Ph.D. Thesis"},{"location":"posts/2023-10-07-phd-thesis/#phd-thesis","text":"The Internet of Things (IoT) is widely used in our daily life. Among them, Linux-based IoT devices are the most prevalent and of high security risks, and thus their security needs to be analyzed and strengthened urgently. Since hardware is not always available, not scalable, and hard to debug, virtualization technology is required to rehost Linux-based IoT devices on virtual execution environment (VEE). Virtualization for Linux-based IoT devices has two objectives. First, keep the fidelity of the VEE, that is, the VEE should be as close as possible to the physical Linux-based IoT device\u037e second, keep the security of the VEE, that is, each virtual Linux-based IoT device should be well isolated. Since Linux-based IoT devices consist of multiple complicated peripherals, i.e., Linux-based peripherals, virtual Linux-based peripherals become the main component and the biggest attack surface of the VEE. Therefore, to realize the two objectives, focusing on the Linux-based peripherals, we propose two new technologies, respectively, 1) model-guided kernel execution, which ensures the fidelity of the whole VEE by constructing high-fidelity virtual Linux-based peripherals\u037e 2) dependency-aware message model, which maintains the security of the whole VEE by fuzzing virtual Linux-based peripherals. First, we propose a new technique named model-guided kernel execution to keep the fidelity of the VEE. This technique builds state machines with Linux subsystems and extracts state transition conditions from the corresponding low-level drivers, addressing the problem that existing technologies cannot rehost Linux-based IoT device kernels. Evaluations show that the prototype FirmGuide generates 9 fully functional Type-I virtual peripherals and 64 minimally functional Type-II virtual peripherals, supporting 26 System on Chips\u037e successfully rehosts over 95% of the Linux-based IoT device kernels, covering two architectures and 22 kernel versions. Second, we propose a new technique named dependency-aware message model and design a virtual peripheral fuzzing framework to keep the security of the VEE. We model the input dependencies to the virtual peripherals as intra-message and inter-message dependencies. The framework extracts the intra-message dependencies from the virtual peripheral source code and learns the inter-message dependencies by three new mutators, addressing the problem that existing virtual peripheral fuzzers are low efficient due to the input dependencies. Evaluations show that the prototype ViDeZZo is both scalable, covering two hypervisors, four architectures, five device classes, and 28 virtual devices and efficient, achieving competitive code coverage faster compared to previous work. ViDeZZo reproduced 24 reported bugs and discovered 28 new bugs. We also provided seven patches merged into the hypervisor mainstream. Through the above two novel methods, this paper finally realizes a high-fidelity and high-security VEE to analyze and mine vulnerabilities for Linux-based IoT devices, which helps with the further development and application of Linux IoT device security research. Please download my thesis and slides . To whom it may concern, if you feel that Chapter 3/4 are not easy to follow, since they are translated from two individual papers FirmGuide and ViDeZZo , please read the original ones.","title":"Ph.D. Thesis"},{"location":"posts/2023-10-11-literature-review/","text":"Where to find related works? # I don't know any related work # That's impossible. I know one related work and would like to find more # Find other papers that this related work cites or papers that cite this related work. For any other paper, repeat the process until we find all related ones. I have a full list of related works # I prefer to reflect historically and logically on the relevant research so that our paper can be seen as part of the historical and logical development of the technology. There are just too many papers # For daily reading, I plan to focus on the security big-4s as I guess there are 1,000+ papers/year accepted by them when I am writing this post, apprantly more including Sys/SE/PL/Arch conferences. Additionally, I have to narrow down the topics I should follow. Just no one can know every paper. Google Scholar # source:\"NDSS\" source:\"USENIX Security Symposium\" source:\"IEEE Symposium on Security and Privacy\" source:\"Conference on Computer and Communications\" DBLP # venue:NDSS: venue:USENIX_Security_Symposium: venue:IEEE_Symposium_on_Security_and_Privacy: venue:CCS:","title":"Where to find related works?"},{"location":"posts/2023-10-11-literature-review/#where-to-find-related-works","text":"","title":"Where to find related works?"},{"location":"posts/2023-10-11-literature-review/#i-dont-know-any-related-work","text":"That's impossible.","title":"I don't know any related work"},{"location":"posts/2023-10-11-literature-review/#i-know-one-related-work-and-would-like-to-find-more","text":"Find other papers that this related work cites or papers that cite this related work. For any other paper, repeat the process until we find all related ones.","title":"I know one related work and would like to find more"},{"location":"posts/2023-10-11-literature-review/#i-have-a-full-list-of-related-works","text":"I prefer to reflect historically and logically on the relevant research so that our paper can be seen as part of the historical and logical development of the technology.","title":"I have a full list of related works"},{"location":"posts/2023-10-11-literature-review/#there-are-just-too-many-papers","text":"For daily reading, I plan to focus on the security big-4s as I guess there are 1,000+ papers/year accepted by them when I am writing this post, apprantly more including Sys/SE/PL/Arch conferences. Additionally, I have to narrow down the topics I should follow. Just no one can know every paper.","title":"There are just too many papers"},{"location":"posts/2023-10-11-literature-review/#google-scholar","text":"source:\"NDSS\" source:\"USENIX Security Symposium\" source:\"IEEE Symposium on Security and Privacy\" source:\"Conference on Computer and Communications\"","title":"Google Scholar"},{"location":"posts/2023-10-11-literature-review/#dblp","text":"venue:NDSS: venue:USENIX_Security_Symposium: venue:IEEE_Symposium_on_Security_and_Privacy: venue:CCS:","title":"DBLP"},{"location":"posts/2024-02-26-ndss24/","text":"Notes for NDSS'24 # Interested topics - Session 1A: Firmware - Session 2A: Fuzz-all-the-things! - Session 4A: Leaks! - Session 5A: Trusted Execution Environments - Session 6B: Exploitation - Session 9A: Fuzz-more-things! - Session 11B: Reverse Engineering - Session 12B: Application Security Somewhat interested topics (Web/Network, Architecture, Mobile, IoT/Sensors, Antomotive) - Session 2B: Tor and Mixed Networks - Session 3A: Routing - Session 3B: Android and Deserialization - Session 6A: Network Protocols - Session 6C: Architecture and Cybercrime - Session 8A: Mobile Ecosystem - Session 8B: Acoustic Sensor Security - Session 9C: Occlusion and Vision - Session 10A: Internet-of-Everything - Session 11A: Visual Sensor Security - Session 12A: Network Security - Session 12C: Automotive Sensor Security - Session 13A: Web Security Uninterested topics (Cyrptography, Machine Learning/LLM, Blockchain, Human Factors, Usable Security) - Session 1B: Censorship - Session 1C: Applied Cryptography - Session 2C: Resource PKI - Session 3C: Federated Learning - Session 4B: ML Security (1) - Session 4C: Secrecy and Anonymity - Session 5B: ML Attacks (1) - Session 5C: Future Cryptography - Session 7A: Blockchain Protocols - Session 7B: ML Security (2) - Session 7C: Human Factors - Session 8C: Smart Contracts - Session 9B: ML Security (3) - Session 10B: Usable Security - Session 10C: Membership Inference - Session 11C: Prompt Engineering - Session 13B: ML Attacks (2) - Session 13C: ML Privacy Session 1A: Firmware # Decentralized Information-Flow Control for ROS2 We present Picaros, a decentralized information-flow control (DIFC) system tailored for ROS2. paper Facilitating Non-Intrusive In-Vivo Firmware Testing with Stateless Instrumentation Firmware fuzzing. We develop a decoupled firmware testing framework named IPEA, which shifts the overhead of resource-intensive analysis tasks from the microcontroller to the workstation. paper Comments: requires source-code. LDR: Secure and Efficient Linux Driver Runtime for Embedded TEE Systems Zhen Ling Sandboxing Linux kernel drivers. In this paper, we propose a TEE driver execution environment\u2014Linux driver runtime (LDR). The LDR reuses the existing TEE OS library functions whenever possible and redirects the kernel subsystem function calls to the Linux kernel in the normal world. paper Session 2A: Fuzz-all-the-things # REQSMINER: Automated Discovery of CDN Forwarding Request Inconsistencies and DoS Attacks with Grammar-based Fuzzing Haixin Duan and Jianjun Chen Network security. paper Large Language Model guided Protocol Fuzzing Marcel Bohme and Abhik Roychoudhury Protocol fuzzing. We have developed an LLM-guided protocol implementation fuzzing engine. Our protocol fuzzer CHATAFL constructs grammars for each message type in a protocol, and then mutates messages or predicts the next messages in a message sequence via interactions with LLMs. paper Comments: Compares to AFLNet, NSFuzz aganist targets in ProFuzzBench. CHATAFL covers 47.60% and 42.69% more state transitions, 29.55% and 25.75% more states, but only 5.81% and 6.74% more code, respectively. Apart from enhanced coverage, CHATAFL discovered nine distinct and previously unknown vulnerabilities on the latest ProFuzzBench targets. Comments: No new insight is proposed but the usage of LLM. Comments: LLM stops us from thinking deeply. SHAPFUZZ: Efficient Fuzzing via Shapley-Guided Byte Selection Xiao Xi New approach to prioritize input bytes during fuzzing. Some byte positions contribute more than others and this property often holds across different seeds. We propose a novel solution, called SHAPFUZZ, to guide byte selection and mutation in fuzzing processes. Specifically, SHAPFUZZ updates Shapley values (importance) of bytes when each input is tested during fuzzing with a low overhead. It utilizes contextual multiarmed bandit algorithm to make a trade off between mutating high Shapley value bytes and low-frequently chosen bytes. Session 4A: Leaks (Side-Channel Attacks) # Acoustic Keystroke Leakage on Smart Televisions This work develops and demonstrates a new side-channel attack that exposes keystrokes from the audio of two popular Smart TVs: Apple and Samsung. paper IdleLeak: Exploiting Idle State Side Effects for Information Leakage Daniel Gruss Specifically, we exploit the processor idle state C0.2 to monitor system activity and for novel means of data exfiltration, and the idle state C0.1 to monitor system activity on logical sibling cores. paper TEE-SHirT: Scalable Leakage-Free Cache Hierarchies for TEEs Yu David Liu Efficient and correct partitioning requires careful design. Towards this goal, TEE-SHirT makes three contributions: 1) we demonstrate how the hardware structures used for holding cache partitioning metadata can be effectively virtualized to avoid flushing of cache partition content on context switches and system calls; 2) we show how to support multi-threaded enclaves in TEESHirT, addressing the issues of coherency and consistency that arise with both intra-core and inter-core data sharing; 3) we develop a formal security model for TEE-SHirT to rigorously reason about the security of our design. paper Exploiting Sequence Number Leakage: TCP Hijacking in NAT-Enabled Wi-Fi Networks Network security. In this paper, we uncover a new side-channel vulnerability in the widely used NAT port preservation strategy and an insufficient reverse path validation strategy of Wi-Fi routers, which allows an off-path attacker to infer if there is one victim client in the same network communicating with another host on the Internet using TCP. paper Session 5A: Trusted Execution Environments # SENSE: Enhancing Microarchitectural Awareness for TEEs via Subscription-Based Notification We propose SENSE, a solution that actively exposes underlying microarchitectural information to userspace TEEs. SENSE enables userspace software in TEEs to subscribe to fine-grained microarchitectural events and utilize the events as a means to contextualize the ongoing microarchitectural states. We initially demonstrate SENSE\u2019s capability by applying it to defeat the state-of-the-art cache-based side-channel attacks. paper EnclaveFuzz: Finding Vulnerabilities in SGX Applications Chao Zhang Vulnerability detection of TEE. In this paper, we propose EnclaveFuzz, a multi-dimension structure-aware fuzzing framework that analyzes enclave sources to extract input structures and correlations, then generates fuzz harnesses that can produce valid inputs to pass sanity checks. To conduct multi-dimensional fuzzing, EnclaveFuzz creates data for all three input dimensions of an enclave, including both parameters and return values that enter an enclave, as well as direct untrusted memory access from within an enclave. To detect more types of vulnerabilities, we design a new sanitizer to detect both SGX-specific vulnerabilities and typical memory corruption vulnerabilities. Lastly, we provide a custom SDK to accelerate the fuzzing process and execute the enclave without the need for special hardware. paper Faults in Our Bus: Novel Bus Fault Attack to Break ARM TrustZone Debdeep Mukhopadhyay Fault injection. In this work, we present the first practical implications of targeting an orthogonal aspect of SoC\u2019s architecture: the system bus. We inject electromagnetic pulses onto the system bus during the execution of instructions involving processor-memory interaction. We show how address bus faults compromise software implementations of masked implementations of ciphers, illustrated using implementations of state-of-theart post-quantum cryptography (PQC) schemes, leaking entire secret keys with a single fault. We also demonstrate that data bus faults can be controlled and exploited to launch Differential Fault Analysis (DFA) attacks on table-based implementation of the Advanced Encryption Standard (AES). Furthermore, we demonstrate that the impact of such bus faults can be farreaching and mislead the security guarantees of the popular and widely used ARM TrustZone. Session 6B: Exploitation # UntrustIDE: Exploiting Weaknesses in VS Code Extensions SoK of VS code extensions. This paper seeks to systematically understand the landscape of vulnerabilities in VS Code\u2019s extension marketplace. We identify a set of four sources of untrusted input and three code targets that can be used for code injection and file integrity attacks and use them to design taint analysis rules in CodeQL. We then perform an ecosystemlevel analysis of the VS Code extension marketplace, studying 25,402 extensions that contain code. Our results show that while vulnerabilities are not pervasive, they exist and impact millions of users. Specifically, we find 21 extensions with verified proof of concept exploits of code injection attacks impacting a total of over 6 million installations. paper SyzBridge: Bridging the Gap in Exploitability Assessment of Linux Kernel Bugs in the Linux Ecosystem Zhiyun Qian Post-fuzzing and vulnerability assessment. We developed SyzBridge, a fully automated system that adapts upstream PoCs to downstream kernels. paper File Hijacking Vulnerability: The Elephant in the Room SoK and detection of file hijacking vulnerabilities. We developed a dynamic analysis tool, JERRY, which effectively detects FHVulns at runtime by simulating hijacking actions during program execution. paper Phoenix: Surviving Unpatched Vulnerabilities via Accurate and Efficient Filtering of Syscall Sequences Provanence. We propose Phoenix, a solution for preventing exploits of unpatched vulnerabilities by accurately and efficiently filtering sequences of system calls identified through provenance analysis. paper Session 9A: Fuzz-more-things! # DeepGo: Predictive Directed Greybox Fuzzing NUDT AI for fuzzing. In this paper, we propose DeepGo, a predictive directed greybox fuzzer that can combine historical and predicted information to steer DGF to reach the target site via an optimal pat paper MOCK: Optimizing Kernel Fuzzing Mutation with Context-aware Dependency Shouling Ji AI for kernel fuzzing. In this paper, we present a practical and effective kernel fuzzing framework, called MOCK, which is capable of learning the contextual dependencies in syscall sequences and then generating context-aware syscall sequences paper Predictive Context-sensitive Fuzzing VUSec In this paper, we show that a much more effective approach to context-sensitive fuzzing is possible. First, we propose function cloning as a backward-compatible instrumentation primitive to enable precise (i.e., collision-free) context-sensitive coverage tracking. Then, to tame the state explosion problem, we argue to account for contextual information only when a fuzzer explores contexts selected as promising. We propose a prediction scheme to identify one pool of such contexts: we analyze the data-flow diversity of the incoming argument values at call sites, exposing to the fuzzer a contextually refined clone of the callee if the latter sees incoming abstract objects that its uses at other sites do not. paper Comments: calling-context -> hash -> collision -> function cloning (For instance, if contextual information is represented only by the caller of a function, the analysis may produce separate results for the unique clones of the callee devised for each possible caller.) Session 11B: Reverse Engineering # SIGMADIFF: Semantics-Aware Deep Graph Matching for Pseudocode Diffing Heng Yin AI for diffing. To address the limitations, in this paper, we propose a semantics-aware, deep neural network-based model called SIGMADIFF for pseudocode diffing. paper DeGPT: Optimizing Decompiler Output with LLM Kai Chen AI for decompilation. paper DYNPRE: Protocol Reverse Engineering via Dynamic Inference Yu Jiang Protocol/model inference. This paper introduces DYNPRE, a protocol reverse engineering tool that exploits the interactive capabilities of protocol servers to obtain more semantic information and additional traffic for dynamic inference. This paper presents DYNPRE, a network trace based protocol reverse engineering tool that introduces dynamic inference for more accurate analysis. Unlike traditional methods that require high-quality static network traces for comprehensive statistical analysis, DYNPRE establishes active communication with the server using carefully constructed probe messages to extract insightful information and acquire additional samples as needed, making it well-suited for input traces with limited information. paper Gradient Shaping: Enhancing Backdoor Attack Against Reverse Engineering AI model reverse engineering. paper Session 12B: Application Security # Efficient Use-After-Free Prevention with Opportunistic Page-Level Sweeping UNIST Introduction of new allocator against UAF This study proposes HUSHVAC, an allocator that performs delayed reuse in such a way that the distribution of heap chunks becomes more friendly to such workloads. A paper","title":"Notes for NDSS'24"},{"location":"posts/2024-02-26-ndss24/#notes-for-ndss24","text":"Interested topics - Session 1A: Firmware - Session 2A: Fuzz-all-the-things! - Session 4A: Leaks! - Session 5A: Trusted Execution Environments - Session 6B: Exploitation - Session 9A: Fuzz-more-things! - Session 11B: Reverse Engineering - Session 12B: Application Security Somewhat interested topics (Web/Network, Architecture, Mobile, IoT/Sensors, Antomotive) - Session 2B: Tor and Mixed Networks - Session 3A: Routing - Session 3B: Android and Deserialization - Session 6A: Network Protocols - Session 6C: Architecture and Cybercrime - Session 8A: Mobile Ecosystem - Session 8B: Acoustic Sensor Security - Session 9C: Occlusion and Vision - Session 10A: Internet-of-Everything - Session 11A: Visual Sensor Security - Session 12A: Network Security - Session 12C: Automotive Sensor Security - Session 13A: Web Security Uninterested topics (Cyrptography, Machine Learning/LLM, Blockchain, Human Factors, Usable Security) - Session 1B: Censorship - Session 1C: Applied Cryptography - Session 2C: Resource PKI - Session 3C: Federated Learning - Session 4B: ML Security (1) - Session 4C: Secrecy and Anonymity - Session 5B: ML Attacks (1) - Session 5C: Future Cryptography - Session 7A: Blockchain Protocols - Session 7B: ML Security (2) - Session 7C: Human Factors - Session 8C: Smart Contracts - Session 9B: ML Security (3) - Session 10B: Usable Security - Session 10C: Membership Inference - Session 11C: Prompt Engineering - Session 13B: ML Attacks (2) - Session 13C: ML Privacy","title":"Notes for NDSS'24"},{"location":"posts/2024-02-26-ndss24/#session-1a-firmware","text":"Decentralized Information-Flow Control for ROS2 We present Picaros, a decentralized information-flow control (DIFC) system tailored for ROS2. paper Facilitating Non-Intrusive In-Vivo Firmware Testing with Stateless Instrumentation Firmware fuzzing. We develop a decoupled firmware testing framework named IPEA, which shifts the overhead of resource-intensive analysis tasks from the microcontroller to the workstation. paper Comments: requires source-code. LDR: Secure and Efficient Linux Driver Runtime for Embedded TEE Systems Zhen Ling Sandboxing Linux kernel drivers. In this paper, we propose a TEE driver execution environment\u2014Linux driver runtime (LDR). The LDR reuses the existing TEE OS library functions whenever possible and redirects the kernel subsystem function calls to the Linux kernel in the normal world. paper","title":"Session 1A: Firmware"},{"location":"posts/2024-02-26-ndss24/#session-2a-fuzz-all-the-things","text":"REQSMINER: Automated Discovery of CDN Forwarding Request Inconsistencies and DoS Attacks with Grammar-based Fuzzing Haixin Duan and Jianjun Chen Network security. paper Large Language Model guided Protocol Fuzzing Marcel Bohme and Abhik Roychoudhury Protocol fuzzing. We have developed an LLM-guided protocol implementation fuzzing engine. Our protocol fuzzer CHATAFL constructs grammars for each message type in a protocol, and then mutates messages or predicts the next messages in a message sequence via interactions with LLMs. paper Comments: Compares to AFLNet, NSFuzz aganist targets in ProFuzzBench. CHATAFL covers 47.60% and 42.69% more state transitions, 29.55% and 25.75% more states, but only 5.81% and 6.74% more code, respectively. Apart from enhanced coverage, CHATAFL discovered nine distinct and previously unknown vulnerabilities on the latest ProFuzzBench targets. Comments: No new insight is proposed but the usage of LLM. Comments: LLM stops us from thinking deeply. SHAPFUZZ: Efficient Fuzzing via Shapley-Guided Byte Selection Xiao Xi New approach to prioritize input bytes during fuzzing. Some byte positions contribute more than others and this property often holds across different seeds. We propose a novel solution, called SHAPFUZZ, to guide byte selection and mutation in fuzzing processes. Specifically, SHAPFUZZ updates Shapley values (importance) of bytes when each input is tested during fuzzing with a low overhead. It utilizes contextual multiarmed bandit algorithm to make a trade off between mutating high Shapley value bytes and low-frequently chosen bytes.","title":"Session 2A: Fuzz-all-the-things"},{"location":"posts/2024-02-26-ndss24/#session-4a-leaks-side-channel-attacks","text":"Acoustic Keystroke Leakage on Smart Televisions This work develops and demonstrates a new side-channel attack that exposes keystrokes from the audio of two popular Smart TVs: Apple and Samsung. paper IdleLeak: Exploiting Idle State Side Effects for Information Leakage Daniel Gruss Specifically, we exploit the processor idle state C0.2 to monitor system activity and for novel means of data exfiltration, and the idle state C0.1 to monitor system activity on logical sibling cores. paper TEE-SHirT: Scalable Leakage-Free Cache Hierarchies for TEEs Yu David Liu Efficient and correct partitioning requires careful design. Towards this goal, TEE-SHirT makes three contributions: 1) we demonstrate how the hardware structures used for holding cache partitioning metadata can be effectively virtualized to avoid flushing of cache partition content on context switches and system calls; 2) we show how to support multi-threaded enclaves in TEESHirT, addressing the issues of coherency and consistency that arise with both intra-core and inter-core data sharing; 3) we develop a formal security model for TEE-SHirT to rigorously reason about the security of our design. paper Exploiting Sequence Number Leakage: TCP Hijacking in NAT-Enabled Wi-Fi Networks Network security. In this paper, we uncover a new side-channel vulnerability in the widely used NAT port preservation strategy and an insufficient reverse path validation strategy of Wi-Fi routers, which allows an off-path attacker to infer if there is one victim client in the same network communicating with another host on the Internet using TCP. paper","title":"Session 4A: Leaks (Side-Channel Attacks)"},{"location":"posts/2024-02-26-ndss24/#session-5a-trusted-execution-environments","text":"SENSE: Enhancing Microarchitectural Awareness for TEEs via Subscription-Based Notification We propose SENSE, a solution that actively exposes underlying microarchitectural information to userspace TEEs. SENSE enables userspace software in TEEs to subscribe to fine-grained microarchitectural events and utilize the events as a means to contextualize the ongoing microarchitectural states. We initially demonstrate SENSE\u2019s capability by applying it to defeat the state-of-the-art cache-based side-channel attacks. paper EnclaveFuzz: Finding Vulnerabilities in SGX Applications Chao Zhang Vulnerability detection of TEE. In this paper, we propose EnclaveFuzz, a multi-dimension structure-aware fuzzing framework that analyzes enclave sources to extract input structures and correlations, then generates fuzz harnesses that can produce valid inputs to pass sanity checks. To conduct multi-dimensional fuzzing, EnclaveFuzz creates data for all three input dimensions of an enclave, including both parameters and return values that enter an enclave, as well as direct untrusted memory access from within an enclave. To detect more types of vulnerabilities, we design a new sanitizer to detect both SGX-specific vulnerabilities and typical memory corruption vulnerabilities. Lastly, we provide a custom SDK to accelerate the fuzzing process and execute the enclave without the need for special hardware. paper Faults in Our Bus: Novel Bus Fault Attack to Break ARM TrustZone Debdeep Mukhopadhyay Fault injection. In this work, we present the first practical implications of targeting an orthogonal aspect of SoC\u2019s architecture: the system bus. We inject electromagnetic pulses onto the system bus during the execution of instructions involving processor-memory interaction. We show how address bus faults compromise software implementations of masked implementations of ciphers, illustrated using implementations of state-of-theart post-quantum cryptography (PQC) schemes, leaking entire secret keys with a single fault. We also demonstrate that data bus faults can be controlled and exploited to launch Differential Fault Analysis (DFA) attacks on table-based implementation of the Advanced Encryption Standard (AES). Furthermore, we demonstrate that the impact of such bus faults can be farreaching and mislead the security guarantees of the popular and widely used ARM TrustZone.","title":"Session 5A: Trusted Execution Environments"},{"location":"posts/2024-02-26-ndss24/#session-6b-exploitation","text":"UntrustIDE: Exploiting Weaknesses in VS Code Extensions SoK of VS code extensions. This paper seeks to systematically understand the landscape of vulnerabilities in VS Code\u2019s extension marketplace. We identify a set of four sources of untrusted input and three code targets that can be used for code injection and file integrity attacks and use them to design taint analysis rules in CodeQL. We then perform an ecosystemlevel analysis of the VS Code extension marketplace, studying 25,402 extensions that contain code. Our results show that while vulnerabilities are not pervasive, they exist and impact millions of users. Specifically, we find 21 extensions with verified proof of concept exploits of code injection attacks impacting a total of over 6 million installations. paper SyzBridge: Bridging the Gap in Exploitability Assessment of Linux Kernel Bugs in the Linux Ecosystem Zhiyun Qian Post-fuzzing and vulnerability assessment. We developed SyzBridge, a fully automated system that adapts upstream PoCs to downstream kernels. paper File Hijacking Vulnerability: The Elephant in the Room SoK and detection of file hijacking vulnerabilities. We developed a dynamic analysis tool, JERRY, which effectively detects FHVulns at runtime by simulating hijacking actions during program execution. paper Phoenix: Surviving Unpatched Vulnerabilities via Accurate and Efficient Filtering of Syscall Sequences Provanence. We propose Phoenix, a solution for preventing exploits of unpatched vulnerabilities by accurately and efficiently filtering sequences of system calls identified through provenance analysis. paper","title":"Session 6B: Exploitation"},{"location":"posts/2024-02-26-ndss24/#session-9a-fuzz-more-things","text":"DeepGo: Predictive Directed Greybox Fuzzing NUDT AI for fuzzing. In this paper, we propose DeepGo, a predictive directed greybox fuzzer that can combine historical and predicted information to steer DGF to reach the target site via an optimal pat paper MOCK: Optimizing Kernel Fuzzing Mutation with Context-aware Dependency Shouling Ji AI for kernel fuzzing. In this paper, we present a practical and effective kernel fuzzing framework, called MOCK, which is capable of learning the contextual dependencies in syscall sequences and then generating context-aware syscall sequences paper Predictive Context-sensitive Fuzzing VUSec In this paper, we show that a much more effective approach to context-sensitive fuzzing is possible. First, we propose function cloning as a backward-compatible instrumentation primitive to enable precise (i.e., collision-free) context-sensitive coverage tracking. Then, to tame the state explosion problem, we argue to account for contextual information only when a fuzzer explores contexts selected as promising. We propose a prediction scheme to identify one pool of such contexts: we analyze the data-flow diversity of the incoming argument values at call sites, exposing to the fuzzer a contextually refined clone of the callee if the latter sees incoming abstract objects that its uses at other sites do not. paper Comments: calling-context -> hash -> collision -> function cloning (For instance, if contextual information is represented only by the caller of a function, the analysis may produce separate results for the unique clones of the callee devised for each possible caller.)","title":"Session 9A: Fuzz-more-things!"},{"location":"posts/2024-02-26-ndss24/#session-11b-reverse-engineering","text":"SIGMADIFF: Semantics-Aware Deep Graph Matching for Pseudocode Diffing Heng Yin AI for diffing. To address the limitations, in this paper, we propose a semantics-aware, deep neural network-based model called SIGMADIFF for pseudocode diffing. paper DeGPT: Optimizing Decompiler Output with LLM Kai Chen AI for decompilation. paper DYNPRE: Protocol Reverse Engineering via Dynamic Inference Yu Jiang Protocol/model inference. This paper introduces DYNPRE, a protocol reverse engineering tool that exploits the interactive capabilities of protocol servers to obtain more semantic information and additional traffic for dynamic inference. This paper presents DYNPRE, a network trace based protocol reverse engineering tool that introduces dynamic inference for more accurate analysis. Unlike traditional methods that require high-quality static network traces for comprehensive statistical analysis, DYNPRE establishes active communication with the server using carefully constructed probe messages to extract insightful information and acquire additional samples as needed, making it well-suited for input traces with limited information. paper Gradient Shaping: Enhancing Backdoor Attack Against Reverse Engineering AI model reverse engineering. paper","title":"Session 11B: Reverse Engineering"},{"location":"posts/2024-02-26-ndss24/#session-12b-application-security","text":"Efficient Use-After-Free Prevention with Opportunistic Page-Level Sweeping UNIST Introduction of new allocator against UAF This study proposes HUSHVAC, an allocator that performs delayed reuse in such a way that the distribution of heap chunks becomes more friendly to such workloads. A paper","title":"Session 12B: Application Security"},{"location":"posts/2024-04-17-dsl/","text":"Introduction to Domain-Specific Language # Term: Domain-specific lauguage v.s. General-purpose language Examples: widely used for common domains: HTML for web pages, used by one or a few pieces of software, such as MUSH for multiplayer online games Classification: domain-specific markup languages (Latex/XML/HTML/Markdown), domain-specific modeling languages (specification languages) (flowchart/UML), domain specific programming languages Term: Language-oriented programming and language workbench Domain-specific modeling languages # Keywords: rules to express data, information or knowledge or systems Classification: graphical or textual Classification: executable (model interpreter or code generator) or non-executable List of graphical types (from wikipedia) Behavior Trees: to express what the stakeholder needs Business Process Modeling Notation (BPMN, and the XML form BPML): to express what the business process will look like C-K theory: to express innovative design DRAKON: to express an algorithm or a stepwise process, and a family of programming languages EXPRESS and EXPRESS-G: to express data objects and relationships among data objects Extended Enterprise Modeling Language (EEML): to express the business process across a number of layers Flowchart: to express an algorithm or a stepwise process Fundamental Modeling Concepts (FMC): modeling language for software-intensive systems. IDEF is a family of modeling languages, which include IDEF0 for functional modeling, IDEF1X for information modeling, IDEF3 for business process modeling, IDEF4 for Object-Oriented Design and IDEF5 for modeling ontologies. Jackson Structured Programming (JSP): to express structured programming LePUS3: to model large object-oriented (Java, C++, C#) programs and design patterns Lifecycle Modeling Language: to express the full system lifecycle Object-Role Modeling (ORM): to express concepts Petri nets: to formally express the logical interactions among parts or of the flow of activities in complex systems Southbeach Notation is a visual modeling language used to describe situations in terms of agents that are considered useful or harmful from the modeler's perspective. The notation shows how the agents interact with each other and whether this interaction improves or worsens the situation. (?) Specification and Description Language (SDL) is a specification language targeted at the unambiguous specification and description of the behavior of reactive and distributed systems. SysML is a Domain-Specific Modeling language for systems engineering that is defined as a UML profile (customization). Unified Modeling Language (UML) is a general-purpose modeling language that is an industry standard for specifying software-intensive systems. Service-oriented modeling framework (SOMF) is a holistic language for designing enterprise and application level architecture models in the space of enterprise architecture, virtualization, service-oriented architecture (SOA), cloud computing, and more. Architecture description language (ADL): to express the system architecture of a system Architecture Analysis & Design Language (AADL): to express the system architecture of a system EAST-ADL is a Domain-Specific Modeling language dedicated to automotive system design. Energy Systems Language (ESL), a language that aims to model ecological energetics & global economics. IEC 61499 defines Domain-Specific Modeling language dedicated to distribute industrial process measurement and control systems. List of textual types (from wikipedia) Gellish: to express facts or make statements, queries and answers Specification Language # An important use of specification languages is enabling the creation of proofs of program correctness. Not interested in this. My gole is to find a proper domain-specific language to describe the behavior of devices (or peripherals). Well, one interesting thing is the lifecycle modeling language (specified here ). It defines \"Entity\", \"Relationship\", \"Attribute\", and \"Attribute on Relationship\". They have equivalent English language elements: noun, verb, adjective and adverb. This is good but too general. In the end, I choose to use the finite state machine.","title":"Introduction to Domain-Specific Language"},{"location":"posts/2024-04-17-dsl/#introduction-to-domain-specific-language","text":"Term: Domain-specific lauguage v.s. General-purpose language Examples: widely used for common domains: HTML for web pages, used by one or a few pieces of software, such as MUSH for multiplayer online games Classification: domain-specific markup languages (Latex/XML/HTML/Markdown), domain-specific modeling languages (specification languages) (flowchart/UML), domain specific programming languages Term: Language-oriented programming and language workbench","title":"Introduction to Domain-Specific Language"},{"location":"posts/2024-04-17-dsl/#domain-specific-modeling-languages","text":"Keywords: rules to express data, information or knowledge or systems Classification: graphical or textual Classification: executable (model interpreter or code generator) or non-executable List of graphical types (from wikipedia) Behavior Trees: to express what the stakeholder needs Business Process Modeling Notation (BPMN, and the XML form BPML): to express what the business process will look like C-K theory: to express innovative design DRAKON: to express an algorithm or a stepwise process, and a family of programming languages EXPRESS and EXPRESS-G: to express data objects and relationships among data objects Extended Enterprise Modeling Language (EEML): to express the business process across a number of layers Flowchart: to express an algorithm or a stepwise process Fundamental Modeling Concepts (FMC): modeling language for software-intensive systems. IDEF is a family of modeling languages, which include IDEF0 for functional modeling, IDEF1X for information modeling, IDEF3 for business process modeling, IDEF4 for Object-Oriented Design and IDEF5 for modeling ontologies. Jackson Structured Programming (JSP): to express structured programming LePUS3: to model large object-oriented (Java, C++, C#) programs and design patterns Lifecycle Modeling Language: to express the full system lifecycle Object-Role Modeling (ORM): to express concepts Petri nets: to formally express the logical interactions among parts or of the flow of activities in complex systems Southbeach Notation is a visual modeling language used to describe situations in terms of agents that are considered useful or harmful from the modeler's perspective. The notation shows how the agents interact with each other and whether this interaction improves or worsens the situation. (?) Specification and Description Language (SDL) is a specification language targeted at the unambiguous specification and description of the behavior of reactive and distributed systems. SysML is a Domain-Specific Modeling language for systems engineering that is defined as a UML profile (customization). Unified Modeling Language (UML) is a general-purpose modeling language that is an industry standard for specifying software-intensive systems. Service-oriented modeling framework (SOMF) is a holistic language for designing enterprise and application level architecture models in the space of enterprise architecture, virtualization, service-oriented architecture (SOA), cloud computing, and more. Architecture description language (ADL): to express the system architecture of a system Architecture Analysis & Design Language (AADL): to express the system architecture of a system EAST-ADL is a Domain-Specific Modeling language dedicated to automotive system design. Energy Systems Language (ESL), a language that aims to model ecological energetics & global economics. IEC 61499 defines Domain-Specific Modeling language dedicated to distribute industrial process measurement and control systems. List of textual types (from wikipedia) Gellish: to express facts or make statements, queries and answers","title":"Domain-specific modeling languages"},{"location":"posts/2024-04-17-dsl/#specification-language","text":"An important use of specification languages is enabling the creation of proofs of program correctness. Not interested in this. My gole is to find a proper domain-specific language to describe the behavior of devices (or peripherals). Well, one interesting thing is the lifecycle modeling language (specified here ). It defines \"Entity\", \"Relationship\", \"Attribute\", and \"Attribute on Relationship\". They have equivalent English language elements: noun, verb, adjective and adverb. This is good but too general. In the end, I choose to use the finite state machine.","title":"Specification Language"},{"location":"posts/2024-05-01-sp24/","text":"Quick notes for SP'24 # Interesting topics Track 1 - Session 6: Fuzzing has 4 papers about directed greybox fuzzing has one paper about harness generation has one paper about fuzzing distributed systems has one paper about post-fuzzing has one SoK paper about fuzzing evaluation Track 1 - Session 11: Software Analysis in general: static program analysis, taint analysis vulnerabilities: Java deserialization, API misuses new staff: undefined-oriented programming, Rust ASAN Track 2 - Session 12: Systems Security attacks: tabbed out defenses: syscall wall, line-rate cross-host attack prevention, discovery of vuls in wireless/usb stacks and kernels ... Somewhat interesting topics (Web/Network, Architecture, Mobile, IoT/Sensors, Antomotive, Cryptography) Track 1 - Session 2: Web Security Track 2 - Session 2: Security in the Real World Track 1 - Session 4: Software Supply Chain Trace 3 - Session 2: Crypto with Others Track 3 - Session 4: Passwords and Authentication Track 3 - Session 7: Crypto for Messaging and Storage Track 3 - Session 8: Crypto Track 1 - Session 7: IoT Security Track 1 - Session 10: Provenance and Enterprise Security Track 2 - Session 10: Hardware Sidechannels Track 2 - Session 11: TEE and Hardware Security Track 1 - Session 12: Network Security Track 1 - Session 8: Wireless Security and Privacy Uninteresting topics (Machine Learning/LLM, Blockchain, Human Factors, Usable Security, Privacy) Track 1 - Session 1: Scams and Phishing Track 2 - Session 1: Deep Fakes Track 3 - Session 1: Privacy for Datasets Track 1 - Session 3: Humans Track 2 - Session 3: LLMs and Security Track 3 - Session 3: Differential Privacy Track 2 - Session 4: ML Attacks Track 1 - Session 5: Being Secure Online Track 2 - Session 5: ML Security for Audio and Video Track 3 - Session 5: Zero Knowledge Track 2 - Session 6: ML Backdoors Track 3 - Session 6: Blockchain I Track 2 - Session 7: ML Defenses I Track 2 - Session 8: ML Defenses II Track 1 - Session 9: Applications of Privacy Track 2 - Session 9: Miscellaneous ML Track 3 - Session 9: Security for Democracy Track 3 - Session 10: Blockchain II Track 3 - Session 11: ORAM and PIR Track 3 - Session 12: Privacy and ML","title":"Quick notes for SP'24"},{"location":"posts/2024-05-01-sp24/#quick-notes-for-sp24","text":"Interesting topics Track 1 - Session 6: Fuzzing has 4 papers about directed greybox fuzzing has one paper about harness generation has one paper about fuzzing distributed systems has one paper about post-fuzzing has one SoK paper about fuzzing evaluation Track 1 - Session 11: Software Analysis in general: static program analysis, taint analysis vulnerabilities: Java deserialization, API misuses new staff: undefined-oriented programming, Rust ASAN Track 2 - Session 12: Systems Security attacks: tabbed out defenses: syscall wall, line-rate cross-host attack prevention, discovery of vuls in wireless/usb stacks and kernels ... Somewhat interesting topics (Web/Network, Architecture, Mobile, IoT/Sensors, Antomotive, Cryptography) Track 1 - Session 2: Web Security Track 2 - Session 2: Security in the Real World Track 1 - Session 4: Software Supply Chain Trace 3 - Session 2: Crypto with Others Track 3 - Session 4: Passwords and Authentication Track 3 - Session 7: Crypto for Messaging and Storage Track 3 - Session 8: Crypto Track 1 - Session 7: IoT Security Track 1 - Session 10: Provenance and Enterprise Security Track 2 - Session 10: Hardware Sidechannels Track 2 - Session 11: TEE and Hardware Security Track 1 - Session 12: Network Security Track 1 - Session 8: Wireless Security and Privacy Uninteresting topics (Machine Learning/LLM, Blockchain, Human Factors, Usable Security, Privacy) Track 1 - Session 1: Scams and Phishing Track 2 - Session 1: Deep Fakes Track 3 - Session 1: Privacy for Datasets Track 1 - Session 3: Humans Track 2 - Session 3: LLMs and Security Track 3 - Session 3: Differential Privacy Track 2 - Session 4: ML Attacks Track 1 - Session 5: Being Secure Online Track 2 - Session 5: ML Security for Audio and Video Track 3 - Session 5: Zero Knowledge Track 2 - Session 6: ML Backdoors Track 3 - Session 6: Blockchain I Track 2 - Session 7: ML Defenses I Track 2 - Session 8: ML Defenses II Track 1 - Session 9: Applications of Privacy Track 2 - Session 9: Miscellaneous ML Track 3 - Session 9: Security for Democracy Track 3 - Session 10: Blockchain II Track 3 - Session 11: ORAM and PIR Track 3 - Session 12: Privacy and ML","title":"Quick notes for SP'24"},{"location":"posts/2024-05-08-tech-notes/","text":"Tech notes on 20240508 # Exploring Linux's New Random Kmalloc Caches Strategic defense: mitigate entirely, make it as hard as possible -> bespoke approach for each bug 16 caches for a size are still limited since it does not touch the page_allocator. Your NVMe Had Been Syz\u2019ed: Fuzzing NVMe-oF/TCP Driver for Linux with Syzkaller Remote KCOV is supported by kcov_remote_start()/kcov_remote_stop(). This blog shows how to pass the REMOTE_HANDLE to a new subsystem. Programmable System Call Security with eBPF Syscall filter -> Least priviliedge BPF: Bytecode v.s. JIT Seccomp-BPF (cBPF) -> Seccomp-eBPF (eBPF) sysfilter: Automated System Call Filtering for Commodity Software Invoke seccomp directly (sandboxing) v.s. Inject seccomp via patch-elf (sandboxed) SafeFetch: Practical Double-Fetch Protection with Kernel-Fetch Caching Zero copy Fetch-side cache v.s. Write-side cache (Midas) Python Garbage Collector Reference count, mark-and-sweep Stack Unwinding When an exception is thrown and control passes from a try block to a handler, the C++ run time calls destructors for all automatic objects constructed since the beginning of the try block. This process is called stack unwinding. If during stack unwinding a destructor throws an exception and that exception is not handled, the terminate() function is called. The Magic Behind Python Generator Functions Python stack frames are not allocated on stack memory. Instead, they are allocated on heap memory. What this essentially means is that python stack frames can outlive their respective function calls. setjmp/longjmp setjmp and longjmp mechanism works as follows: when setjmp is invoked the first time it returns 0 and fill the jmp_buf structure with the calling environment and the signal mask. The calling environment represents the state of registers and the point in the code where the function was called. When longjmp is called the state saved in the jmp_buf variable is copied back in the processor and computation starts over from the return point of setjmp function but the returned value is the one passed as second argument to longjmp function. SoK: On the Analysis of Web Browser Security Some staff related to KVM: Linux Kernel's KVM for x86_64 includes kvm.o, kvm_intel.o, and kvm_amd.o. Ways to pass data from Linux Kernel to user space: procfs (maps kernel variable to usespace, mostly readonly), sysctl (/proc/sys, readable/writeable), sysfs (/sys, driver-specific), netlink (socket, net-tools->procfs deprecated, iproute2->netlink, sota), uio (map physical address and interrupts), ioctl, mmap , debugfs (very easy to use and very recommanded).","title":"Tech notes on 20240508"},{"location":"posts/2024-05-08-tech-notes/#tech-notes-on-20240508","text":"Exploring Linux's New Random Kmalloc Caches Strategic defense: mitigate entirely, make it as hard as possible -> bespoke approach for each bug 16 caches for a size are still limited since it does not touch the page_allocator. Your NVMe Had Been Syz\u2019ed: Fuzzing NVMe-oF/TCP Driver for Linux with Syzkaller Remote KCOV is supported by kcov_remote_start()/kcov_remote_stop(). This blog shows how to pass the REMOTE_HANDLE to a new subsystem. Programmable System Call Security with eBPF Syscall filter -> Least priviliedge BPF: Bytecode v.s. JIT Seccomp-BPF (cBPF) -> Seccomp-eBPF (eBPF) sysfilter: Automated System Call Filtering for Commodity Software Invoke seccomp directly (sandboxing) v.s. Inject seccomp via patch-elf (sandboxed) SafeFetch: Practical Double-Fetch Protection with Kernel-Fetch Caching Zero copy Fetch-side cache v.s. Write-side cache (Midas) Python Garbage Collector Reference count, mark-and-sweep Stack Unwinding When an exception is thrown and control passes from a try block to a handler, the C++ run time calls destructors for all automatic objects constructed since the beginning of the try block. This process is called stack unwinding. If during stack unwinding a destructor throws an exception and that exception is not handled, the terminate() function is called. The Magic Behind Python Generator Functions Python stack frames are not allocated on stack memory. Instead, they are allocated on heap memory. What this essentially means is that python stack frames can outlive their respective function calls. setjmp/longjmp setjmp and longjmp mechanism works as follows: when setjmp is invoked the first time it returns 0 and fill the jmp_buf structure with the calling environment and the signal mask. The calling environment represents the state of registers and the point in the code where the function was called. When longjmp is called the state saved in the jmp_buf variable is copied back in the processor and computation starts over from the return point of setjmp function but the returned value is the one passed as second argument to longjmp function. SoK: On the Analysis of Web Browser Security Some staff related to KVM: Linux Kernel's KVM for x86_64 includes kvm.o, kvm_intel.o, and kvm_amd.o. Ways to pass data from Linux Kernel to user space: procfs (maps kernel variable to usespace, mostly readonly), sysctl (/proc/sys, readable/writeable), sysfs (/sys, driver-specific), netlink (socket, net-tools->procfs deprecated, iproute2->netlink, sota), uio (map physical address and interrupts), ioctl, mmap , debugfs (very easy to use and very recommanded).","title":"Tech notes on 20240508"},{"location":"posts/2024-05-15-tech-notes/","text":"Tech notes on 20240513 # How does script interpreter work? The finalizer of an object is invoked as soon as the refcount of the object becomes 0. There are at most thousands of ways to trigger finalizers. Weak reference prevents objected from not being collected. As soon as an exception is raised, the control flow goes to the main loop via setjmp/longjmp without unwinding (causing memory leaks => refcount-based GC won't work => it needs mark-and-sweep-based GC) or explicity error propagation (refcount-based GC is working => no memory leaks). Exceptions are handled before executing each bytecode (after stack unwinding). try: finally: can have double returns. Generators have a lot of exception handling issues because generators handle heap-based stacks as well. Type is defined by its behavior that is defined by magic methods (duck typing). No security policy is enforced when using magic methods. Language interoperability : Language interoperability is the capability of two different programming languages to natively interact as part of the same system and operate on the same kind of data structures. There are three methods for interoperability. Object models: COM (COM is a very ambiguous term. It can be a COM format , a COM port , and Common Object Model, a binary interface introduced by Microsoft); Virtual Machine (a specialised intermediate language that different languages compile down to): Java Virtual Machine; foreign function interfaces (FFI), that is in the format of a wrapper library, also called bindings: JNI/JNA/ SWIG . Challenges when implementing language interoperability Object model differences: e.g., permit multiple inheritance or not Memory model differences: e.g., have garbage collector or not Mutability: e.g., immutable or not Favocado (NDSS'21): JS engines are embedded in commercial software, e.g., Adobe Acrobat Reader, Foxit PDF Reader, Chromium, and WebKit. Even without considering the binding layers, it is difficult to effectively fuzz JavaScript engines in the first place. To generate syntactically correct JavaScript code as test cases, modern JavaScript engine fuzzers use context-free grammars or existing semantically correct test cases. While no JavaScript fuzzers generate fully semantically correct code as test cases, some fuzzers can generate test cases in a semantic-aware manner. However, the percentage of rejected test cases that are generated by these semantic-aware fuzzers is still a significant problem. Another challenge for effectively fuzzing the binding layer is the enormous input space, e.g., in Chromium, there are more than 1,000 DOM binding objects. Each DOM object may have a multitude of methods and properties, some of which may require hard-to-satisfy arguments such as other DOM objects. Drawbacks of Favocado From Minerva: Although Favocado also generates semantically-correct test cases, its typebased relations introduce redundant relations between APIs. Besides, its conservative generation strategy only choose a few interface objects in each test case, hindering the fuzzer from state space exploration. From SAGE: Favocado extracts semantic information from browsers\u2019 source code, it doesn't make good use of them. Its semantic information is maintained in a JSON-like structure instead of CFG, which make it difficult to effectively generate highly-structured inputs. Additionally, its flawed implementation makes it challenging to bypass syntactic checks. Favocado can only explore a limited set of browser backend logic. Cooper (NDSS'22): In this paper, we propose cooperative mutation, which modifies both the script code and the program native input to trigger bugs in binding code. We develop three novel techniques to enable practical cooperative mutation on popular scripting languages: we first cluster objects into semantics similar classes to reduce the mutation space of native inputs; then, we statistically infer the relationship between script code and object classes based on a large number of executions; at last, we use the inferred relationship to select proper objects and related script code for targeted mutation. We applied our tool, COOPER, on three popular systems that integrate scripting languages, including Adobe Acrobat, Foxit Reader and Microsoft Word. COOPER successfully found 134 previously unknown bugs. TypeOracle (ICSE'23): Full name: Operand-Variation-Oriented Differential Analysis for Fuzzing Binding Calls in PDF Readers The parameter types of a binding call are inferred by executing the binding call with different values of different types and investigating which types cause an expected effect on the instruction operands. The inferred type information is used to guide the test generation in fuzzing. Gramatron (ISSTA'21) A fuzzer must generate syntactically valid inputs to fuzz beyond the application parser. Previous fuzzers employ parse trees with CFG for input generation and mutation. Existing grammar-aware fuzzers are ineffective at synthesizing complex bug triggers due to biased sampling and localized small-scale mutations. Gramatron performs an automatic two-step transformation on the CFG to create a grammar automaton. First, it transforms the CFG into its GNF which performs the grammar restructuring. Second, it converts the GNF of the grammar into an automaton. Gramatron can encode any input that abides by the grammar as an automaton walk. Grammar automatons restructure the grammar enabling the fuzzer to perform unbiased sampling from the input state space. This enable the fuzzer to generate inputs with higher diversity more frequently. We also redesign the mutation operators to operate on grammar automatons and perform aggressive changes efficiently to discover bugs with complex triggers. C# is also a memory safe language.","title":"Tech notes on 20240513"},{"location":"posts/2024-05-15-tech-notes/#tech-notes-on-20240513","text":"How does script interpreter work? The finalizer of an object is invoked as soon as the refcount of the object becomes 0. There are at most thousands of ways to trigger finalizers. Weak reference prevents objected from not being collected. As soon as an exception is raised, the control flow goes to the main loop via setjmp/longjmp without unwinding (causing memory leaks => refcount-based GC won't work => it needs mark-and-sweep-based GC) or explicity error propagation (refcount-based GC is working => no memory leaks). Exceptions are handled before executing each bytecode (after stack unwinding). try: finally: can have double returns. Generators have a lot of exception handling issues because generators handle heap-based stacks as well. Type is defined by its behavior that is defined by magic methods (duck typing). No security policy is enforced when using magic methods. Language interoperability : Language interoperability is the capability of two different programming languages to natively interact as part of the same system and operate on the same kind of data structures. There are three methods for interoperability. Object models: COM (COM is a very ambiguous term. It can be a COM format , a COM port , and Common Object Model, a binary interface introduced by Microsoft); Virtual Machine (a specialised intermediate language that different languages compile down to): Java Virtual Machine; foreign function interfaces (FFI), that is in the format of a wrapper library, also called bindings: JNI/JNA/ SWIG . Challenges when implementing language interoperability Object model differences: e.g., permit multiple inheritance or not Memory model differences: e.g., have garbage collector or not Mutability: e.g., immutable or not Favocado (NDSS'21): JS engines are embedded in commercial software, e.g., Adobe Acrobat Reader, Foxit PDF Reader, Chromium, and WebKit. Even without considering the binding layers, it is difficult to effectively fuzz JavaScript engines in the first place. To generate syntactically correct JavaScript code as test cases, modern JavaScript engine fuzzers use context-free grammars or existing semantically correct test cases. While no JavaScript fuzzers generate fully semantically correct code as test cases, some fuzzers can generate test cases in a semantic-aware manner. However, the percentage of rejected test cases that are generated by these semantic-aware fuzzers is still a significant problem. Another challenge for effectively fuzzing the binding layer is the enormous input space, e.g., in Chromium, there are more than 1,000 DOM binding objects. Each DOM object may have a multitude of methods and properties, some of which may require hard-to-satisfy arguments such as other DOM objects. Drawbacks of Favocado From Minerva: Although Favocado also generates semantically-correct test cases, its typebased relations introduce redundant relations between APIs. Besides, its conservative generation strategy only choose a few interface objects in each test case, hindering the fuzzer from state space exploration. From SAGE: Favocado extracts semantic information from browsers\u2019 source code, it doesn't make good use of them. Its semantic information is maintained in a JSON-like structure instead of CFG, which make it difficult to effectively generate highly-structured inputs. Additionally, its flawed implementation makes it challenging to bypass syntactic checks. Favocado can only explore a limited set of browser backend logic. Cooper (NDSS'22): In this paper, we propose cooperative mutation, which modifies both the script code and the program native input to trigger bugs in binding code. We develop three novel techniques to enable practical cooperative mutation on popular scripting languages: we first cluster objects into semantics similar classes to reduce the mutation space of native inputs; then, we statistically infer the relationship between script code and object classes based on a large number of executions; at last, we use the inferred relationship to select proper objects and related script code for targeted mutation. We applied our tool, COOPER, on three popular systems that integrate scripting languages, including Adobe Acrobat, Foxit Reader and Microsoft Word. COOPER successfully found 134 previously unknown bugs. TypeOracle (ICSE'23): Full name: Operand-Variation-Oriented Differential Analysis for Fuzzing Binding Calls in PDF Readers The parameter types of a binding call are inferred by executing the binding call with different values of different types and investigating which types cause an expected effect on the instruction operands. The inferred type information is used to guide the test generation in fuzzing. Gramatron (ISSTA'21) A fuzzer must generate syntactically valid inputs to fuzz beyond the application parser. Previous fuzzers employ parse trees with CFG for input generation and mutation. Existing grammar-aware fuzzers are ineffective at synthesizing complex bug triggers due to biased sampling and localized small-scale mutations. Gramatron performs an automatic two-step transformation on the CFG to create a grammar automaton. First, it transforms the CFG into its GNF which performs the grammar restructuring. Second, it converts the GNF of the grammar into an automaton. Gramatron can encode any input that abides by the grammar as an automaton walk. Grammar automatons restructure the grammar enabling the fuzzer to perform unbiased sampling from the input state space. This enable the fuzzer to generate inputs with higher diversity more frequently. We also redesign the mutation operators to operate on grammar automatons and perform aggressive changes efficiently to discover bugs with complex triggers. C# is also a memory safe language.","title":"Tech notes on 20240513"},{"location":"posts/2024-05-27-hypercube/","text":"Notes about HyperCubeOS for x86_64 # There are some notes when I update HyperCubeOS to support x86_64. Key conclusion: 1) boot the HyperCubeOS for x86_64 to long mode with Limine, 2) enable the identity mapped paging, 2) set up exception/interrupt handlers. Boostrapping # Overall, HyperCubeOS (which is in fact an ELF) is bootstrapped by a bootloader (e.g., GRUB2 ). Bootstrapping is way too arch-specific. It is just painful to revisit x86/x86_64's ISAs. Here is a short summary of different CPU modes. System Management Mode -> Real mode -> Protected Mode <-> Virtual 8086 Mode Protected Mode <-> Long Mode (64-bit Mode <-> Compatibility Mode) Virtual 8086 Mode is designed to run real mode program Protected mode cannot support 64-bit OS Long mode can support both 64-bit (64-bit mode) and 32-bit (compatibility mode) userspace applications In the long mode, registers are 64-bit The long mode has 16 general purpose registers to use (while aarch64 has 31) Operating Mode Shilf-and-add Segmentation Paging Real Mode Enabled Not existing Protected Mode (80286) Enabled Optional Protected Mode (80386 and above) Enabled Optional Compatibility Mode Enabled Enabled 64-Bit Mode Bypassed Enabled GRUBT2 boostraps the OS to 32-bit protected mode, but we need the CPU running in the long mode to support 64-bit mode. Specifically, to run 64-bit programs, we need to switch the CPU to the long mode with paging enabled manually. Prior to switching to the long mode, GRUB2 sets up two arguments that matter, 1) $eax (the magic value \"0x36d76289\" that indicates that the HyperCubeOS was loaded by a MultiBoot2-compiant boot loader) and 2) $eax (a 32-bit physical address of the Multiboot2 information structure defined in Multiboot2 Specification version 2.0 . I tried to save $eax and $ebx, set up the page table (cr3 -> pml4t -> pdpt -> pdt -> pt), and set up the GDT manually , but I found it very problematic to use GRUB2 (a discussion is also available here ). I chose Limine as an alternative. Luckily, Limine has identity mapped the lower 4G. Interrupts # Important data structures. ISRs are stored in the Interrupt Descriptor Table (IDT) when you're in Protected mode, or in the Interrupt Vector Table (IVT) when you're in Real Mode. IDTR has two fields, limit and base. IDTR.limit constraints the number of IDT entries and IDTR.base points to the first IDT entry. Each IDT entry has the interrupt handler address and a few flags. Note that, IDT entry is 16-byte in x86_64, while it is 8-byte in x86. Note that compilers may have problems with assembly to write the interrupt handler, so take a two-stage assembly wrapping (see this ).","title":"Notes about HyperCubeOS for x86_64"},{"location":"posts/2024-05-27-hypercube/#notes-about-hypercubeos-for-x86_64","text":"There are some notes when I update HyperCubeOS to support x86_64. Key conclusion: 1) boot the HyperCubeOS for x86_64 to long mode with Limine, 2) enable the identity mapped paging, 2) set up exception/interrupt handlers.","title":"Notes about HyperCubeOS for x86_64"},{"location":"posts/2024-05-27-hypercube/#boostrapping","text":"Overall, HyperCubeOS (which is in fact an ELF) is bootstrapped by a bootloader (e.g., GRUB2 ). Bootstrapping is way too arch-specific. It is just painful to revisit x86/x86_64's ISAs. Here is a short summary of different CPU modes. System Management Mode -> Real mode -> Protected Mode <-> Virtual 8086 Mode Protected Mode <-> Long Mode (64-bit Mode <-> Compatibility Mode) Virtual 8086 Mode is designed to run real mode program Protected mode cannot support 64-bit OS Long mode can support both 64-bit (64-bit mode) and 32-bit (compatibility mode) userspace applications In the long mode, registers are 64-bit The long mode has 16 general purpose registers to use (while aarch64 has 31) Operating Mode Shilf-and-add Segmentation Paging Real Mode Enabled Not existing Protected Mode (80286) Enabled Optional Protected Mode (80386 and above) Enabled Optional Compatibility Mode Enabled Enabled 64-Bit Mode Bypassed Enabled GRUBT2 boostraps the OS to 32-bit protected mode, but we need the CPU running in the long mode to support 64-bit mode. Specifically, to run 64-bit programs, we need to switch the CPU to the long mode with paging enabled manually. Prior to switching to the long mode, GRUB2 sets up two arguments that matter, 1) $eax (the magic value \"0x36d76289\" that indicates that the HyperCubeOS was loaded by a MultiBoot2-compiant boot loader) and 2) $eax (a 32-bit physical address of the Multiboot2 information structure defined in Multiboot2 Specification version 2.0 . I tried to save $eax and $ebx, set up the page table (cr3 -> pml4t -> pdpt -> pdt -> pt), and set up the GDT manually , but I found it very problematic to use GRUB2 (a discussion is also available here ). I chose Limine as an alternative. Luckily, Limine has identity mapped the lower 4G.","title":"Boostrapping"},{"location":"posts/2024-05-27-hypercube/#interrupts","text":"Important data structures. ISRs are stored in the Interrupt Descriptor Table (IDT) when you're in Protected mode, or in the Interrupt Vector Table (IVT) when you're in Real Mode. IDTR has two fields, limit and base. IDTR.limit constraints the number of IDT entries and IDTR.base points to the first IDT entry. Each IDT entry has the interrupt handler address and a few flags. Note that, IDT entry is 16-byte in x86_64, while it is 8-byte in x86. Note that compilers may have problems with assembly to write the interrupt handler, so take a two-stage assembly wrapping (see this ).","title":"Interrupts"},{"location":"posts/2024-05-29-kvm-for-arm/","text":"KVM/ARM # Why KVM for ARM? Easy to have a hypervisor enabled for every SoC. Security monitor cannot support trap-and-emulate. Hypervisor mode was then introduced as a trap-and-emulate mechanism to support virtualization in the non-secure world To run VMs, the hypervisor must at least partially reside in Hyp mode. From kernel mode: the hypervisor can configure the hardware to trap from kernel mode into hypervisor mode on various sensitive instructions and hardware interrupts. From user mode: can trap into kernel mode or hyp mode directly. The ARM architecture allows each trap to be configured to trap directly into a VM\u2019s kernel mode instead of going through Hyp mode. For example, traps caused by system calls or page faults from user mode can be configured to trap to a VM\u2019s kernel mode directly so that they are handled by the guest OS without intervention of the hypervisor. This avoids going to Hyp mode on each system call or page fault, reducing virtualization overhead. Additionally, all traps into Hyp mode can be disabled and a single non-virtualized kernel can run in kernel mode and have complete control of the system. Has less control registers to use and share no page tables with host user space programs (but share page tables with the host kernel) Memory virtualization Stage-2 page tables, which translate from Intermediate Physical Addresses (IPAs), also known as guest physical addresses, to physical addresses (PAs), also known as host physical addresses. Stage-2 translation can be completely disabled and enabled from Hyp mode. Stage-2 page tables use ARM\u2019s new LPAE page table format, with subtle differences from the page tables used by kernel mode. Comparison to x86 Hyp mode, which is a separate and strictly more privileged CPU mode than previous user and kernel modes. In contrast, Intel has root and non-root mode, which are orthogonal to the CPU protection modes. A crucial difference between the two hardware designs is that Intel\u2019s root mode supports the same full range of user and kernel mode functionality as its non-root mode, whereas ARM\u2019s Hyp mode is a strictly different CPU mode with its own set of features. A hypervisor using ARM\u2019s Hyp mode has an arguably simpler set of features to use than the more complex options available with Intel\u2019s root mode. No VMCS that is automatically saved and restored when switching to and from root mode. In contrast, any state that needs to be saved and restored must be done explicitly in software, which is flexible and potentially faster if no additional state to save. ARM and Intel are quite similar in their support for virtualizing physical memory. (split-mode virtualization) the lowvisor and the highvisor Lowvisor (Setup) First, the lowvisor sets up the correct execution context by appropriate configuration of the hardware, and enforces protection and isolation between different execution contexts. (World Switch) Second, the lowvisor switches from a VM execution context to the host execution context and vice-versa. The host execution context is used to run the hypervisor and the host Linux kernel. (Limited trap handlers) Third, the lowvisor provides a virtualization trap handler, which handles interrupts and exceptions that must trap to the hypervisor. Highvisor implements other functionalitys like handling Stage-2 page faults from the VM and performing instruction emulation (Double-traps) A trap to the highvisor while running the VM will first trap to the lowvisor running in Hyp mode (from user/kernel). The lowvisor will then cause another trap to run the highvisor. Similarly, going from the highvisor to a VM requires trapping from kernel mode to Hyp mode, and then switching to the VM (to user/kernel). Hyp mode is not bypassed. (Identy mapping) 1) the Hyp mode cannot reuse kernel's paga table because Hyp mode uses a different page table format, 2) the highvisor explicitly manages the Hyp mode page tables to map any code executed in Hyp mode and any data structures shared between the highvisor and the lowvisor to the same virtual addresses in Hyp mode and in kernel mode. CPU virtualization Not trapping Set of Stage-1 page table base register in most guest OSes. Hyp Mode -> VM World (1) store all host GP registers on the Hyp stack (2) configure the VGIC for the VM (3) configure the timers for the VM (4) save all host-specific configuration registers onto the Hyp stack (5) load the VM\u2019s configuration registers onto the hardware, which can be done without affecting current execution, because Hyp mode uses its own configuration registers, separate from the host state (6) configure Hyp mode to trap floating-point operations for lazy context switching, trap interrupts, trap CPU halt instructions (WFI/WFE), trap SMC instructions, trap specific configuration register accesses, and trap debug register accesses (7) write VM-specific IDs into shadow ID registers (8) set the Stage-2 page table base register (VTTBR) and enable Stage-2 address translation (9) restore all guest GP registers (10) trap into either user or kernel mode VM World -> Hyp Mode -(123456789)-> Kernel Mode (0) trap to Hyp Mode due to a Stage-2 page fault, or a hardware interrupt (1) store all VM GP registers (2) disable Stage-2 translation (3) configure Hyp mode to not trap any register access or instructions (4) save all VM-specific configuration registers (5) load the host\u2019s configuration registers onto the hardware (6) configure the timers for the host (7) save VM-specific VGIC state (8) restore all host GP registers, (9) trap into kernel mode Memory virtualization (stage-2 translation) stage-2 translation can only be configured in hypervisor mode, and accesses not allowed will cause stage-2 page faults which trap to the hypervisor (although both the highvisor and VMs share the same CPU modes). Stage-2 translation is disabled in the non-VM world (when running in the highvisor and lowviser), and is enabled when in the VM world. (stage-2 page table) KVM/ARM handles Stage-2 page faults by considering the IPA of the fault, and if that address belongs to normal memory in the VM memory map, KVM/ARM allocates a page for the VM by simply calling an existing kernel function, such as get_user_pages, and maps the allocated page to the VM in the Stage-2 page tables. I/O virtualization (virtual devices) QEMU and Virtio virtual devices in host userspace (interfaces) load/restore to MMIO device regions, no in/out (enforcement) Except the passthroughed devices, KVM/ARM uses stage-2 translations to ensure that physical devices cannot be accessed directly from VMs. Any access outside of RAM regions allocated for the VM will trap to the hypervisor, which can route the access to a specific emulated device in QEMU based on the fault address. Key ideas of nested virtualization Guest Hypervisor runs in vEL2 that is in EL1 ARMv8.3 supports to trap EL2 operations/eret to EL2 from vEL2 Virtual exceptions are enforced by trapping to Host hypervisor (EL2) first and then farwarding the exception to Guest Hypervisor The virtual second-stage page tables are software-implemented shadow pages Exit Multiplication Problem: Guest Hypervisor has to access EL1 registers and EL2 registers that all traps -> NEVE access EL1 registers -> access memory: similar to VMCS access EL2 registers -> redirect to EL1 registers 5 times faster Good images: https://developer.arm.com/documentation/102142/0100/Nested-virtualization It seems the split-mode lowvisor/highvisor thing has been deprecated. Now, Linux kernel supports nVHE/hVHE/VHE. nVHE and VHE: KVM/arm64 supports different execution modes depending on the availability of certain CPU features, namely, the Virtualization Host Extensions (VHE) (ARMv8.1 and later). In one of those modes, commonly known as the non-VHE mode, the hypervisor code is split out of the kernel image during boot and installed at EL2, whereas the kernel itself runs at EL1. Although part of the Linux codebase, the EL2 component of KVM is a small component in charge of the switch between multiple EL1s. The hypervisor component is compiled with Linux, but resides in a separate, dedicated memory section of the vmlinux image. And for nVHE, there is a protected mode enabled by kvm-arm.mode=protected. nVHE-based mode with support for guests whose state is kept private from the host. Not valid if the kernel is running in EL2. hVHE: enable VHE for split hypervisor mode","title":"KVM/ARM"},{"location":"posts/2024-05-29-kvm-for-arm/#kvmarm","text":"Why KVM for ARM? Easy to have a hypervisor enabled for every SoC. Security monitor cannot support trap-and-emulate. Hypervisor mode was then introduced as a trap-and-emulate mechanism to support virtualization in the non-secure world To run VMs, the hypervisor must at least partially reside in Hyp mode. From kernel mode: the hypervisor can configure the hardware to trap from kernel mode into hypervisor mode on various sensitive instructions and hardware interrupts. From user mode: can trap into kernel mode or hyp mode directly. The ARM architecture allows each trap to be configured to trap directly into a VM\u2019s kernel mode instead of going through Hyp mode. For example, traps caused by system calls or page faults from user mode can be configured to trap to a VM\u2019s kernel mode directly so that they are handled by the guest OS without intervention of the hypervisor. This avoids going to Hyp mode on each system call or page fault, reducing virtualization overhead. Additionally, all traps into Hyp mode can be disabled and a single non-virtualized kernel can run in kernel mode and have complete control of the system. Has less control registers to use and share no page tables with host user space programs (but share page tables with the host kernel) Memory virtualization Stage-2 page tables, which translate from Intermediate Physical Addresses (IPAs), also known as guest physical addresses, to physical addresses (PAs), also known as host physical addresses. Stage-2 translation can be completely disabled and enabled from Hyp mode. Stage-2 page tables use ARM\u2019s new LPAE page table format, with subtle differences from the page tables used by kernel mode. Comparison to x86 Hyp mode, which is a separate and strictly more privileged CPU mode than previous user and kernel modes. In contrast, Intel has root and non-root mode, which are orthogonal to the CPU protection modes. A crucial difference between the two hardware designs is that Intel\u2019s root mode supports the same full range of user and kernel mode functionality as its non-root mode, whereas ARM\u2019s Hyp mode is a strictly different CPU mode with its own set of features. A hypervisor using ARM\u2019s Hyp mode has an arguably simpler set of features to use than the more complex options available with Intel\u2019s root mode. No VMCS that is automatically saved and restored when switching to and from root mode. In contrast, any state that needs to be saved and restored must be done explicitly in software, which is flexible and potentially faster if no additional state to save. ARM and Intel are quite similar in their support for virtualizing physical memory. (split-mode virtualization) the lowvisor and the highvisor Lowvisor (Setup) First, the lowvisor sets up the correct execution context by appropriate configuration of the hardware, and enforces protection and isolation between different execution contexts. (World Switch) Second, the lowvisor switches from a VM execution context to the host execution context and vice-versa. The host execution context is used to run the hypervisor and the host Linux kernel. (Limited trap handlers) Third, the lowvisor provides a virtualization trap handler, which handles interrupts and exceptions that must trap to the hypervisor. Highvisor implements other functionalitys like handling Stage-2 page faults from the VM and performing instruction emulation (Double-traps) A trap to the highvisor while running the VM will first trap to the lowvisor running in Hyp mode (from user/kernel). The lowvisor will then cause another trap to run the highvisor. Similarly, going from the highvisor to a VM requires trapping from kernel mode to Hyp mode, and then switching to the VM (to user/kernel). Hyp mode is not bypassed. (Identy mapping) 1) the Hyp mode cannot reuse kernel's paga table because Hyp mode uses a different page table format, 2) the highvisor explicitly manages the Hyp mode page tables to map any code executed in Hyp mode and any data structures shared between the highvisor and the lowvisor to the same virtual addresses in Hyp mode and in kernel mode. CPU virtualization Not trapping Set of Stage-1 page table base register in most guest OSes. Hyp Mode -> VM World (1) store all host GP registers on the Hyp stack (2) configure the VGIC for the VM (3) configure the timers for the VM (4) save all host-specific configuration registers onto the Hyp stack (5) load the VM\u2019s configuration registers onto the hardware, which can be done without affecting current execution, because Hyp mode uses its own configuration registers, separate from the host state (6) configure Hyp mode to trap floating-point operations for lazy context switching, trap interrupts, trap CPU halt instructions (WFI/WFE), trap SMC instructions, trap specific configuration register accesses, and trap debug register accesses (7) write VM-specific IDs into shadow ID registers (8) set the Stage-2 page table base register (VTTBR) and enable Stage-2 address translation (9) restore all guest GP registers (10) trap into either user or kernel mode VM World -> Hyp Mode -(123456789)-> Kernel Mode (0) trap to Hyp Mode due to a Stage-2 page fault, or a hardware interrupt (1) store all VM GP registers (2) disable Stage-2 translation (3) configure Hyp mode to not trap any register access or instructions (4) save all VM-specific configuration registers (5) load the host\u2019s configuration registers onto the hardware (6) configure the timers for the host (7) save VM-specific VGIC state (8) restore all host GP registers, (9) trap into kernel mode Memory virtualization (stage-2 translation) stage-2 translation can only be configured in hypervisor mode, and accesses not allowed will cause stage-2 page faults which trap to the hypervisor (although both the highvisor and VMs share the same CPU modes). Stage-2 translation is disabled in the non-VM world (when running in the highvisor and lowviser), and is enabled when in the VM world. (stage-2 page table) KVM/ARM handles Stage-2 page faults by considering the IPA of the fault, and if that address belongs to normal memory in the VM memory map, KVM/ARM allocates a page for the VM by simply calling an existing kernel function, such as get_user_pages, and maps the allocated page to the VM in the Stage-2 page tables. I/O virtualization (virtual devices) QEMU and Virtio virtual devices in host userspace (interfaces) load/restore to MMIO device regions, no in/out (enforcement) Except the passthroughed devices, KVM/ARM uses stage-2 translations to ensure that physical devices cannot be accessed directly from VMs. Any access outside of RAM regions allocated for the VM will trap to the hypervisor, which can route the access to a specific emulated device in QEMU based on the fault address. Key ideas of nested virtualization Guest Hypervisor runs in vEL2 that is in EL1 ARMv8.3 supports to trap EL2 operations/eret to EL2 from vEL2 Virtual exceptions are enforced by trapping to Host hypervisor (EL2) first and then farwarding the exception to Guest Hypervisor The virtual second-stage page tables are software-implemented shadow pages Exit Multiplication Problem: Guest Hypervisor has to access EL1 registers and EL2 registers that all traps -> NEVE access EL1 registers -> access memory: similar to VMCS access EL2 registers -> redirect to EL1 registers 5 times faster Good images: https://developer.arm.com/documentation/102142/0100/Nested-virtualization It seems the split-mode lowvisor/highvisor thing has been deprecated. Now, Linux kernel supports nVHE/hVHE/VHE. nVHE and VHE: KVM/arm64 supports different execution modes depending on the availability of certain CPU features, namely, the Virtualization Host Extensions (VHE) (ARMv8.1 and later). In one of those modes, commonly known as the non-VHE mode, the hypervisor code is split out of the kernel image during boot and installed at EL2, whereas the kernel itself runs at EL1. Although part of the Linux codebase, the EL2 component of KVM is a small component in charge of the switch between multiple EL1s. The hypervisor component is compiled with Linux, but resides in a separate, dedicated memory section of the vmlinux image. And for nVHE, there is a protected mode enabled by kvm-arm.mode=protected. nVHE-based mode with support for guests whose state is kept private from the host. Not valid if the kernel is running in EL2. hVHE: enable VHE for split hypervisor mode","title":"KVM/ARM"},{"location":"posts/2024-07-03-aflnet/","text":"Tech notes about AFLNet/ChatAFL # AFLNET supports two channels, one to send and one to receive # The response-receiving channel forms the state feedback channel. AFLNET uses standard C Socket APIs (i.e., connect/poll/send/recv). For synchronization, there is delay between requests. Otherwise, several server implementations drop the connetion if a new message is received before the response is sent and acknowledged. The input for AFLNET are the pcap files containing the captured network traffic # Use tcpdump to record realistic message exchange (including both requests and responses). Use Wireshark to extract requests. [CHATAFL]: In PROFUZZBENCH, the initial seed corpus of LIVE555 comprises only 4 types of client requests out of 10 present in the ground truth: DESCRIBE, SETUP, PLAY, and TEARDOWN. As it said in the paper, LLM can generate diverse messages and approximately 55% (plus 24.5% after fixing the session id) of client requests can be directly accepted by the server with the successful response code \u201c2xx\u201d. the capability to enrich the initial seeds. State Machine Learner # It takes the server responses and augments the implemented protocol state machine (IPSM) with newly observed states and transitions. Target State Selector # At the beginning, it randomly selects target states. After accumulate statistical data, it chooses states according to two heuristics, i.e., rarely exercised states and a state with higher priority that has been particularly successful in contributing to an increased code or state coverage. Sequence Selector # Once a target state is selected, it selects a message sequence (i.e., a seed input), which can reach the state (including passing by), from the sequence corpus. If multiple message sequences reaching the same state, it randomly selects one. Sequence Mutator # AFLNET splits the original sequence M into three parts: 1) the prefix M1 is required to reach the selected state s, 2) the candidate subsequence M2 contains all messages that can be executed after M1 while still remaining in s, and 3) the suffix M3 is simply the left-over subsequence such that (M1, M2, M3) = M. The mutated message sequence M' = (M1, mutate(M2), M3). Question: does AFLNET gurantee the mutate(M2) still end with state s? In order to mutate the candidate sequence M2, AFLNET supports the replacement, insertion, duplication, and deletion of messages In addition to these protocol-aware mutation operators, AFLNET uses the common byte-level operators that are known from greybox fuzzing, such as bit flipping, and the substitution, insertion, or deletion of blocks of bytes. The mutations are stacked, i.e., several protocol-aware and bytelevel mutation operators are applied to generate the mutated candidate sequence. Generated message sequences M' that are considered as \u201cinteresting\u201d are added to the corpus C. A sequence is considered as interesting if the server response contains new states or state transitions that have not previously been observed; a sequence is interesting also if it covers new branches in the server\u2019s source code. [CHATAFL] LLM can generate the grammar for each type of messages. This is one-shot. When mutating, the fuzzer will search in the grammar corpus, mark the mutatable fields in the seed, and mutate the seed, instead of asking the LLM to generate a new one. [CHATAFL] Of the LLM-generated client requests, 69% to 89% induced a transition to a different state, covering all state transitions for each individual state. When PlateauLen surpasses MaxPlateau, ChatAFL asks LLM to break the coverage wall. Some tips # The tool will be slow in executions per second due to the synchronization between the client and the server. The tool should be running for a long time to activate the target state selector.","title":"Tech notes about AFLNet/ChatAFL"},{"location":"posts/2024-07-03-aflnet/#tech-notes-about-aflnetchatafl","text":"","title":"Tech notes about AFLNet/ChatAFL"},{"location":"posts/2024-07-03-aflnet/#aflnet-supports-two-channels-one-to-send-and-one-to-receive","text":"The response-receiving channel forms the state feedback channel. AFLNET uses standard C Socket APIs (i.e., connect/poll/send/recv). For synchronization, there is delay between requests. Otherwise, several server implementations drop the connetion if a new message is received before the response is sent and acknowledged.","title":"AFLNET supports two channels, one to send and one to receive"},{"location":"posts/2024-07-03-aflnet/#the-input-for-aflnet-are-the-pcap-files-containing-the-captured-network-traffic","text":"Use tcpdump to record realistic message exchange (including both requests and responses). Use Wireshark to extract requests. [CHATAFL]: In PROFUZZBENCH, the initial seed corpus of LIVE555 comprises only 4 types of client requests out of 10 present in the ground truth: DESCRIBE, SETUP, PLAY, and TEARDOWN. As it said in the paper, LLM can generate diverse messages and approximately 55% (plus 24.5% after fixing the session id) of client requests can be directly accepted by the server with the successful response code \u201c2xx\u201d. the capability to enrich the initial seeds.","title":"The input for AFLNET are the pcap files containing the captured network traffic"},{"location":"posts/2024-07-03-aflnet/#state-machine-learner","text":"It takes the server responses and augments the implemented protocol state machine (IPSM) with newly observed states and transitions.","title":"State Machine Learner"},{"location":"posts/2024-07-03-aflnet/#target-state-selector","text":"At the beginning, it randomly selects target states. After accumulate statistical data, it chooses states according to two heuristics, i.e., rarely exercised states and a state with higher priority that has been particularly successful in contributing to an increased code or state coverage.","title":"Target State Selector"},{"location":"posts/2024-07-03-aflnet/#sequence-selector","text":"Once a target state is selected, it selects a message sequence (i.e., a seed input), which can reach the state (including passing by), from the sequence corpus. If multiple message sequences reaching the same state, it randomly selects one.","title":"Sequence Selector"},{"location":"posts/2024-07-03-aflnet/#sequence-mutator","text":"AFLNET splits the original sequence M into three parts: 1) the prefix M1 is required to reach the selected state s, 2) the candidate subsequence M2 contains all messages that can be executed after M1 while still remaining in s, and 3) the suffix M3 is simply the left-over subsequence such that (M1, M2, M3) = M. The mutated message sequence M' = (M1, mutate(M2), M3). Question: does AFLNET gurantee the mutate(M2) still end with state s? In order to mutate the candidate sequence M2, AFLNET supports the replacement, insertion, duplication, and deletion of messages In addition to these protocol-aware mutation operators, AFLNET uses the common byte-level operators that are known from greybox fuzzing, such as bit flipping, and the substitution, insertion, or deletion of blocks of bytes. The mutations are stacked, i.e., several protocol-aware and bytelevel mutation operators are applied to generate the mutated candidate sequence. Generated message sequences M' that are considered as \u201cinteresting\u201d are added to the corpus C. A sequence is considered as interesting if the server response contains new states or state transitions that have not previously been observed; a sequence is interesting also if it covers new branches in the server\u2019s source code. [CHATAFL] LLM can generate the grammar for each type of messages. This is one-shot. When mutating, the fuzzer will search in the grammar corpus, mark the mutatable fields in the seed, and mutate the seed, instead of asking the LLM to generate a new one. [CHATAFL] Of the LLM-generated client requests, 69% to 89% induced a transition to a different state, covering all state transitions for each individual state. When PlateauLen surpasses MaxPlateau, ChatAFL asks LLM to break the coverage wall.","title":"Sequence Mutator"},{"location":"posts/2024-07-03-aflnet/#some-tips","text":"The tool will be slow in executions per second due to the synchronization between the client and the server. The tool should be running for a long time to activate the target state selector.","title":"Some tips"},{"location":"posts/2024-07-07-pyrtfuzz/","text":"Compiler/Interpreter Fuzzing # PyRTFuzz (CCS'23) # Python runtime consists of the interpreter and runtime libraries of the language. [CPython] Since 2008, more than 1,000 bug-related issues have been reported annually, and the number of bugs reported per year has consistently remained close to 2,000 in the last five years. [CPython] Our analysis revealed that most bugs (86.8%) occurred in the Python runtime libraries, while the remaining 13.2% occurred in the Python interpreter core. [CPython] Furthermore, out of 165 modules extracted from the CPython source code, 164 modules were found to have reported bugs. Semantically and syntactically correct programs are there (looking at CodeAlchemist). Remaining challenges: 1) without paying sufficient attention to how these runtime APIs are used, 2) with no varying inputs, 3) A comprehensive approach to testing the Python runtime should address both the interpreter core and runtime libraries as well as interactions between the two. Phase 1: Runtime API Description Extraction: Static extraction (AST) -> Untyped API description -> Dynamic refinement (unittest) -> Typed API description Phase 2: Specification generation (Basic (OO/PO) + Extend (While/For/If/Call/With)) -> Python code generation (top-down wrapping, opt for API coverage/APP diversity/APP validity, with seamless data transfer). Phase 3: Instrumentation (C + Python code), Custom Mutations (of input values). Related works # JSfunfuzz: 2007, industrial, generation-based, SpiderMonkey JavaScript engine LangFuzz: 2012, Usenix Security TreeFuzz: 2016, industrial, generation-based JVM testing: 2016, PLDI Skyfile: 2017, SP, generation-based Fuzzil: 2018, mutation-based, JS engine DeepSmith: 2018, ISSTA, machine-learning-based JVM testing: 2019 ICSE CodeAlchemist: 2019, NDSS, generation-based, JS engine, both semantically and syntactically correct Superion: 2019, ICSE, mutation-based","title":"Compiler/Interpreter Fuzzing"},{"location":"posts/2024-07-07-pyrtfuzz/#compilerinterpreter-fuzzing","text":"","title":"Compiler/Interpreter Fuzzing"},{"location":"posts/2024-07-07-pyrtfuzz/#pyrtfuzz-ccs23","text":"Python runtime consists of the interpreter and runtime libraries of the language. [CPython] Since 2008, more than 1,000 bug-related issues have been reported annually, and the number of bugs reported per year has consistently remained close to 2,000 in the last five years. [CPython] Our analysis revealed that most bugs (86.8%) occurred in the Python runtime libraries, while the remaining 13.2% occurred in the Python interpreter core. [CPython] Furthermore, out of 165 modules extracted from the CPython source code, 164 modules were found to have reported bugs. Semantically and syntactically correct programs are there (looking at CodeAlchemist). Remaining challenges: 1) without paying sufficient attention to how these runtime APIs are used, 2) with no varying inputs, 3) A comprehensive approach to testing the Python runtime should address both the interpreter core and runtime libraries as well as interactions between the two. Phase 1: Runtime API Description Extraction: Static extraction (AST) -> Untyped API description -> Dynamic refinement (unittest) -> Typed API description Phase 2: Specification generation (Basic (OO/PO) + Extend (While/For/If/Call/With)) -> Python code generation (top-down wrapping, opt for API coverage/APP diversity/APP validity, with seamless data transfer). Phase 3: Instrumentation (C + Python code), Custom Mutations (of input values).","title":"PyRTFuzz (CCS'23)"},{"location":"posts/2024-07-07-pyrtfuzz/#related-works","text":"JSfunfuzz: 2007, industrial, generation-based, SpiderMonkey JavaScript engine LangFuzz: 2012, Usenix Security TreeFuzz: 2016, industrial, generation-based JVM testing: 2016, PLDI Skyfile: 2017, SP, generation-based Fuzzil: 2018, mutation-based, JS engine DeepSmith: 2018, ISSTA, machine-learning-based JVM testing: 2019 ICSE CodeAlchemist: 2019, NDSS, generation-based, JS engine, both semantically and syntactically correct Superion: 2019, ICSE, mutation-based","title":"Related works"},{"location":"posts/2024-07-23-usec24/","text":"Usenix Security 24 # Notes, 1) x/x/x follows a format of \"# of Chinese first authors who study in China\"/\"# of Chinese first authors who study abroad\"/\"# of submissions\", 2) x/x follows a format of \"# of Chinese first authors\"/\"# of submissions\". Chinese first authors are good at (>=50% of submissions) hardware security, system security, network security, security analysis, mobile security, fuzzing, IoT and CPS, Autonomous and Automatic Systems, AR and VR, ML, LLM, block chain, and differential privacy. Not good at side channel, web security, user studies, cyrpto, cyrptographic protocols, social issues, zero-knowledge proof, and some other small topics. Interesting Tracks # Hardware Security I: Attacks and Defense (2/2/4) Hardware Security II: Architecture and Microarchitecture (1/4/4) Hardware Security III: Signals (3/4/4) Hardware Security IV: Firmware (0/2/4) Hardware Security V: Embedded (2/2/2) 8/14/18 System Security I: OS (1/2/4) System Security II: OS Kernel (1/3/4) System Security III: Memory I (1/3/4) System Security IV: Multithreading (3/3/4) System Security V: Memory II (0/1/4) 6/12/20 Network Security I: DDoS (1/3/4) Network Security II: Attacks (2/2/4) Network Security III: Detection (2/2/5) Network Security IV: Infrastructure (3/4/4) 8/11/17 Security Analysis I: Source Code and Binary (0/2/4) Security Analysis II: Program Analysis (1/3/4) Security Analysis III: Protocol (1/2/5) Security Analysis IV: OS (1/2/4) 3/9/17 Side Channel I: Transient Execution (2/4) Side Channel II: RowHammer (0/4) Side Channel III (3/5) Side Channel IV (1/5) 6/18 Mobile Security I (3/4) Mobile Security II (2/4) 5/8 Web Security I (1/4) Web Security II: Privacy (0/4) Web Security III: XSS and PHP (0/4) 1/12 Fuzzing I: Software (2/4) Fuzzing II: Method (5/5) Fuzzing III: Network (3/4) Fuzzing IV: Hardware and Firmware (0/5) 10/18 Wireless Security I: Cellular and Bluetooth (2/4) Wireless Security II: Sky and Space (0/4) 2/8 Language-Based Security (1/5) Software Vulnerability Detection (1/4) Cloud Security (2/5) Forensics (1/4) IoT and CPS ( 2/4 ) Autonomous and Automatic Systems ( 3/4 ) AR and VR ( 3/5 ) Measurement II: Network (0/5) Measurement IV: Web (1/4) Measurement V: App (1/5) The others # User Studies I: Social Media Platforms (0/4) User Studies II: At-Risk Users (1/5) User Studies III: Privacy I (0/5) User Studies IV: Policies and Best Practices I (0/5) User Studies V: Policies and Best Practices II (2/5) User Studies VI: Privacy II (0/5) User Studies VII: Policies and Best Practices III (1/4) User Studies VIII: Cryptography (0/4) 4/37 ML I: Federated Learning (4/4) ML II: Fault Injection and Robustness (3/4) ML for Security (1/4) ML III: Secure ML (4/5) ML IV: Privacy Inference I (2/5) ML V: Backdoor Defense (3/5) ML VI: Digital Adversarial Attacks (5/5) ML VII: Adversarial Attack Defense (3/5) ML VIII: Backdoors and Federated Learning (4/4) ML IX: Model Extraction and Watermark (2/5) ML X: Privacy Inference II (2/4) ML XI: Physical Adversarial Attacks (4/4) 37/64 Crypto I: Secret Key Exchange (0/4) Crypto II: Searchable Encryption (4/5) Crypto III: Password and Secret Key (1/4) Crypto IV: Position and Elections (2/5) Crypto V: Private Information Retrieval (0/4) Crypto VI: Security Analysis (2/4) Crypto VII: Private Set Operations (3/4) Crypto VIII: Side Channel (0/4) Crypto IX: Attacks (1/4) 13/38 Cryptographic Protocols I: Multi-Party Computation (2/4) Cryptographic Protocols II (2/5) Cryptographic Protocols III (1/5) 5/14 LLM for Security (4/4) LLM I: Attack and Defense (4/4) LLM II: Jailbreaking (4/4) LLM III: Abuse (3/4) 15/16 Blockchain I (2/5) Blockchain II (3/4) 5/9 Measurement I: Fraud and Malware and Spam (3/4) Measurement III: Auditing and Best Practices I (1/4) Measurement VI: Human Behavior and Security (1/4) Measurement VII: Auditing and Best Practices II (0/3) Social Issues I: Phishing and Password (3/4) Social Issues II: Surveillance and Censorship (2/5) Social Issues III: Social Media Platform (0/4) Social Issues IV (2/4) 7/17 Differential Privacy I (3/4) Differential Privacy II (2/4) 5/8 Zero-Knowledge Proof I (3/4) Zero-Knowledge Proof II (1/5) 4/9 Mobile Privacy (3/4) Deepfake and Synthesis (2/4) Security Analysis V: ML (2/4) Software Security + ML 1 (3/4) Software Security + ML 2 (3/3) 8/11","title":"Usenix Security 24"},{"location":"posts/2024-07-23-usec24/#usenix-security-24","text":"Notes, 1) x/x/x follows a format of \"# of Chinese first authors who study in China\"/\"# of Chinese first authors who study abroad\"/\"# of submissions\", 2) x/x follows a format of \"# of Chinese first authors\"/\"# of submissions\". Chinese first authors are good at (>=50% of submissions) hardware security, system security, network security, security analysis, mobile security, fuzzing, IoT and CPS, Autonomous and Automatic Systems, AR and VR, ML, LLM, block chain, and differential privacy. Not good at side channel, web security, user studies, cyrpto, cyrptographic protocols, social issues, zero-knowledge proof, and some other small topics.","title":"Usenix Security 24"},{"location":"posts/2024-07-23-usec24/#interesting-tracks","text":"Hardware Security I: Attacks and Defense (2/2/4) Hardware Security II: Architecture and Microarchitecture (1/4/4) Hardware Security III: Signals (3/4/4) Hardware Security IV: Firmware (0/2/4) Hardware Security V: Embedded (2/2/2) 8/14/18 System Security I: OS (1/2/4) System Security II: OS Kernel (1/3/4) System Security III: Memory I (1/3/4) System Security IV: Multithreading (3/3/4) System Security V: Memory II (0/1/4) 6/12/20 Network Security I: DDoS (1/3/4) Network Security II: Attacks (2/2/4) Network Security III: Detection (2/2/5) Network Security IV: Infrastructure (3/4/4) 8/11/17 Security Analysis I: Source Code and Binary (0/2/4) Security Analysis II: Program Analysis (1/3/4) Security Analysis III: Protocol (1/2/5) Security Analysis IV: OS (1/2/4) 3/9/17 Side Channel I: Transient Execution (2/4) Side Channel II: RowHammer (0/4) Side Channel III (3/5) Side Channel IV (1/5) 6/18 Mobile Security I (3/4) Mobile Security II (2/4) 5/8 Web Security I (1/4) Web Security II: Privacy (0/4) Web Security III: XSS and PHP (0/4) 1/12 Fuzzing I: Software (2/4) Fuzzing II: Method (5/5) Fuzzing III: Network (3/4) Fuzzing IV: Hardware and Firmware (0/5) 10/18 Wireless Security I: Cellular and Bluetooth (2/4) Wireless Security II: Sky and Space (0/4) 2/8 Language-Based Security (1/5) Software Vulnerability Detection (1/4) Cloud Security (2/5) Forensics (1/4) IoT and CPS ( 2/4 ) Autonomous and Automatic Systems ( 3/4 ) AR and VR ( 3/5 ) Measurement II: Network (0/5) Measurement IV: Web (1/4) Measurement V: App (1/5)","title":"Interesting Tracks"},{"location":"posts/2024-07-23-usec24/#the-others","text":"User Studies I: Social Media Platforms (0/4) User Studies II: At-Risk Users (1/5) User Studies III: Privacy I (0/5) User Studies IV: Policies and Best Practices I (0/5) User Studies V: Policies and Best Practices II (2/5) User Studies VI: Privacy II (0/5) User Studies VII: Policies and Best Practices III (1/4) User Studies VIII: Cryptography (0/4) 4/37 ML I: Federated Learning (4/4) ML II: Fault Injection and Robustness (3/4) ML for Security (1/4) ML III: Secure ML (4/5) ML IV: Privacy Inference I (2/5) ML V: Backdoor Defense (3/5) ML VI: Digital Adversarial Attacks (5/5) ML VII: Adversarial Attack Defense (3/5) ML VIII: Backdoors and Federated Learning (4/4) ML IX: Model Extraction and Watermark (2/5) ML X: Privacy Inference II (2/4) ML XI: Physical Adversarial Attacks (4/4) 37/64 Crypto I: Secret Key Exchange (0/4) Crypto II: Searchable Encryption (4/5) Crypto III: Password and Secret Key (1/4) Crypto IV: Position and Elections (2/5) Crypto V: Private Information Retrieval (0/4) Crypto VI: Security Analysis (2/4) Crypto VII: Private Set Operations (3/4) Crypto VIII: Side Channel (0/4) Crypto IX: Attacks (1/4) 13/38 Cryptographic Protocols I: Multi-Party Computation (2/4) Cryptographic Protocols II (2/5) Cryptographic Protocols III (1/5) 5/14 LLM for Security (4/4) LLM I: Attack and Defense (4/4) LLM II: Jailbreaking (4/4) LLM III: Abuse (3/4) 15/16 Blockchain I (2/5) Blockchain II (3/4) 5/9 Measurement I: Fraud and Malware and Spam (3/4) Measurement III: Auditing and Best Practices I (1/4) Measurement VI: Human Behavior and Security (1/4) Measurement VII: Auditing and Best Practices II (0/3) Social Issues I: Phishing and Password (3/4) Social Issues II: Surveillance and Censorship (2/5) Social Issues III: Social Media Platform (0/4) Social Issues IV (2/4) 7/17 Differential Privacy I (3/4) Differential Privacy II (2/4) 5/8 Zero-Knowledge Proof I (3/4) Zero-Knowledge Proof II (1/5) 4/9 Mobile Privacy (3/4) Deepfake and Synthesis (2/4) Security Analysis V: ML (2/4) Software Security + ML 1 (3/4) Software Security + ML 2 (3/3) 8/11","title":"The others"},{"location":"posts/2024-08-07-command-caching/","text":"Bash command hashing # Reference: https://unix.stackexchange.com/questions/554785/why-does-shell-use-executable-in-usr-bin-and-not-in-usr-local-bin Bash will hash commands: amazing, In other words, when any command is executed without naming its path, the shell starts searching for that command within the directories, which are listed in the path variable. When the Bash gets that command, it keeps the location in a hash table so that it can remember the location of the command. After that, Bash starts checking the table to find the location of the command instead of looking for the command again. It makes the command run faster. However, if the command is moved after recording its location in a table, the shell will not be able to find the command. In this case, a full search of the directories in the path is performed to get the command data. The Filesystem Hierarchy Standard describes the filesystem conventions of a Linux system. In this standard, folders /lib, /usr/lib and /usr/local/lib are the default folders to store shared libraries. The /lib folder has libraries used during the boot time of the system but also used by programs in the /bin folder. Similarly, the/usr/lib folder has libraries used by programs in the /usr/bin folder. Finally, /usr/local/lib folder has libraries used by programs in /usr/local/bin folder. Therefore, we may first check these standard paths to find out if a specific shared library is installed on our system. (You never know when you will use this information when you learn it \u2026) Libraries are also cached. So, after clear the command cache. You must clear the ldconfig cache. That\u2019s what we will not learn from the textbook!!!!!! When teaching Linux kernel, also search on stack overflow: https://stackoverflow.com/questions/17889799/libraries-in-usr-local-lib-not-found","title":"Bash command hashing"},{"location":"posts/2024-08-07-command-caching/#bash-command-hashing","text":"Reference: https://unix.stackexchange.com/questions/554785/why-does-shell-use-executable-in-usr-bin-and-not-in-usr-local-bin Bash will hash commands: amazing, In other words, when any command is executed without naming its path, the shell starts searching for that command within the directories, which are listed in the path variable. When the Bash gets that command, it keeps the location in a hash table so that it can remember the location of the command. After that, Bash starts checking the table to find the location of the command instead of looking for the command again. It makes the command run faster. However, if the command is moved after recording its location in a table, the shell will not be able to find the command. In this case, a full search of the directories in the path is performed to get the command data. The Filesystem Hierarchy Standard describes the filesystem conventions of a Linux system. In this standard, folders /lib, /usr/lib and /usr/local/lib are the default folders to store shared libraries. The /lib folder has libraries used during the boot time of the system but also used by programs in the /bin folder. Similarly, the/usr/lib folder has libraries used by programs in the /usr/bin folder. Finally, /usr/local/lib folder has libraries used by programs in /usr/local/bin folder. Therefore, we may first check these standard paths to find out if a specific shared library is installed on our system. (You never know when you will use this information when you learn it \u2026) Libraries are also cached. So, after clear the command cache. You must clear the ldconfig cache. That\u2019s what we will not learn from the textbook!!!!!! When teaching Linux kernel, also search on stack overflow: https://stackoverflow.com/questions/17889799/libraries-in-usr-local-lib-not-found","title":"Bash command hashing"},{"location":"posts/2024-08-07-pie-pic/","text":"PIC and PIE # The -fPIC flag is a compiler option used in the context of generating position-independent code (PIC). It stands for \"Position Independent Code.\" This flag is commonly used when building shared libraries or dynamically loadable modules to ensure that the code can be loaded at any memory address, and doesn't depend on a fixed memory location. The -fPIE flag is another compiler option related to position-independent code, but it specifically stands for \"Position Independent Executable.\" Like the -fPIC flag, it is used to generate position-independent code, but it is typically used for creating position-independent executables rather than shared libraries. When you compile code with -fPIE, the generated executable is designed to be position-independent, meaning it can be loaded at any memory address during runtime.","title":"PIC and PIE"},{"location":"posts/2024-08-07-pie-pic/#pic-and-pie","text":"The -fPIC flag is a compiler option used in the context of generating position-independent code (PIC). It stands for \"Position Independent Code.\" This flag is commonly used when building shared libraries or dynamically loadable modules to ensure that the code can be loaded at any memory address, and doesn't depend on a fixed memory location. The -fPIE flag is another compiler option related to position-independent code, but it specifically stands for \"Position Independent Executable.\" Like the -fPIC flag, it is used to generate position-independent code, but it is typically used for creating position-independent executables rather than shared libraries. When you compile code with -fPIE, the generated executable is designed to be position-independent, meaning it can be loaded at any memory address during runtime.","title":"PIC and PIE"},{"location":"posts/2024-09-15-confidential-computing/","text":"Quick notes about confidential computing # Intel TDX # What does the Intel TDX protect? Confidential VM's VMCS, page tables, interrupt status, and memory. Confidential Computing on Heterogeneous Systems: Survey and Implications # Heterogeneous Computing System: CPU/GPU/ASIC/FPGA/NPU Threats: (data leakage, unauthorized data access) * (software, tenent), side channel attacks Security requirements: confidentiality and integrity Solutions: TEE (hardware and software), Cryptography, Probablity Trend: TEE for CPU to TEE for GPU, say NVIDIA H100 GPGPU: The idea is to leverage the power of GPUs, which are conventionally used for generating computer graphics, to carry out tasks that were traditionally done by central processing units (CPU). Key points: threat models, compatibility, TCB size, memory encryption, performance/overhead","title":"Quick notes about confidential computing"},{"location":"posts/2024-09-15-confidential-computing/#quick-notes-about-confidential-computing","text":"","title":"Quick notes about confidential computing"},{"location":"posts/2024-09-15-confidential-computing/#intel-tdx","text":"What does the Intel TDX protect? Confidential VM's VMCS, page tables, interrupt status, and memory.","title":"Intel TDX"},{"location":"posts/2024-09-15-confidential-computing/#confidential-computing-on-heterogeneous-systems-survey-and-implications","text":"Heterogeneous Computing System: CPU/GPU/ASIC/FPGA/NPU Threats: (data leakage, unauthorized data access) * (software, tenent), side channel attacks Security requirements: confidentiality and integrity Solutions: TEE (hardware and software), Cryptography, Probablity Trend: TEE for CPU to TEE for GPU, say NVIDIA H100 GPGPU: The idea is to leverage the power of GPUs, which are conventionally used for generating computer graphics, to carry out tasks that were traditionally done by central processing units (CPU). Key points: threat models, compatibility, TCB size, memory encryption, performance/overhead","title":"Confidential Computing on Heterogeneous Systems: Survey and Implications"},{"location":"posts/2024-10-20-control-flow-of-kvm-x86/","text":"Control flow of KVM # KVM_RUN # kvm_vcpu_ioctl() in virt/kvm/kvm_main.c handles generate cmds like KVM_RUN, while kvm_arch_vcpu_ioctl() in arch/x86/kvm/x86.c handles arch-specific cmds like KVM_SET_CPUID. kvm_vcpu_ioctl(): virt/kvm/kvm_main.c case KVM_RUN: kvm_arch_vcpu_ioctl_run(): arch/x86/kvm/x86.c vcpu_run(): - vcpu_enter_guest(): vcpu_run() (-> vmx_vcpu_run()): arch/x86/kvm/vmx/vmx.c vmx_vcpu_enter_exit(): - (ASM) handle_exit() (-> vmx_handle_exit()): - KVM_RUN for ARM # kvm_arch_vcpu_ioctl_run() -> while (ret > 0) -> ret = kvm_arm_vcpu_enter_exit() | -> __kvm_vcpu_run() | | -> __kvm_vcpu_run_vhe() | | | -> do { exit_code = __guest_enter() } | | | | -> el1_sync // vmexit | | | | | -> el1_trap | | | | | -> return exit_code=ARM_EXCEPTION_TRAP | | | | -> return exit_code=ARM_EXCEPTION_TRAP | | | -> while(fixup_guest_exit()) | | | | -> kvm_hyp_handle_exit() | | | | | -> kvm_hyp_handle_dabt_low() | | | | | -> __populate_fault_info() | | | | | -> __get_fault_info() | | | | -> return false | | | -> return exit_code | | -> return exit_code | -> return exit_code -> handle_exit()","title":"Control flow of KVM"},{"location":"posts/2024-10-20-control-flow-of-kvm-x86/#control-flow-of-kvm","text":"","title":"Control flow of KVM"},{"location":"posts/2024-10-20-control-flow-of-kvm-x86/#kvm_run","text":"kvm_vcpu_ioctl() in virt/kvm/kvm_main.c handles generate cmds like KVM_RUN, while kvm_arch_vcpu_ioctl() in arch/x86/kvm/x86.c handles arch-specific cmds like KVM_SET_CPUID. kvm_vcpu_ioctl(): virt/kvm/kvm_main.c case KVM_RUN: kvm_arch_vcpu_ioctl_run(): arch/x86/kvm/x86.c vcpu_run(): - vcpu_enter_guest(): vcpu_run() (-> vmx_vcpu_run()): arch/x86/kvm/vmx/vmx.c vmx_vcpu_enter_exit(): - (ASM) handle_exit() (-> vmx_handle_exit()): -","title":"KVM_RUN"},{"location":"posts/2024-10-20-control-flow-of-kvm-x86/#kvm_run-for-arm","text":"kvm_arch_vcpu_ioctl_run() -> while (ret > 0) -> ret = kvm_arm_vcpu_enter_exit() | -> __kvm_vcpu_run() | | -> __kvm_vcpu_run_vhe() | | | -> do { exit_code = __guest_enter() } | | | | -> el1_sync // vmexit | | | | | -> el1_trap | | | | | -> return exit_code=ARM_EXCEPTION_TRAP | | | | -> return exit_code=ARM_EXCEPTION_TRAP | | | -> while(fixup_guest_exit()) | | | | -> kvm_hyp_handle_exit() | | | | | -> kvm_hyp_handle_dabt_low() | | | | | -> __populate_fault_info() | | | | | -> __get_fault_info() | | | | -> return false | | | -> return exit_code | | -> return exit_code | -> return exit_code -> handle_exit()","title":"KVM_RUN for ARM"},{"location":"posts/2025-01-02-books/","text":"recommended by ChatGPT \u6587\u5b66 # \u4e2d\u56fd\u6587\u5b66\u53f2\uff1a\u795e\u8bdd\uff0c\u8bd7\u6b4c\uff0c\u6c49\u8d4b\uff0c\u8bd7\u8bcd\uff0c\u66f2\uff0c\u5c0f\u8bf4 \u6587\u827a\u7406\u8bba \uff1a\u6587\u5b66\u7684\u672c\u8d28\uff0c\u8bfb\u8005\uff0c\u4f5c\u8005\uff0c\u6587\u672c\uff0c\u4e16\u754c \u897f\u65b9\u6587\u5b66\u53f2\uff1a\u53e4\u5e0c\u814a\u96c5\u5178\u7f57\u9a6c\uff0c\u4e2d\u4e16\u7eaa\uff0c\u6587\u827a\u590d\u5174\u548c\u8d44\u672c\u4e3b\u4e49\u65f6\u671f \u54f2\u5b66 # \u54f2\u5b66\u53f2\uff0c\u79d1\u5b66\u54f2\u5b66 \u6cd5\uff0c\u5112\uff08\u8bba\u8bed\uff09\u91ca\uff08\u8bf4\u4f5b\uff09\u9053\uff08\u8001\u5b50\uff09\uff0c\u8bf8\u5b50\u767e\u5bb6\uff0c\u5b97\u6559\uff08\u6b27\u6d32\uff09 \u9b3c\u8c37\u5b50\u300a\u636d\u9616\u7b56\u300b\uff0c\u636d\u9616\uff0c\u53cd\u5e94\uff0c\u5185\u63f5\uff0c\u62b5\u5dc7\uff0c\u98de\u7b9d\uff0c\u5fe4\u5408\uff1b\u97e9\u975e\u5b50\u300a\u8bf4\u96be\u300b \u53e4\u5e0c\u814a\u54f2\u5b66\uff0c \u5fb7\u56fd\u53e4\u5178\u54f2\u5b66\uff1a\u4e3a\u77e5\u8bc6\u5960\u57fa\uff0c\u4e3a\u81ea\u7531\u8fa9\u62a4\uff1a\u5eb7\u5fb7\uff0c\u8d39\u5e0c\u7279\uff0c\u8c22\u6797\uff0c\u9ed1\u683c\u5c14\uff0c\u9a6c\u514b\u601d \u5b9e\u8df5\u8bba/\u77db\u76fe\u8bba \u7a0b\u6731\u7406\u5b66\u548c\u9646\u738b\u5fc3\u5b66\uff0c\u4e86\u89e3\u65b0\u5112\u5b66 \u6d77\u5fb7\u683c\u5c14 \u653f\u6cbb # \u653f\u6cbb\u54f2\u5b66\uff0c\u653f\u6cbb\u7406\u5ff5\uff0c\u6218\u4e89 \u541b\u4e3b\u8bba\uff0c\u5de6\u4f20\uff0c\u8d44\u6cbb\u901a\u9274\uff08\u5b59\u5b50\u5175\u6cd5/\u5c1a\u4e66/\u5b54\u5b50\u5bb6\u8bed/\u8b66\u4e16\u6052\u8a00\uff09\u3001\u653f\u6cbb\u5b66\u539f\u7406\uff09\u3001\u793e\u4f1a\u79d1\u5b66\u7814\u7a76\u65b9\u6cd5\uff0c\u4e2d\u56fd\u653f\u6cbb\u601d\u60f3\u3001\u897f\u65b9\u653f\u6cbb\u5236\u5ea6\u3001\u5baa\u6cd5\u4e0e\u884c\u653f\u6cd5\uff0c\u79d1\u6280\u653f\u7b56\u3001\u52b3\u5de5\u653f\u7b56\u3001\u6559\u80b2\u653f\u7b56\u3001\u516c\u5171\u7ba1\u7406\u3001\u535a\u5f08\u8bba\u3001\u56fd\u9645\u5173\u7cfb\u3001\u6b63\u4e49\u8bba\u3001\u6218\u4e89\u4e0e\u7406\u89e3\u6218\u4e89\u3001\u516c\u5171\u51b3\u7b56\u548c\u793e\u4f1a\u7ba1\u7406\uff08\u516c\u5e73\u4e0e\u59a5\u534f\uff09\u3001\u79d1\u6280\u8f6c\u5316\u548c\u77e5\u8bc6\u4ea7\u6743\u4fdd\u62a4 \u8bed\u8a00 # \u53e3\u624d\uff0c\u5916\u8bed\uff0c\u65b9\u8a00 \u5386\u53f2 # \u53e4\u4ee3\u5386\u53f2\uff0c\u8fd1\u73b0\u4ee3\u5386\u53f2\uff0c\u4e16\u754c\u5386\u53f2 \u7ecf\u6d4e # \u5b8f\u89c2\uff0c\u5fae\u89c2 \u56fd\u5bcc\u8bba\uff0c\u535a\u5f08\u8bba\uff0c\u4ee3\u8c22\u589e\u957f\u8bba \u7ba1\u7406 # \u7ba1\u7406\u5b66\uff0c\u51b3\u7b56\uff0c\u7ec4\u7ec7\uff0c\u9886\u5bfc\uff0c\u76d1\u7763\uff0c\u521b\u65b0 \u5185\u9690\u9886\u5bfc\u548c\u671f\u671b\u6a21\u578b\uff0c\u793e\u4f1a\u52a0\u901f\u6279\u5224\u548c\u65f6\u95f4\u5206\u5c42\u7406\u8bba \u793e\u4f1a # \u793e\u4f1a\u5b66\u5bfc\u8bba","title":"2025 01 02 books"},{"location":"posts/2025-01-02-books/#_1","text":"\u4e2d\u56fd\u6587\u5b66\u53f2\uff1a\u795e\u8bdd\uff0c\u8bd7\u6b4c\uff0c\u6c49\u8d4b\uff0c\u8bd7\u8bcd\uff0c\u66f2\uff0c\u5c0f\u8bf4 \u6587\u827a\u7406\u8bba \uff1a\u6587\u5b66\u7684\u672c\u8d28\uff0c\u8bfb\u8005\uff0c\u4f5c\u8005\uff0c\u6587\u672c\uff0c\u4e16\u754c \u897f\u65b9\u6587\u5b66\u53f2\uff1a\u53e4\u5e0c\u814a\u96c5\u5178\u7f57\u9a6c\uff0c\u4e2d\u4e16\u7eaa\uff0c\u6587\u827a\u590d\u5174\u548c\u8d44\u672c\u4e3b\u4e49\u65f6\u671f","title":"\u6587\u5b66"},{"location":"posts/2025-01-02-books/#_2","text":"\u54f2\u5b66\u53f2\uff0c\u79d1\u5b66\u54f2\u5b66 \u6cd5\uff0c\u5112\uff08\u8bba\u8bed\uff09\u91ca\uff08\u8bf4\u4f5b\uff09\u9053\uff08\u8001\u5b50\uff09\uff0c\u8bf8\u5b50\u767e\u5bb6\uff0c\u5b97\u6559\uff08\u6b27\u6d32\uff09 \u9b3c\u8c37\u5b50\u300a\u636d\u9616\u7b56\u300b\uff0c\u636d\u9616\uff0c\u53cd\u5e94\uff0c\u5185\u63f5\uff0c\u62b5\u5dc7\uff0c\u98de\u7b9d\uff0c\u5fe4\u5408\uff1b\u97e9\u975e\u5b50\u300a\u8bf4\u96be\u300b \u53e4\u5e0c\u814a\u54f2\u5b66\uff0c \u5fb7\u56fd\u53e4\u5178\u54f2\u5b66\uff1a\u4e3a\u77e5\u8bc6\u5960\u57fa\uff0c\u4e3a\u81ea\u7531\u8fa9\u62a4\uff1a\u5eb7\u5fb7\uff0c\u8d39\u5e0c\u7279\uff0c\u8c22\u6797\uff0c\u9ed1\u683c\u5c14\uff0c\u9a6c\u514b\u601d \u5b9e\u8df5\u8bba/\u77db\u76fe\u8bba \u7a0b\u6731\u7406\u5b66\u548c\u9646\u738b\u5fc3\u5b66\uff0c\u4e86\u89e3\u65b0\u5112\u5b66 \u6d77\u5fb7\u683c\u5c14","title":"\u54f2\u5b66"},{"location":"posts/2025-01-02-books/#_3","text":"\u653f\u6cbb\u54f2\u5b66\uff0c\u653f\u6cbb\u7406\u5ff5\uff0c\u6218\u4e89 \u541b\u4e3b\u8bba\uff0c\u5de6\u4f20\uff0c\u8d44\u6cbb\u901a\u9274\uff08\u5b59\u5b50\u5175\u6cd5/\u5c1a\u4e66/\u5b54\u5b50\u5bb6\u8bed/\u8b66\u4e16\u6052\u8a00\uff09\u3001\u653f\u6cbb\u5b66\u539f\u7406\uff09\u3001\u793e\u4f1a\u79d1\u5b66\u7814\u7a76\u65b9\u6cd5\uff0c\u4e2d\u56fd\u653f\u6cbb\u601d\u60f3\u3001\u897f\u65b9\u653f\u6cbb\u5236\u5ea6\u3001\u5baa\u6cd5\u4e0e\u884c\u653f\u6cd5\uff0c\u79d1\u6280\u653f\u7b56\u3001\u52b3\u5de5\u653f\u7b56\u3001\u6559\u80b2\u653f\u7b56\u3001\u516c\u5171\u7ba1\u7406\u3001\u535a\u5f08\u8bba\u3001\u56fd\u9645\u5173\u7cfb\u3001\u6b63\u4e49\u8bba\u3001\u6218\u4e89\u4e0e\u7406\u89e3\u6218\u4e89\u3001\u516c\u5171\u51b3\u7b56\u548c\u793e\u4f1a\u7ba1\u7406\uff08\u516c\u5e73\u4e0e\u59a5\u534f\uff09\u3001\u79d1\u6280\u8f6c\u5316\u548c\u77e5\u8bc6\u4ea7\u6743\u4fdd\u62a4","title":"\u653f\u6cbb"},{"location":"posts/2025-01-02-books/#_4","text":"\u53e3\u624d\uff0c\u5916\u8bed\uff0c\u65b9\u8a00","title":"\u8bed\u8a00"},{"location":"posts/2025-01-02-books/#_5","text":"\u53e4\u4ee3\u5386\u53f2\uff0c\u8fd1\u73b0\u4ee3\u5386\u53f2\uff0c\u4e16\u754c\u5386\u53f2","title":"\u5386\u53f2"},{"location":"posts/2025-01-02-books/#_6","text":"\u5b8f\u89c2\uff0c\u5fae\u89c2 \u56fd\u5bcc\u8bba\uff0c\u535a\u5f08\u8bba\uff0c\u4ee3\u8c22\u589e\u957f\u8bba","title":"\u7ecf\u6d4e"},{"location":"posts/2025-01-02-books/#_7","text":"\u7ba1\u7406\u5b66\uff0c\u51b3\u7b56\uff0c\u7ec4\u7ec7\uff0c\u9886\u5bfc\uff0c\u76d1\u7763\uff0c\u521b\u65b0 \u5185\u9690\u9886\u5bfc\u548c\u671f\u671b\u6a21\u578b\uff0c\u793e\u4f1a\u52a0\u901f\u6279\u5224\u548c\u65f6\u95f4\u5206\u5c42\u7406\u8bba","title":"\u7ba1\u7406"},{"location":"posts/2025-01-02-books/#_8","text":"\u793e\u4f1a\u5b66\u5bfc\u8bba","title":"\u793e\u4f1a"},{"location":"posts/2025-04-15-why-system-security/","text":"A simple guide to system security survival # Polished by ChatGPT System security is the practice of defending computer systems from threats like vulnerabilities and attacks through safeguard technologies. It sounds noble\u2014and it is\u2014but let\u2019s be honest: system security is notoriously hard to start, exhausting to progress, and often too fragile to survive. So why do we still do it? I believe it's because we're genuinely drawn to it. But seriously\u2014why are we still doing system security, when so many forces seem against it? The harsh reality # The truth is, system security faces serious challenges: Venture capital rarely favors us. AI science departments don\u2019t really need us. Our research is fundamentally tough and slow. Every day, I have to persuade myself to stay in this field\u2014knowing it\u2019s unlikely to lead to a high salary at a leading company or an easy path to a faculty job at a top university. Yet, here we are. Restoring confidence # As JFK once asked: \"Why choose this as our goal? And they may well ask why climb the highest mountain? Why, 35 years ago, fly the Atlantic? Why does Rice play Texas?\" We choose system security not because it is easy, but precisely because it is hard. Because when the next wave of new technologies crashes\u2014when their promises of \"trust\" fall apart\u2014system security will still be there. Storytelling, neoliberalism, and survival # We also have to recognize the world we live in. Under neoliberalism, universities, faculties, and students are all driven by capital. Cybersecurity, too, must align\u2014at least partially\u2014with the interests of capital if it wants to survive. In fact, cybersecurity has always helped ensure the profitability of capital by protecting the underlying systems. System security, in particular, is deeply tied to these ecosystems. Our mission is to build chains of trust that span the entire technology stack\u2014from low-level software to AI applications. At its core, system security is powered by a few fundamental technologies (TBC): Isolation \u2014 separating critical components Attestation \u2014 proving the integrity of systems System security isn't about pure cryptography, mathematical proofs for their own sake, or the latest AI/ML breakthrough. It\u2019s about trust\u2014like putting capital into a safebox, securing value through an unbreakable chain of trust. Storytelling, national security, and survival # Another form of storytelling is to become part of national security itself. Cyberspace is now recognized as the \"fifth domain\" of conflict, alongside land, sea, air, and space. National security policies in cyberspace are a natural extension of political will. I believe in the principle of maintaining advanced attack capabilities while holding a defensive posture. In this sense, system security research must consider both offense and defense. Our defenses must be strong and resilient, but our understanding of attacks must be even more advanced\u2014to maintain readiness, credibility, and capability. Novelty and moving forward # System security survives beyond capital and national security concerns, yet it progresses through continuous technological innovation. Here are the top five research problems that are shaping the future of secure computing: Statefulness Large-scale system understanding AI infrastructure security Full-chain exploit Hardware-agnostic software/communication protocols System security must evolve to address the increasing concerns of capital and national security, as technology becomes ever more integral to economic and geopolitical stability. At the same time, meaningful progress in system security depends on solving fundamental problems\u2014such as statefulness, large-scale system understanding, and full-chain exploits. By addressing these core challenges, system security can become more adaptable and resilient, better equipped to thrive in an increasingly competitive landscape. Long live system security!","title":"A simple guide to system security survival"},{"location":"posts/2025-04-15-why-system-security/#a-simple-guide-to-system-security-survival","text":"Polished by ChatGPT System security is the practice of defending computer systems from threats like vulnerabilities and attacks through safeguard technologies. It sounds noble\u2014and it is\u2014but let\u2019s be honest: system security is notoriously hard to start, exhausting to progress, and often too fragile to survive. So why do we still do it? I believe it's because we're genuinely drawn to it. But seriously\u2014why are we still doing system security, when so many forces seem against it?","title":"A simple guide to system security survival"},{"location":"posts/2025-04-15-why-system-security/#the-harsh-reality","text":"The truth is, system security faces serious challenges: Venture capital rarely favors us. AI science departments don\u2019t really need us. Our research is fundamentally tough and slow. Every day, I have to persuade myself to stay in this field\u2014knowing it\u2019s unlikely to lead to a high salary at a leading company or an easy path to a faculty job at a top university. Yet, here we are.","title":"The harsh reality"},{"location":"posts/2025-04-15-why-system-security/#restoring-confidence","text":"As JFK once asked: \"Why choose this as our goal? And they may well ask why climb the highest mountain? Why, 35 years ago, fly the Atlantic? Why does Rice play Texas?\" We choose system security not because it is easy, but precisely because it is hard. Because when the next wave of new technologies crashes\u2014when their promises of \"trust\" fall apart\u2014system security will still be there.","title":"Restoring confidence"},{"location":"posts/2025-04-15-why-system-security/#storytelling-neoliberalism-and-survival","text":"We also have to recognize the world we live in. Under neoliberalism, universities, faculties, and students are all driven by capital. Cybersecurity, too, must align\u2014at least partially\u2014with the interests of capital if it wants to survive. In fact, cybersecurity has always helped ensure the profitability of capital by protecting the underlying systems. System security, in particular, is deeply tied to these ecosystems. Our mission is to build chains of trust that span the entire technology stack\u2014from low-level software to AI applications. At its core, system security is powered by a few fundamental technologies (TBC): Isolation \u2014 separating critical components Attestation \u2014 proving the integrity of systems System security isn't about pure cryptography, mathematical proofs for their own sake, or the latest AI/ML breakthrough. It\u2019s about trust\u2014like putting capital into a safebox, securing value through an unbreakable chain of trust.","title":"Storytelling, neoliberalism, and survival"},{"location":"posts/2025-04-15-why-system-security/#storytelling-national-security-and-survival","text":"Another form of storytelling is to become part of national security itself. Cyberspace is now recognized as the \"fifth domain\" of conflict, alongside land, sea, air, and space. National security policies in cyberspace are a natural extension of political will. I believe in the principle of maintaining advanced attack capabilities while holding a defensive posture. In this sense, system security research must consider both offense and defense. Our defenses must be strong and resilient, but our understanding of attacks must be even more advanced\u2014to maintain readiness, credibility, and capability.","title":"Storytelling, national security, and survival"},{"location":"posts/2025-04-15-why-system-security/#novelty-and-moving-forward","text":"System security survives beyond capital and national security concerns, yet it progresses through continuous technological innovation. Here are the top five research problems that are shaping the future of secure computing: Statefulness Large-scale system understanding AI infrastructure security Full-chain exploit Hardware-agnostic software/communication protocols System security must evolve to address the increasing concerns of capital and national security, as technology becomes ever more integral to economic and geopolitical stability. At the same time, meaningful progress in system security depends on solving fundamental problems\u2014such as statefulness, large-scale system understanding, and full-chain exploits. By addressing these core challenges, system security can become more adaptable and resilient, better equipped to thrive in an increasingly competitive landscape. Long live system security!","title":"Novelty and moving forward"},{"location":"posts/2025-04-29-properity-of-crisis/","text":"Crisis of Prosperit: Internal Shortcuts and External Setbacks # Polished by ChatGPT Academic prosperity? In reality, it\u2019s bad money driving out good. The growing number of students in cybersecurity research has led to a surge in paper production, creating the illusion of progress. But this rapid expansion has strained the peer review system\u2014reviewers are being added hastily, review cycles are getting shorter, and as a result, the quality of reviews is declining. Meanwhile the same time, research supervision is becoming increasingly superficial, with many mentors unable or unwilling to provide meaningful guidance. Shortcuts undermine fairness. From ghostwriting and ghost-submission to collusion in peer review, the use of shortcuts in academic publishing is corroding the foundation of merit-based evaluation. Initiatives like ACM Protect aim to combat these practices\u2014not to target outright academic fraud, but to restore fairness by eliminating unfair advantages. While such crackdowns may bring a sense of justice to those who follow the rules, they also produce unintended consequences: Chinese professors may fail performance evaluations, students may be unable to graduate, and faculty with blemished records can become targets of political manipulation. The broader fallout is reputational\u2014China\u2019s academic image is further damaged, not just by geopolitics, but by its own internal contradictions and that it handed critics the very knife used against it. Scientists have a motherland, and science has national borders. In an increasingly interconnected world, the geopolitical landscape shapes how scientific research is perceived and received. While the pursuit of knowledge should transcend borders, the reality is that political dynamics often affect the collaboration and recognition of scientific work. When national interests intersect with research, the integrity of science can be compromised, and the impact of one's work can be influenced by factors beyond the quality of the research itself.","title":"Crisis of Prosperit: Internal Shortcuts and External Setbacks"},{"location":"posts/2025-04-29-properity-of-crisis/#crisis-of-prosperit-internal-shortcuts-and-external-setbacks","text":"Polished by ChatGPT Academic prosperity? In reality, it\u2019s bad money driving out good. The growing number of students in cybersecurity research has led to a surge in paper production, creating the illusion of progress. But this rapid expansion has strained the peer review system\u2014reviewers are being added hastily, review cycles are getting shorter, and as a result, the quality of reviews is declining. Meanwhile the same time, research supervision is becoming increasingly superficial, with many mentors unable or unwilling to provide meaningful guidance. Shortcuts undermine fairness. From ghostwriting and ghost-submission to collusion in peer review, the use of shortcuts in academic publishing is corroding the foundation of merit-based evaluation. Initiatives like ACM Protect aim to combat these practices\u2014not to target outright academic fraud, but to restore fairness by eliminating unfair advantages. While such crackdowns may bring a sense of justice to those who follow the rules, they also produce unintended consequences: Chinese professors may fail performance evaluations, students may be unable to graduate, and faculty with blemished records can become targets of political manipulation. The broader fallout is reputational\u2014China\u2019s academic image is further damaged, not just by geopolitics, but by its own internal contradictions and that it handed critics the very knife used against it. Scientists have a motherland, and science has national borders. In an increasingly interconnected world, the geopolitical landscape shapes how scientific research is perceived and received. While the pursuit of knowledge should transcend borders, the reality is that political dynamics often affect the collaboration and recognition of scientific work. When national interests intersect with research, the integrity of science can be compromised, and the impact of one's work can be influenced by factors beyond the quality of the research itself.","title":"Crisis of Prosperit: Internal Shortcuts and External Setbacks"}]}